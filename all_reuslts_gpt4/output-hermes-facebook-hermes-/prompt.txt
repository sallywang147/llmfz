[{"role": "system", "content": "<system>\nYou are a security testing engineer who wants to write a C++ program to execute all lines in a given function by defining and initializing its parameters in a suitable way before fuzzing the function through <code>LLVMFuzzerTestOneInput</code>.\n\nCarefully study the function signature and its parameters, then follow the example problems and solutions to answer the final problem. YOU MUST call the function to fuzz in the solution.\n\nTry as many variations of these inputs as possible. Do not use a random number generator such as <code>rand()</code>.\n\nUse <code>FuzzedDataProvider</code> to generate these inputs. You MUST declare it in <code>LLVMFuzzerTestOneInput</code>, like this:\n<code>\nFuzzedDataProvider stream(data, size);\n</code>\n\nInclude <code>#include <fuzzer/FuzzedDataProvider.h></code> in the solution.\n\nThis code shows example of using it:\n<code>\n// Extract integral values\nint int_arg = stream.ConsumeIntegral<int>();\nint int_arg_in_range = stream.ConsumeIntegralInRange(-100, 100);\nbool bool_arg = stream.ConsumeBool();\n\n// Extract floating point values\nfloat probability = stream.ConsumeProbability();\ndouble double_arg = stream.ConsumeFloatingPoint<double>();\ndouble double_arg_in_range = stream.ConsumeFloatingPointInRange(-1.0, 1.0);\n\n// Extract value from predefined set, such as enum or array\nEnumType enum = stream.ConsumeEnum<EnumType>();\nint valid_values = stream.PickValueInArray({FLAG_1, FLAG_2, FLAG_3});\n\n// Extract an array of bytes as a vector. You MUST call <code>.data()</code> to use result as pointer.\nstd::vector<uint8_t> bytes = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange(0, max_size));\nvoid *data_ptr = bytes.data();\nstd::vector<uint8_t> bytes2 = stream.ConsumeBytes<uint8_t>(requested_size);\nvoid *data2_ptr = bytes2.data();\n\n// Extract a string. You MUST use <code>.c_str()</code> to use result as pointer\nstd::string str = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange(0, max_size));\nchar *ptr = str.c_str();\nstd::string str2 = stream.ConsumeBytesAsString(requested_size);\nchar *ptr2 = str2.c_str();\nstd::string str3 = stream.ConsumeRandomLengthString();\nchar *ptr3 = str3.c_str();\n\n// Extract to user defined object\nstruct_type_t obj;\nsize_t consumed = stream.ConsumeData(&obj, sizeof(obj));\n</code>\n\nThere MUST be AT MOST ONE call to <code>ConsumeRemainingBytes</code> to consume remaining input!\n<code>\nFuzzedDataProvider stream(data, size);\n\nstd::vector<uint8_t> bytes3 = stream.ConsumeRemainingBytes();\nvoid *data3_ptr = bytes3.data();\n</code>\n\nAll variables used MUST be declared and initialized. Carefully make sure that the variable and argument types in your code match and compiles successfully. Add type casts to make types match.\n\nDo not create new variables with the same names as existing variables.\nWRONG:\n<code>\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n  void* data = Foo();\n}\n</code>\n\nEXTREMELY IMPORTANT: If you write code using <code>goto</code>, you MUST MUST also declare all variables BEFORE the <code>goto</code>. Never introduce new variables after the <code>goto</code>.\nWRONG:\n<code>\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n  int a = bar();\n  if (!some_function()) goto EXIT;\n  Foo b = target_function(data, size);\n  int c = another_func();\nEXIT:\n  return 0;\n}\n</code>\n\nCORRECT:\n<code>\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n  int a = bar();\n  Foo b;\n  int c;\n\n  if (!some_function()) goto EXIT;\n  b = target_function(data, size);\n  c = another_func()\nEXIT:\n  return 0;\n}\n</code>\n\nIf an example provided for the same library includes a unique header file, then it must be included in the solution as well.\n</system>\n"}, {"role": "user", "content": "<task>\nYour goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:\n<function header>\nvoid facebook::jsi::Pointer::~Pointer(facebook::jsi::Pointer * )\n</function header>\n</task>\n"}, {"role": "assistant", "content": "<solution>\n\n#include <hermes/hermes.h>\n#include <jsi/jsi.h>\n\nusing facebook::hermes::HermesRuntime;\nusing facebook::hermes::makeHermesRuntime;\nusing facebook::jsi::HostObject;\nusing facebook::jsi::JSIException;\nusing facebook::jsi::Object;\nusing facebook::jsi::PropNameID;\nusing facebook::jsi::Runtime;\nusing facebook::jsi::String;\nusing facebook::jsi::StringBuffer;\nusing facebook::jsi::Value;\n\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n  if (!size) {\n    // Hermes can't handle empty input, and it would have a performance cost\n    // to do so.\n    return 0;\n  }\n  // Hermes bytecode is assumed to be trusted, and there are often no checks\n  // for validity (for performance purposes).\n  // Discard inputs that would be interpreted as bytecode to avoid reporting\n  // those as errors.\n  if (HermesRuntime::isHermesBytecode(data, size)) {\n    return 0;\n  }\n\n  std::string s(reinterpret_cast<const char *>(data), size);\n  s.append(\"\\0\");\n  auto runtime = makeHermesRuntime();\n\n  // create a simple HostObject\n  class ProtoHostObject : public HostObject {\n    Value get(Runtime &rt, const PropNameID &) override { return String::createFromAscii(rt, \"phoprop\"); }\n\n    void set(Runtime &, const PropNameID &name, const Value &value) override {\n      (void)name;\n      (void)value;\n      return;\n    }\n\n    std::vector<PropNameID> getPropertyNames(Runtime &rt) override { return PropNameID::names(rt, \"prop1\", \"1\", \"2\", \"prop2\", \"3\"); }\n  };\n\n  // expose the HostObject to the js runtime\n  // many important apps expose this kind of objects\n  runtime->global().setProperty(*runtime, \"p\", Object::createFromHostObject(*runtime, std::make_shared<ProtoHostObject>()));\n\n  // Cap the run-time of the code so that fuzzing can stay efficient.\n  constexpr uint32_t kTimeoutForRunningInMs = 10000;\n  runtime->watchTimeLimit(kTimeoutForRunningInMs);\n\n  try {\n    runtime->evaluateJavaScript(std::make_unique<StringBuffer>(s), \"\");\n  } catch (const JSIException &e) {\n    // Swallow JS-based exceptions.\n    // The fuzzer will generate a lot of invalid JS, and if this causes an\n    // exception to be thrown evaluating it, that's alright.\n    // The fuzzer is more interested in inputs that cause the sort of crash that\n    // doesn't throw an exception.\n  }\n  // Other types of exceptions are not ok to occur, and should be reported as\n  // bugs.\n  // Hermes throws no exceptions during normal operation, with the exception of\n  // any that escape JS.\n  return 0;\n}\n\n</solution>\n\n"}, {"role": "user", "content": "<task>\nYour goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:\n<function header>\nvoid facebook::jsi::detail::ThreadSafeRuntimeImpl<facebook::hermes::HermesRuntimeImpl, facebook::hermes::(facebook::jsi::detail::ThreadSafeRuntimeImpl * , hermes::vm::RuntimeConfig * )\n</function header>\n</task>\nYou MUST call <code>\nvoid facebook::jsi::detail::ThreadSafeRuntimeImpl<facebook::hermes::HermesRuntimeImpl, facebook::hermes::(facebook::jsi::detail::ThreadSafeRuntimeImpl * , hermes::vm::RuntimeConfig * )\n</code> in your solution!\n\n<solution>"}]