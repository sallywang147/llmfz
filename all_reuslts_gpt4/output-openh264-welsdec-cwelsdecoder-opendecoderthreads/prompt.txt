[{"role": "system", "content": "<system>\nYou are a security testing engineer who wants to write a C++ program to execute all lines in a given function by defining and initializing its parameters in a suitable way before fuzzing the function through <code>LLVMFuzzerTestOneInput</code>.\n\nCarefully study the function signature and its parameters, then follow the example problems and solutions to answer the final problem. YOU MUST call the function to fuzz in the solution.\n\nTry as many variations of these inputs as possible. Do not use a random number generator such as <code>rand()</code>.\n\nUse <code>FuzzedDataProvider</code> to generate these inputs. You MUST declare it in <code>LLVMFuzzerTestOneInput</code>, like this:\n<code>\nFuzzedDataProvider stream(data, size);\n</code>\n\nInclude <code>#include <fuzzer/FuzzedDataProvider.h></code> in the solution.\n\nThis code shows example of using it:\n<code>\n// Extract integral values\nint int_arg = stream.ConsumeIntegral<int>();\nint int_arg_in_range = stream.ConsumeIntegralInRange(-100, 100);\nbool bool_arg = stream.ConsumeBool();\n\n// Extract floating point values\nfloat probability = stream.ConsumeProbability();\ndouble double_arg = stream.ConsumeFloatingPoint<double>();\ndouble double_arg_in_range = stream.ConsumeFloatingPointInRange(-1.0, 1.0);\n\n// Extract value from predefined set, such as enum or array\nEnumType enum = stream.ConsumeEnum<EnumType>();\nint valid_values = stream.PickValueInArray({FLAG_1, FLAG_2, FLAG_3});\n\n// Extract an array of bytes as a vector. You MUST call <code>.data()</code> to use result as pointer.\nstd::vector<uint8_t> bytes = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange(0, max_size));\nvoid *data_ptr = bytes.data();\nstd::vector<uint8_t> bytes2 = stream.ConsumeBytes<uint8_t>(requested_size);\nvoid *data2_ptr = bytes2.data();\n\n// Extract a string. You MUST use <code>.c_str()</code> to use result as pointer\nstd::string str = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange(0, max_size));\nchar *ptr = str.c_str();\nstd::string str2 = stream.ConsumeBytesAsString(requested_size);\nchar *ptr2 = str2.c_str();\nstd::string str3 = stream.ConsumeRandomLengthString();\nchar *ptr3 = str3.c_str();\n\n// Extract to user defined object\nstruct_type_t obj;\nsize_t consumed = stream.ConsumeData(&obj, sizeof(obj));\n</code>\n\nThere MUST be AT MOST ONE call to <code>ConsumeRemainingBytes</code> to consume remaining input!\n<code>\nFuzzedDataProvider stream(data, size);\n\nstd::vector<uint8_t> bytes3 = stream.ConsumeRemainingBytes();\nvoid *data3_ptr = bytes3.data();\n</code>\n\nAll variables used MUST be declared and initialized. Carefully make sure that the variable and argument types in your code match and compiles successfully. Add type casts to make types match.\n\nDo not create new variables with the same names as existing variables.\nWRONG:\n<code>\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n  void* data = Foo();\n}\n</code>\n\nEXTREMELY IMPORTANT: If you write code using <code>goto</code>, you MUST MUST also declare all variables BEFORE the <code>goto</code>. Never introduce new variables after the <code>goto</code>.\nWRONG:\n<code>\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n  int a = bar();\n  if (!some_function()) goto EXIT;\n  Foo b = target_function(data, size);\n  int c = another_func();\nEXIT:\n  return 0;\n}\n</code>\n\nCORRECT:\n<code>\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n  int a = bar();\n  Foo b;\n  int c;\n\n  if (!some_function()) goto EXIT;\n  b = target_function(data, size);\n  c = another_func()\nEXIT:\n  return 0;\n}\n</code>\n\nIf an example provided for the same library includes a unique header file, then it must be included in the solution as well.\n</system>\n"}, {"role": "user", "content": "<task>\nYour goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:\n<function header>\nvoid WelsDestroyDecoder(ISVCDecoder * pDecoder)\n</function header>\n</task>\n"}, {"role": "assistant", "content": "<solution>\n\n#include <stddef.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include <memory>\n\n#include \"codec_api.h\"\n#include \"codec_app_def.h\"\n#include \"codec_def.h\"\n#include \"measure_time.h\"\n#include \"read_config.h\"\n#include \"typedefs.h\"\n\n/*\n * To build locally:\n * CC=clang CXX=clang++ CFLAGS=\"-fsanitize=address,fuzzer-no-link -g\" CXXFLAGS=\"-fsanitize=address,fuzzer-no-link -g\" LDFLAGS=\"-fsanitize=address,fuzzer-no-link\" make -j$(nproc) USE_ASM=No BUILDTYPE=Debug libraries\n * clang++ -o decoder_fuzzer -fsanitize=address -g -O1 -I./codec/api/wels -I./codec/console/common/inc -I./codec/common/inc -L. -lFuzzer -lstdc++ decoder_fuzzer.cpp libopenh264.a\n */\n\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n  int32_t i;\n  int32_t iBufPos = 0;\n  int32_t iEndOfStreamFlag;\n  int iLevelSetting = (int)WELS_LOG_QUIET; // disable logging while fuzzing\n  int32_t iSliceSize;\n  ISVCDecoder *pDecoder;\n  SDecodingParam sDecParam = {0};\n  SBufferInfo sDstBufInfo;\n  std::unique_ptr<uint8_t[]> pBuf(new uint8_t[size + 4]);\n  uint8_t *pData[3] = {NULL};\n  uint8_t uiStartCode[4] = {0, 0, 0, 1};\n\n  memcpy(pBuf.get(), data, size);\n  memcpy(pBuf.get() + size, &uiStartCode[0], 4);\n  memset(&sDstBufInfo, 0, sizeof(SBufferInfo));\n\n  // TODO: is this the best/fastest ERROR_CON to use?\n  sDecParam.eEcActiveIdc = ERROR_CON_SLICE_COPY;\n  // TODO: should we also fuzz VIDEO_BITSTREAM_SVC?\n  sDecParam.sVideoProperty.eVideoBsType = VIDEO_BITSTREAM_AVC;\n\n  WelsCreateDecoder(&pDecoder);\n  pDecoder->Initialize(&sDecParam);\n  pDecoder->SetOption(DECODER_OPTION_TRACE_LEVEL, &iLevelSetting);\n\n  while (1) {\n    if (iBufPos >= size) {\n      iEndOfStreamFlag = 1;\n      if (iEndOfStreamFlag)\n        pDecoder->SetOption(DECODER_OPTION_END_OF_STREAM, (void *)&iEndOfStreamFlag);\n      break;\n    }\n\n    for (i = 0; i < size; i++) {\n      if ((pBuf[iBufPos + i] == 0 && pBuf[iBufPos + i + 1] == 0 && pBuf[iBufPos + i + 2] == 0 && pBuf[iBufPos + i + 3] == 1 && i > 0) || (pBuf[iBufPos + i] == 0 && pBuf[iBufPos + i + 1] == 0 && pBuf[iBufPos + i + 2] == 1 && i > 0)) {\n        break;\n      }\n    }\n    iSliceSize = i;\n    if (iSliceSize < 4) {\n      if (iSliceSize == 0) {\n        // I don't think this should happen but let's just avoid the hang\n        goto label_cleanup;\n      }\n      iBufPos += iSliceSize;\n      continue;\n    }\n\n    pDecoder->DecodeFrameNoDelay(pBuf.get() + iBufPos, iSliceSize, pData, &sDstBufInfo);\n    iBufPos += iSliceSize;\n  }\n\nlabel_cleanup:\n  pDecoder->Uninitialize();\n  WelsDestroyDecoder(pDecoder);\n\n  return 0;\n}\n\n</solution>\n\n"}, {"role": "user", "content": "<task>\nYour goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:\n<function header>\nvoid WelsDec::CWelsDecoder::OpenDecoderThreads(WelsDec::CWelsDecoder * this)\n</function header>\n</task>\nYou MUST call <code>\nvoid WelsDec::CWelsDecoder::OpenDecoderThreads(WelsDec::CWelsDecoder * this)\n</code> in your solution!\n\n<solution>"}]