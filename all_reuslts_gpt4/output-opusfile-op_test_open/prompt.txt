[{"role": "system", "content": "<system>\nYou are a security testing engineer who wants to write a C++ program to execute all lines in a given function by defining and initializing its parameters in a suitable way before fuzzing the function through <code>LLVMFuzzerTestOneInput</code>.\n\nCarefully study the function signature and its parameters, then follow the example problems and solutions to answer the final problem. YOU MUST call the function to fuzz in the solution.\n\nTry as many variations of these inputs as possible. Do not use a random number generator such as <code>rand()</code>.\n\nUse <code>FuzzedDataProvider</code> to generate these inputs. You MUST declare it in <code>LLVMFuzzerTestOneInput</code>, like this:\n<code>\nFuzzedDataProvider stream(data, size);\n</code>\n\nInclude <code>#include <fuzzer/FuzzedDataProvider.h></code> in the solution.\n\nThis code shows example of using it:\n<code>\n// Extract integral values\nint int_arg = stream.ConsumeIntegral<int>();\nint int_arg_in_range = stream.ConsumeIntegralInRange(-100, 100);\nbool bool_arg = stream.ConsumeBool();\n\n// Extract floating point values\nfloat probability = stream.ConsumeProbability();\ndouble double_arg = stream.ConsumeFloatingPoint<double>();\ndouble double_arg_in_range = stream.ConsumeFloatingPointInRange(-1.0, 1.0);\n\n// Extract value from predefined set, such as enum or array\nEnumType enum = stream.ConsumeEnum<EnumType>();\nint valid_values = stream.PickValueInArray({FLAG_1, FLAG_2, FLAG_3});\n\n// Extract an array of bytes as a vector. You MUST call <code>.data()</code> to use result as pointer.\nstd::vector<uint8_t> bytes = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange(0, max_size));\nvoid *data_ptr = bytes.data();\nstd::vector<uint8_t> bytes2 = stream.ConsumeBytes<uint8_t>(requested_size);\nvoid *data2_ptr = bytes2.data();\n\n// Extract a string. You MUST use <code>.c_str()</code> to use result as pointer\nstd::string str = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange(0, max_size));\nchar *ptr = str.c_str();\nstd::string str2 = stream.ConsumeBytesAsString(requested_size);\nchar *ptr2 = str2.c_str();\nstd::string str3 = stream.ConsumeRandomLengthString();\nchar *ptr3 = str3.c_str();\n\n// Extract to user defined object\nstruct_type_t obj;\nsize_t consumed = stream.ConsumeData(&obj, sizeof(obj));\n</code>\n\nThere MUST be AT MOST ONE call to <code>ConsumeRemainingBytes</code> to consume remaining input!\n<code>\nFuzzedDataProvider stream(data, size);\n\nstd::vector<uint8_t> bytes3 = stream.ConsumeRemainingBytes();\nvoid *data3_ptr = bytes3.data();\n</code>\n\nAll variables used MUST be declared and initialized. Carefully make sure that the variable and argument types in your code match and compiles successfully. Add type casts to make types match.\n\nDo not create new variables with the same names as existing variables.\nWRONG:\n<code>\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n  void* data = Foo();\n}\n</code>\n\nEXTREMELY IMPORTANT: If you write code using <code>goto</code>, you MUST MUST also declare all variables BEFORE the <code>goto</code>. Never introduce new variables after the <code>goto</code>.\nWRONG:\n<code>\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n  int a = bar();\n  if (!some_function()) goto EXIT;\n  Foo b = target_function(data, size);\n  int c = another_func();\nEXIT:\n  return 0;\n}\n</code>\n\nCORRECT:\n<code>\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n  int a = bar();\n  Foo b;\n  int c;\n\n  if (!some_function()) goto EXIT;\n  b = target_function(data, size);\n  c = another_func()\nEXIT:\n  return 0;\n}\n</code>\n\nIf an example provided for the same library includes a unique header file, then it must be included in the solution as well.\n</system>\n"}, {"role": "user", "content": "<task>\nYour goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:\n<function header>\nint op_pcm_seek(struct OggOpusFile * _of, size_t _pcm_offset)\n</function header>\n</task>\n"}, {"role": "assistant", "content": "<solution>\n\n#include <errno.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include \"opusfile/config.h\"\n#include \"opusfile/include/opusfile.h\"\n\n// Opusfile fuzzing wrapper to help with automated fuzz testing. It's based on\n// https://github.com/xiph/opusfile/blob/master/examples/opusfile_example.c\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n  int ret, tmp;\n  OggOpusFile *of = op_open_memory(data, size, &ret);\n  if (!of)\n    return 0;\n\n  op_link_count(of);\n\n  int link_index = -1;\n  op_pcm_total(of, link_index);\n  op_raw_total(of, link_index);\n  op_pcm_tell(of);\n  op_raw_tell(of);\n\n  ogg_int64_t total_sample_count = 0;\n  const int pcm_size = 120 * 48 * 2; // 120ms/ch@48kHz is recommended\n  opus_int16 pcm[pcm_size];\n  for (;;) {\n    ret = op_read_stereo(of, pcm, pcm_size);\n    if (ret < 0) {\n      break;\n    }\n\n    if (op_current_link(of) != link_index) {\n      link_index = op_current_link(of);\n      op_pcm_total(of, link_index);\n      op_raw_total(of, link_index);\n      op_pcm_tell(of);\n      op_raw_tell(of);\n      op_bitrate_instant(of);\n      tmp = op_head(of, link_index)->version;\n\n      const OpusTags *tags = op_tags(of, link_index);\n      for (int i = 0; i < tags->comments; ++i) {\n        // Note: The compare also touches memory allocated for user_comments[i].\n        // This is a desired side effect and should be kept even if this\n        // comparison is removed.\n        if (opus_tagncompare(\"METADATA_BLOCK_PICTURE\", 22, tags->user_comments[i]) == 0) {\n          OpusPictureTag pic;\n          if (opus_picture_tag_parse(&pic, tags->user_comments[i]) >= 0) {\n            opus_picture_tag_clear(&pic);\n          }\n        }\n      }\n\n      if (tags->vendor) {\n        tmp = tags->vendor[0];\n      }\n\n      int binary_suffix_len;\n      opus_tags_get_binary_suffix(tags, &binary_suffix_len);\n    }\n\n    if (ret == 0) {\n      break;\n    }\n\n    total_sample_count += ret;\n  }\n\n  if (total_sample_count > 0) {\n    // Try random-access PCM reads. The number of tests is arbitrary and the\n    // offset is designed to be pseudo-random, but deterministic - this is\n    // implemented using Lehmer RNG with a minor hack that probably breaks some\n    // properties of the RNG (but that is acceptable).\n    ogg_int64_t rng_seed = 1307832949LL;\n    for (int i = 0; i < 32; ++i) {\n      // Derive the next deterministic offset to test and iterate the RNG.\n      rng_seed = (rng_seed * 279470273LL);\n      const ogg_int64_t offset = rng_seed % total_sample_count;\n      rng_seed = rng_seed % 4294967291LL;\n\n      if (op_pcm_seek(of, offset) == 0) {\n        tmp = op_read_stereo(of, pcm, pcm_size);\n      }\n    }\n  }\n\n  op_free(of);\n  return 0;\n}\n\n</solution>\n\n"}, {"role": "user", "content": "<task>\nYour goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:\n<function header>\nint op_test_open(struct OggOpusFile * _of)\n</function header>\n</task>\nYou MUST call <code>\nint op_test_open(struct OggOpusFile * _of)\n</code> in your solution!\n\n<solution>"}]