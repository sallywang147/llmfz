[{"role": "system", "content": "<system>\nYou are a security testing engineer who wants to write a C++ program to execute all lines in a given function by defining and initializing its parameters in a suitable way before fuzzing the function through <code>LLVMFuzzerTestOneInput</code>.\n\nCarefully study the function signature and its parameters, then follow the example problems and solutions to answer the final problem. YOU MUST call the function to fuzz in the solution.\n\nTry as many variations of these inputs as possible. Do not use a random number generator such as <code>rand()</code>.\n\nUse <code>FuzzedDataProvider</code> to generate these inputs. You MUST declare it in <code>LLVMFuzzerTestOneInput</code>, like this:\n<code>\nFuzzedDataProvider stream(data, size);\n</code>\n\nInclude <code>#include <fuzzer/FuzzedDataProvider.h></code> in the solution.\n\nThis code shows example of using it:\n<code>\n// Extract integral values\nint int_arg = stream.ConsumeIntegral<int>();\nint int_arg_in_range = stream.ConsumeIntegralInRange(-100, 100);\nbool bool_arg = stream.ConsumeBool();\n\n// Extract floating point values\nfloat probability = stream.ConsumeProbability();\ndouble double_arg = stream.ConsumeFloatingPoint<double>();\ndouble double_arg_in_range = stream.ConsumeFloatingPointInRange(-1.0, 1.0);\n\n// Extract value from predefined set, such as enum or array\nEnumType enum = stream.ConsumeEnum<EnumType>();\nint valid_values = stream.PickValueInArray({FLAG_1, FLAG_2, FLAG_3});\n\n// Extract an array of bytes as a vector. You MUST call <code>.data()</code> to use result as pointer.\nstd::vector<uint8_t> bytes = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange(0, max_size));\nvoid *data_ptr = bytes.data();\nstd::vector<uint8_t> bytes2 = stream.ConsumeBytes<uint8_t>(requested_size);\nvoid *data2_ptr = bytes2.data();\n\n// Extract a string. You MUST use <code>.c_str()</code> to use result as pointer\nstd::string str = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange(0, max_size));\nchar *ptr = str.c_str();\nstd::string str2 = stream.ConsumeBytesAsString(requested_size);\nchar *ptr2 = str2.c_str();\nstd::string str3 = stream.ConsumeRandomLengthString();\nchar *ptr3 = str3.c_str();\n\n// Extract to user defined object\nstruct_type_t obj;\nsize_t consumed = stream.ConsumeData(&obj, sizeof(obj));\n</code>\n\nThere MUST be AT MOST ONE call to <code>ConsumeRemainingBytes</code> to consume remaining input!\n<code>\nFuzzedDataProvider stream(data, size);\n\nstd::vector<uint8_t> bytes3 = stream.ConsumeRemainingBytes();\nvoid *data3_ptr = bytes3.data();\n</code>\n\nAll variables used MUST be declared and initialized. Carefully make sure that the variable and argument types in your code match and compiles successfully. Add type casts to make types match.\n\nDo not create new variables with the same names as existing variables.\nWRONG:\n<code>\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n  void* data = Foo();\n}\n</code>\n\nEXTREMELY IMPORTANT: If you write code using <code>goto</code>, you MUST MUST also declare all variables BEFORE the <code>goto</code>. Never introduce new variables after the <code>goto</code>.\nWRONG:\n<code>\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n  int a = bar();\n  if (!some_function()) goto EXIT;\n  Foo b = target_function(data, size);\n  int c = another_func();\nEXIT:\n  return 0;\n}\n</code>\n\nCORRECT:\n<code>\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n  int a = bar();\n  Foo b;\n  int c;\n\n  if (!some_function()) goto EXIT;\n  b = target_function(data, size);\n  c = another_func()\nEXIT:\n  return 0;\n}\n</code>\n\nIf an example provided for the same library includes a unique header file, then it must be included in the solution as well.\n</system>\n"}, {"role": "user", "content": "<task>\nYour goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:\n<function header>\nint vpx_codec_dec_init_ver(struct vpx_codec_ctx * , struct vpx_codec_iface * , struct vpx_codec_dec_cfg * , size_t , int )\n</function header>\n</task>\n"}, {"role": "assistant", "content": "<solution>\n\n#include <algorithm>\n#include <memory>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n\n#include \"vpx/vp8dx.h\"\n#include \"vpx/vpx_decoder.h\"\n#include \"vpx_ports/mem_ops.h\"\n\n#define IVF_FRAME_HDR_SZ (4 + 8) /* 4 byte size + 8 byte timestamp */\n#define IVF_FILE_HDR_SZ 32\n\n#define VPXD_INTERFACE(name) VPXD_INTERFACE_(name)\n#define VPXD_INTERFACE_(name) vpx_codec_##name##_dx()\n\nextern \"C\" void usage_exit(void) { exit(EXIT_FAILURE); }\n\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n  if (size <= IVF_FILE_HDR_SZ) {\n    return 0;\n  }\n\n  vpx_codec_ctx_t codec;\n  // Set thread count in the range [1, 64].\n  const unsigned int threads = (data[IVF_FILE_HDR_SZ] & 0x3f) + 1;\n  vpx_codec_dec_cfg_t cfg = {threads, 0, 0};\n  if (vpx_codec_dec_init(&codec, VPXD_INTERFACE(DECODER), &cfg, 0)) {\n    return 0;\n  }\n\n  if (threads > 1) {\n    const int enable = (data[IVF_FILE_HDR_SZ] & 0xa0) != 0;\n    const vpx_codec_err_t err = vpx_codec_control(&codec, VP9D_SET_LOOP_FILTER_OPT, enable);\n    static_cast<void>(err);\n  }\n\n  data += IVF_FILE_HDR_SZ;\n  size -= IVF_FILE_HDR_SZ;\n\n  while (size > IVF_FRAME_HDR_SZ) {\n    size_t frame_size = mem_get_le32(data);\n    size -= IVF_FRAME_HDR_SZ;\n    data += IVF_FRAME_HDR_SZ;\n    frame_size = std::min(size, frame_size);\n\n    const vpx_codec_err_t err = vpx_codec_decode(&codec, data, frame_size, nullptr, 0);\n    static_cast<void>(err);\n    vpx_codec_iter_t iter = nullptr;\n    vpx_image_t *img = nullptr;\n    while ((img = vpx_codec_get_frame(&codec, &iter)) != nullptr) {\n    }\n    data += frame_size;\n    size -= frame_size;\n  }\n  vpx_codec_destroy(&codec);\n  return 0;\n}\n\n</solution>\n\n"}, {"role": "user", "content": "<task>\nYour goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:\n<function header>\nvoid recon_tile_row(struct TileWorkerData * , struct VP9Decoder * , int , int , struct VP9LfSyncData * , int )\n</function header>\n</task>\nYou MUST call <code>\nvoid recon_tile_row(struct TileWorkerData * , struct VP9Decoder * , int , int , struct VP9LfSyncData * , int )\n</code> in your solution!\n\n<solution>"}]