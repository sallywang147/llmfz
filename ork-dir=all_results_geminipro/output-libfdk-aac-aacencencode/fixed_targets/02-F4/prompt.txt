Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <vector>

extern "C" {
#include "aacenc_lib.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  AACENC_BufDesc inBufDesc;
  inBufDesc.numBufs = 1;
  inBufDesc.bufs = &stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange(0, size)).data();
  inBufDesc.bufSizes = &stream.ConsumeIntegralInRange(0, size);

  AACENC_BufDesc outBufDesc;
  outBufDesc.numBufs = 1;
  outBufDesc.bufs = &stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange(0, size)).data();
  outBufDesc.bufSizes = &stream.ConsumeIntegralInRange(0, size);

  AACENC_InArgs inargs;
  inargs.numInSamples = stream.ConsumeIntegral<uint32_t>();
  inargs.prevInq = stream.ConsumeIntegral<uint32_t>();
  inargs.prevOutQ = stream.ConsumeIntegral<uint32_t>();

  QMF_SCALE_FACTOR outargs;
  outargs.num_sfb = stream.ConsumeIntegral<uint32_t>();
  outargs.scalefactor = &stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange(0, size)).data();

  AACENCODER* hAacEncoder = aacEncOpen(stream.ConsumeIntegral<uint32_t>(), stream.ConsumeIntegral<uint32_t>(), stream.ConsumeIntegral<uint32_t>());
  if (hAacEncoder == nullptr) {
    return 0;
  }

  int ret = aacEncEncode(hAacEncoder, &inBufDesc, &outBufDesc, &inargs, &outargs);
  if (ret != AACENC_OK) {
    return 0;
  }

  aacEncClose(hAacEncoder);
  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
