Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

extern "C" {
#include <gnutls/gnutls.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  gnutls_session_t session;
  gnutls_init(&session, GNUTLS_SERVER);
  gnutls_priority_set_direct(&session, "PERFORMANCE", NULL);

  const std::string data_to_send = stream.ConsumeRemainingBytesAsString();
  const char* data_to_send_ptr = data_to_send.c_str();
  const size_t data_to_send_size = data_to_send.size();

  size_t bytes_received = gnutls_record_recv(&session,
                                                 const_cast<char*>(data_to_send_ptr),
                                                 data_to_send_size, NULL);
  if (bytes_received > 0) {
    gnutls_record_recv(&session, NULL, 0, NULL);
  }

  gnutls_deinit(&session);
  return 0;
}
```
The issues in the original code are:

1. The `gnutls_record_recv_seq` function is deprecated and should be replaced with `gnutls_record_recv`.
2. The `gnutls_session_int` type is deprecated and should be replaced with `gnutls_session_t`.

The fixed code uses the correct function and type, and it should now compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
