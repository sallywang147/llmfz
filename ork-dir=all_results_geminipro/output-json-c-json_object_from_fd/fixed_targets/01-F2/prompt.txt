Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stdint.h>

#include <json-c/json.h>
#include <unistd.h>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  int fd = -1;
  if (size > 0) {
    fd = open("/dev/shm/json_fuzzer_input", O_RDWR | O_CREAT | O_TRUNC, 0600);
    if (fd < 0) {
      return 0;
    }
    write(fd, data, size);
    lseek(fd, 0, SEEK_SET);
  }

  json_object *obj = json_object_from_fd(fd);
  if (obj) {
    (void)json_object_to_json_string_ext(obj, JSON_C_TO_STRING_PRETTY | JSON_C_TO_STRING_SPACED);
    json_object_put(obj);
  }

  if (fd >= 0) {
    close(fd);
  }
  return 0;
}
```

In this code, the `#include <json.h>` directive is replaced with `#include <json-c/json.h>`, which is the correct header file for the `json-c` library. The `extern "C" {}` block is added around the `#include <json-c/json.h>` directive to ensure that the C++ compiler does not mangle the function names in the `json-c` library, which is necessary for the fuzzer to work correctly.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
