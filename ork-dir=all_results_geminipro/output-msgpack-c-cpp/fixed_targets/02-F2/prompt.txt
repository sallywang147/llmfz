Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);
  size_t size_to_allocate = provider.ConsumeIntegralInRange<size_t>(0, 100000);
  std::vector<uint8_t> data_to_allocate(size_to_allocate);
  provider.ConsumeBytes<uint8_t>(&data_to_allocate[0], size_to_allocate);

  void* ptr = malloc(size_to_allocate);
  if (ptr == nullptr) {
    return 0;
  }

  // Call the target function
  void _GLOBAL__sub_I_unpack_pack_fuzzer_cpp(ptr, size_to_allocate);

  free(ptr);

  return 0;
}
```

In this solution, the `void _GLOBAL__sub_I_unpack_pack_fuzzer_cpp` function is called inside the `LLVMFuzzerTestOneInput` function, fixing the issue reported in the error message.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
