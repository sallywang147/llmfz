Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>

extern "C" {
#include <iostream>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  std::cout << "Hello World!" << std::endl;
  return 0;
}

// Add this line to call the function `void _GLOBAL__sub_I_template.cpp()`
extern "C" void _GLOBAL__sub_I_template_cpp() {
  std::cout << "This is a function called `void _GLOBAL__sub_I_template.cpp()`" << std::endl;
}
```

The corrected code includes the `<iostream>` header inside the `extern "C"` block and adds a definition for the function `void _GLOBAL__sub_I_template.cpp()`, ensuring that the necessary symbols are available for linking and that the function is called.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
