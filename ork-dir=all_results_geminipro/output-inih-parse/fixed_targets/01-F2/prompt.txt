Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <fuzzer/FuzzedDataProvider.h>

extern "C" {
#include <libFuzzer/libFuzzer.h>
}

void parse(char *fname) {
  FILE *fp;
  char buf[1024];

  fp = fopen(fname, "r");
  if (fp == NULL) {
    perror("fopen");
    exit(1);
  }

  while (fgets(buf, sizeof(buf), fp) != NULL) {
    if (buf[strlen(buf) - 1] == '\n') {
      buf[strlen(buf) - 1] = '\0';
    }
    printf("%s\n", buf);
  }

  fclose(fp);
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  if (size < 1 || size > 1024) {
    return 0;
  }

  char *fname = (char *)malloc(size + 1);
  memcpy(fname, data, size);
  fname[size] = '\0';

  parse(fname);

  free(fname);

  return 0;
}
```

The issue with the original code is that it lacks the necessary header `#include <libFuzzer/libFuzzer.h>` which is required for the `LLVMFuzzerTestOneInput` function.

The fixed code includes this header and wraps it with `extern "C" {}` to ensure that the function is properly linked during compilation.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
