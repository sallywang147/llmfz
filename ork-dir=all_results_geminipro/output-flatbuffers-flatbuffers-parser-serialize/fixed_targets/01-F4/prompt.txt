Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stddef.h>
#include <stdint.h>
#include <fuzzer/FuzzedDataProvider.h>
#include "flatbuffers/flatbuffers.h"

extern "C" {
#include "flatbuffers/idl.h"
#include "flatbuffers/util.h"
}

namespace flatbuffers {

// This function is used by the fuzzer.
// It takes a flatbuffer schema and a fuzzed data provider,
// and generates a flatbuffer message according to the schema.
// The message is then serialized and returned as a string.
extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider fdp(data, size);

  // Parse the schema.
  std::string schema = fdp.ConsumeRandomLengthString(1024);
  Parser parser;
  auto ast = parser.Parse(schema.c_str());
  if (!ast) {
    return 0;
  }

  // Generate a message according to the schema.
  auto gen = fdp.ConsumeBool() ?
      Generator(ast, fdp.ConsumeBool() ? GeneratorOptions() :
                                        GeneratorOptions().eager_generated(true)) :
      Generator(ast, fdp.ConsumeBool() ?
                     GeneratorOptions().generate_all(true) :
                     GeneratorOptions().generate_all(true).eager_generated(true));
  auto buf = gen.Generate();

  // Serialize the message.
  Parser::Serialize(buf.data(), buf.size());

  return 0;
}

}  // namespace flatbuffers
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
