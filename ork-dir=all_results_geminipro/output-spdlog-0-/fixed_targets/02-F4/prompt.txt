Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>
#include <fmt/core.h>

extern "C" {
#include <cstring>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);

  fmt::v9::basic_memory_buffer<char, 250ul, std::__1::allocator<char>> buffer;
  std::__1::back_insert_iterator<fmt::v9::basic_memory_buffer<char, 250ul, std::__1::allocator<char>>> it(buffer);

  auto format_string = provider.ConsumeRandomLengthString();
  auto args = provider.ConsumeRemainingBytesAsString();

  fmt::v9::vformat_to(it, 0, format_string.size(), format_string.c_str(), args.c_str());

  return 0;
}
```

The original code has the following issues:

1. The `fmt::v9` namespace is not defined.
2. The `std::__1::back_insert_iterator` type is not defined.

To fix these issues, the following changes have been made:

1. Added the necessary `#include` directives for the `fmt::v9` namespace and the `std::__1::back_insert_iterator` type.
2. Wrapped the `#include` directives for the C++ standard library headers with `extern "C" {}` to prevent name mangling.

The corrected code should now compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
