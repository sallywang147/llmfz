```c++
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

#include <fuzzer/FuzzedDataProvider.h>

#include "fmt/core.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  if (size == 0) {
    return 0;
  }

  FuzzedDataProvider provider(data, size);
  size_t buffer_size = provider.ConsumeIntegralInRange<size_t>(1, 1024);
  std::vector<char> buffer(buffer_size);
  fmt::v9::basic_memory_buffer<char> memory_buffer(buffer.data(), buffer.size());

  const size_t num_values = provider.ConsumeIntegralInRange<size_t>(0, 10);
  std::vector<fmt::v9::detail::value> values(num_values);
  for (auto& value : values) {
    switch (provider.ConsumeIntegralInRange<uint8_t>(0, 3)) {
      case 0:
        value = fmt::v9::detail::make_value<int>(provider.ConsumeIntegral<int>());
        break;
      case 1:
        value = fmt::v9::detail::make_value<double>(provider.ConsumeFloatingPoint<double>());
        break;
      case 2:
        value = fmt::v9::detail::make_value<std::string>(provider.ConsumeRandomLengthString());
        break;
    }
  }

  const size_t num_args = provider.ConsumeIntegralInRange<size_t>(0, 10);
  std::vector<fmt::v9::format_arg> args(num_args);
  for (auto& arg : args) {
    arg.type = provider.ConsumeIntegralInRange<uint8_t>(0, 3);
    arg.value = values[provider.ConsumeIntegralInRange<size_t>(0, values.size() - 1)];
  }

  const std::string format_string = provider.ConsumeRemainingBytesAsString();

  fmt::v9::vformat_to(std::back_inserter(memory_buffer), format_string.c_str(), args.data(), args.size());

  return 0;
}
```