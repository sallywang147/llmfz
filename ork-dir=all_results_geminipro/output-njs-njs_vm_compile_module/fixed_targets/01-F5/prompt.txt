Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

extern "C" {
#include "njs.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  struct njs_vm_s* vm = njs_vm_create();
  if (vm == nullptr) {
    return 0;
  }

  const std::string module_name = stream.ConsumeRemainingBytesAsString();
  struct njs_str_t name = {module_name.size(),
                           const_cast<char*>(module_name.c_str())};

  const size_t script_size = stream.ConsumeIntegral<size_t>();
  char* script = new char[script_size + 1];
  stream.ConsumeBytes<char>(script, script_size);
  script[script_size] = '\0';

  struct njs_mod_s* module =
      njs_vm_compile_module(vm, &name, &script, script + script_size);

  // Check if the module was compiled successfully.
  if (module == nullptr) {
    // An error occurred during compilation.
    njs_vm_destroy(vm);
    delete[] script;
    return 0;
  }

  // Execute the module.
  njs_vm_run_module(vm, module);

  // Clean up.
  njs_vm_destroy(vm);
  delete[] script;
  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
