Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stdint.h>

#include <json-c/json.h>

extern "C" {
#include <json-c/json_tokener.h>
#include <json-c/json_object.h>
#include <json-c/json_util.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  const char *data1 = reinterpret_cast<const char *>(data);
  int error;
  json_object *obj = json_tokener_parse_verbose(data1, &error);

  if (obj == NULL) {
    return 0;
  }

  if (json_object_is_type(obj, json_type_object)) {
    json_object_object_foreach(obj, key, val) {
      (void)json_object_get_type(val);
      (void)json_object_get_string(val);
    }
  }
  (void)json_object_to_json_string_ext(obj, JSON_C_TO_STRING_PRETTY | JSON_C_TO_STRING_SPACED);

  json_object_put(obj);
  return 0;
}
```

The fixed code:

1. Added a check to see if `json_tokener_parse_verbose()` returns `NULL` before using the `obj` pointer. This is to handle the case where the input data is not valid JSON.
2. Added `extern "C" {}` around the `#include` directives for the JSON-C headers. This is necessary to ensure that the C++ compiler does not mangle the function names, which would cause the linker to fail to find the corresponding definitions in the JSON-C library.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
