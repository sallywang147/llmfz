Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <iostream>
#include <stdint.h>
#include <stdio.h>
#include <string>

#include "muParser.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  std::string line_string((char *)data, size);
  try {
    mu::Parser parser;
    parser.SetExpr(line_string);
    double d;
    parser.Eval(&d);
  } catch (mu::Parser::exception_type &e) {
  } catch (mu::ParserError &e) {
  }
  return 0;
}
```

The original code has the following issues:

1. The `muParser.h` header file is not wrapped with `extern "C" {}` which is required for the object linking to succeed.

To fix this, the `#include "muParser.h"` line should be rewritten as follows:

```c++
extern "C" {
#include "muParser.h"
}
```

2. The `mu::Parser` class is not defined.

To fix this, the following line should be added to the beginning of the code:

```c++
using namespace mu;
```

The corrected code is given below:

```c++
#include <iostream>
#include <stdint.h>
#include <stdio.h>
#include <string>

using namespace mu;

extern "C" {
#include "muParser.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  std::string line_string((char *)data, size);
  try {
    Parser parser;
    parser.SetExpr(line_string);
    double d;
    parser.Eval(&d);
  } catch (Parser::exception_type &e) {
  } catch (ParserError &e) {
  }
  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
