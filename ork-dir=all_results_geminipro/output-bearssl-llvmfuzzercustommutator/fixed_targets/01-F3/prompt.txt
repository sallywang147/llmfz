Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

extern "C" {
#include <libfuzzer/libfuzzer_mutator.h>
}

extern "C" size_t LLVMFuzzerCustomMutator(char* data, size_t size, size_t max_size,
                                         int seed) {
  FuzzedDataProvider stream(data, size);
  const size_t new_size = stream.ConsumeIntegralInRange<size_t>(0, max_size);
  if (new_size == size) {
    return 0;
  }
  std::vector<uint8_t> new_data = stream.ConsumeBytes<uint8_t>(new_size);
  memcpy(data, new_data.data(), new_size);
  return new_size;
}
```

The fixed code:
1. Add the missing header file `#include <vector>`.
2. Change the type of `new_data` from `std::string` to `std::vector<uint8_t>`.

The original code has a build error because the `std::vector` class is not included in the code. To fix this, we need to add the header file `#include <vector>`.

The original code also has a runtime error because the type of `new_data` is `std::string`, which is not compatible with the type of `data`, which is `char*`. To fix this, we need to change the type of `new_data` to `std::vector<uint8_t>`.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
