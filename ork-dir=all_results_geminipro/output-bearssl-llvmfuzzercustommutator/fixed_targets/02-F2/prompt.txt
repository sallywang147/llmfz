Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <utility>

extern "C" {
#include <stdlib.h>
#include <string.h>
}

extern "C" size_t LLVMFuzzerCustomMutator(char* data, size_t size, size_t max_size,
                                         int seed) {
  FuzzedDataProvider stream(data, size);

  // Mutate the size of the input.
  size_t new_size = stream.ConsumeIntegralInRange<size_t>(0, max_size);
  if (new_size != size) {
    data = static_cast<char*>(realloc(data, new_size));
    if (data == nullptr) {
      return 0;
    }
    memset(data + size, 0, new_size - size);
    size = new_size;
  }

  // Mutate the contents of the input.
  for (size_t i = 0; i < size; i++) {
    data[i] = stream.ConsumeIntegral<uint8_t>();
  }

  return size;
}
```

The original code had the following issues:

1. The `#include` directives for the C standard library headers were missing.
2. The `realloc()` function was not declared.
3. The `memset()` function was not declared.

The fixed code includes the necessary headers and declares the missing functions.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
