Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <vector>

#include "libhtable.h"

extern "C" {
#include "htable.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  struct shl_htable_int *ht = shl_htable_int_new();
  if (!ht)
    return 0;

  FuzzedDataProvider provider(data, size);
  while (provider.remaining_bytes() > 0) {
    size_t hash = provider.ConsumeIntegral<size_t>();
    std::string str = provider.ConsumeRandomLengthString();
    char *p = str.c_str();
    htable_add(ht, hash, p);
  }

  shl_htable_int_free(ht);
  return 0;
}
```

The following changes were made to fix the code:

1. The `#include "htable.h"` directive was wrapped with `extern "C" {}` to resolve the "undefined reference to" error.
2. The `htable_add` function was declared as `extern "C"` to ensure that it is visible to the C++ compiler.

With these changes, the code should now compile and run successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
