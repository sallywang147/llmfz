Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>
#include <cstdint>
#include <cstdio>
#include <fmt/core.h>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider stream(data, size);

  std::vector<uint8_t> bytes = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange(0, 10000));
  char *ptr = reinterpret_cast<char *>(bytes.data());
  size_t count = bytes.size();

  FILE *stream_fp = fopen("/dev/null", "w");
  fmt::v10::detail::fwrite_fully(ptr, count, stream_fp);
  fclose(stream_fp);

  return 0;
}
```

The main issue with the original code is that it includes the header `<fmt/core.h>` without wrapping it with `extern "C" {}`. This causes a linker error because the function `fmt::v10::detail::fwrite_fully` is not declared as `extern "C"`.

To fix this issue, we need to wrap the `#include` directive for `<fmt/core.h>` with `extern "C" {}`. This tells the compiler to treat the declarations in this header as C declarations, which allows them to be linked with the C++ code.

Here is the corrected code:

```c++
#include <fuzzer/FuzzedDataProvider.h>
#include <cstdint>
#include <cstdio>

extern "C" {
#include <fmt/core.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider stream(data, size);

  std::vector<uint8_t> bytes = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange(0, 10000));
  char *ptr = reinterpret_cast<char *>(bytes.data());
  size_t count = bytes.size();

  FILE *stream_fp = fopen("/dev/null", "w");
  fmt::v10::detail::fwrite_fully(ptr, count, stream_fp);
  fclose(stream_fp);

  return 0;
}
```

With this change, the code should build and run successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
