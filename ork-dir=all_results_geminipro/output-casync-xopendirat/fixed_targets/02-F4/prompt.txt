Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <dirent.h>

extern "C" {
#include <sys/syscall.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);

  int fd = provider.ConsumeIntegral<int>();
  size_t name_size = provider.ConsumeIntegralInRange<size_t>(0, 1024);
  std::vector<uint8_t> name_bytes = provider.ConsumeBytes<uint8_t>(name_size);
  char* name = reinterpret_cast<char*>(name_bytes.data());
  int flags = provider.ConsumeIntegral<int>();
  DIR** ret = nullptr;

  int result = syscall(SYS_opendirat, fd, name, flags, ret);

  if (result == 0) {
    closedir(*ret);
  }

  return 0;
}

extern "C" int xopendirat(int fd, char * name, int flags, struct __dirstream ** ret) {
  return syscall(SYS_opendirat, fd, name, flags, ret);
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
