Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <string>

extern "C" {
#include "mongoose.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  const std::string url = stream.ConsumeRemainingBytesAsString();
  const std::string func_name = stream.ConsumeRemainingBytesAsString();
  const std::string func_data = stream.ConsumeRemainingBytesAsString();

  struct mg_mgr mgr;
  mg_mgr_init(&mgr);

  struct mg_connection* conn = mg_sntp_connect(&mgr, url.c_str(),
                                               nullptr, func_data.c_str());
  if (conn != nullptr) {
    mg_close_connection(conn);
  }

  mg_mgr_free(&mgr);
  return 0;
}
```

The original code has the following issues:

1. The `mongoose.h` header is included twice, once with `extern "C" {}` and once without. This can lead to linker errors.
2. The `mg_sntp_connect` function is not declared in the `mongoose.h` header. This can lead to compiler errors.

The fixed code includes the `mongoose.h` header only once, with `extern "C" {}`, and declares the `mg_sntp_connect` function. This should fix the build errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
