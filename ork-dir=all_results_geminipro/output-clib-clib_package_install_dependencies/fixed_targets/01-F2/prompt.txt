Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include "../../src/common/clib-package.h"
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

extern "C" {
#include <unistd.h>
}

int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  if (size < 3) {
    return 0;
  }
  char filename[256];
  sprintf(filename, "libfuzzer.json");

  FILE *fp = fopen(filename, "wb");
  if (!fp)
    return 0;
  fwrite(data, size, 1, fp);
  fclose(fp);

  clib_package_t *pkg = clib_package_load_from_manifest(filename, 0);
  if (pkg) {
    char dir[] = "/tmp/libfuzzer";
    clib_package_install_dependencies(pkg, dir, 0);
    clib_package_free(pkg);
  }
  unlink(filename);
  return 0;
}
```
The issue is that the code uses the `unlink` function, which is declared in the `unistd.h` header. However, this header is not included in the code. To fix the issue, the `unistd.h` header needs to be included.

To do this, add the following line at the beginning of the code:
```c++
extern "C" {
#include <unistd.h>
}
```
The `extern "C"` directive is used to tell the compiler that the `unistd.h` header should be treated as a C header, rather than a C++ header. This is necessary because the `unlink` function is declared in the C standard library, not the C++ standard library.

After adding the `extern "C"` directive, the code should compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
