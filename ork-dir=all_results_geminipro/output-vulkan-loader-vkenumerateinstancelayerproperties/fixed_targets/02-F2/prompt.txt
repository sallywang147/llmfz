Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
The build error is:

```
error: undefined reference to 'vkEnumerateInstanceLayerProperties'
```

This error means that the function `vkEnumerateInstanceLayerProperties` is not defined in the program. To fix this error, you need to include the header file that defines this function. The header file is `vulkan/vulkan_core.h`.

Here is the corrected code:

```cpp
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

#include "vulkan/vulkan_core.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);
  int layer_count = provider.ConsumeIntegral<int>();
  if (layer_count < 0) {
    return 0;
  }
  std::vector<VkLayerProperties> layer_properties(layer_count);
  int ret = vkEnumerateInstanceLayerProperties(&layer_count,
                                             layer_properties.data());
  if (ret != VK_SUCCESS) {
    return 0;
  }
  return 0;
}
```

With this change, the program should build and run successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
