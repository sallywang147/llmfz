Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <vector>

#include "sftk.h"

extern "C" {
#include "sftk.h"
}

extern "C" size_t LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);

  struct SFTKSlotStr* slot = nullptr;
  size_t slot_size = provider.ConsumeIntegralInRange<size_t>(0, 1024);
  struct SFTKObjectStr* object = nullptr;
  size_t object_size = provider.ConsumeIntegralInRange<size_t>(0, 1024);

  sftk_CreateNewSlot(slot, slot_size, object);

  return 0;
}
```

The build error was caused by the fact that the header `sftk.h` was included twice, once with `#include "sftk.h"` and once with `#include <sftk.h>`. This caused a conflict between the two versions of the header, and the compiler was unable to resolve it.

To fix the error, the `#include <sftk.h>` line was removed, and the `#include "sftk.h"` line was wrapped in `extern "C" {}`. This ensures that the header is only included once, and that the compiler is able to resolve the conflict.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
