Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include "flatbuffers/flatbuffers.h"

#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>
#include <vector>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  std::string input_buffer;
  stream.ConsumeBytesAsString(&input_buffer);

  flatbuffers::Parser parser;
  std::string warnings;
  std::string errors;
  char* output = flatbuffers::GenTextFile(&parser, &input_buffer, &warnings, &errors);
  free(output);
  return 0;
}
```

The original code has the following issues:

1. The `flatbuffers::Parser` class is not defined. This is because the `flatbuffers` library is not properly included.
2. The `flatbuffers::GenTextFile` function is not defined. This is because the `flatbuffers` library is not properly included.

To fix these issues, the following changes are made:

1. The `#include "flatbuffers/flatbuffers.h"` directive is added to include the `flatbuffers` library.
2. The `extern "C"` keyword is added to the `#include "flatbuffers/flatbuffers.h"` directive to ensure that the `flatbuffers` library is linked properly.

The resulting code should compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
