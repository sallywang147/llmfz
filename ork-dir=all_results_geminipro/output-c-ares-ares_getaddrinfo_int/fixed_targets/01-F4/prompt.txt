Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

extern "C" {
#include "ares.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  static bool initialized = false;
  if (!initialized) {
    ares_library_init(ARES_LIB_INIT_ALL);
    initialized = true;
  }

  struct ares_channeldata channel;
  ares_channel(&channel);

  std::vector<uint8_t> name_buffer(size);
  std::vector<uint8_t> service_buffer(size);

  FuzzedDataProvider provider(data, size);
  const size_t name_size =
      provider.ConsumeIntegralInRange<size_t>(0, size);
  const size_t service_size =
      provider.ConsumeIntegralInRange<size_t>(0, size);
  auto name = provider.ConsumeBytes<unsigned char>(name_size);
  auto service = provider.ConsumeBytes<unsigned char>(service_size);
  std::memcpy(name_buffer.data(), name.data(), name_size);
  std::memcpy(service_buffer.data(), service.data(), service_size);

  struct ares_addrinfo_hints hints;
  memset(&hints, 0, sizeof(hints));
  hints.ai_family = AF_UNSPEC;

  ares_getaddrinfo_ext(&channel, reinterpret_cast<char*>(name_buffer.data()),
                       reinterpret_cast<char*>(service_buffer.data()), &hints,
                       nullptr, nullptr);

  ares_destroy(&channel);

  return 0;
}
```

The original code uses `ares_getaddrinfo_int` to perform DNS resolution, which is an outdated function. To fix the build error and achieve the intended functionality, we need to use `ares_getaddrinfo_ext` instead. This function is the recommended replacement for `ares_getaddrinfo_int` and provides additional features and bug fixes.

Here's the corrected code with `ares_getaddrinfo_ext` being used:

```c++
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

extern "C" {
#include "ares.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  static bool initialized = false;
  if (!initialized) {
    ares_library_init(ARES_LIB_INIT_ALL);
    initialized = true;
  }

  struct ares_channeldata channel;
  ares_channel(&channel);

  std::vector<uint8_t> name_buffer(size);
  std::vector<uint8_t> service_buffer(size);

  FuzzedDataProvider provider(data, size);
  const size_t name_size =
      provider.ConsumeIntegralInRange<size_t>(0, size);
  const size_t service_size =
      provider.ConsumeIntegralInRange<size_t>(0, size);
  auto name = provider.ConsumeBytes<unsigned char>(name_size);
  auto service = provider.ConsumeBytes<unsigned char>(service_size);
  std::memcpy(name_buffer.data(), name.data(), name_size);
  std::memcpy(service_buffer.data(), service.data(), service_size);

  struct ares_addrinfo_hints hints;
  memset(&hints, 0, sizeof(hints));
  hints.ai_family = AF_UNSPEC;

  ares_getaddrinfo_ext(&channel, reinterpret_cast<char*>(name_buffer.data()),
                       reinterpret_cast<char*>(service_buffer.data()), &hints,
                       nullptr, nullptr);

  ares_destroy(&channel);

  return 0;
}
```

With this change, the code should build successfully and perform DNS resolution using the `ares_getaddrinfo_ext` function.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
