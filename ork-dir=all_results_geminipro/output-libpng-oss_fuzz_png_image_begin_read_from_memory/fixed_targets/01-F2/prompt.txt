Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "png.h"

extern "C" {
#include <png.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  png_image image;
  memset(&image, 0, sizeof(image));

  const size_t memory_size = stream.ConsumeIntegral<size_t>();
  std::vector<uint8_t> memory(memory_size);
  stream.ConsumeBytes<uint8_t>(memory.data(), memory_size);

  int result = OSS_FUZZ_png_image_begin_read_from_memory(&image,
                                                        reinterpret_cast<char*>(memory.data()),
                                                        memory_size);
  if (result == 0) {
    png_image_free(&image);
  }

  return 0;
}
```

The build error is caused by the missing declaration of `png.h`. To fix it, we need to include the `png.h` header file with `extern "C" {}` to ensure that the C++ compiler treats the C header file as a C header file.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
