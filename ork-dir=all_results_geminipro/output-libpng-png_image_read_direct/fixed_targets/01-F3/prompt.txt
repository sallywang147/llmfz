Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include <png.h>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const std::string input_string = stream.ConsumeRemainingBytesAsString();
  png_image image;
  memset(&image, 0, sizeof(image));
  image.version = PNG_IMAGE_VERSION;
  if (png_image_read_from_memory(&image,
                                reinterpret_cast<png_bytep>(const_cast<char*>(input_string.c_str())),
                                input_string.size()) != 0) {
    return 0;
  }
  png_image_free(&image);
  return 0;
}

int main() {
  return 0;
}
```

The fixed code includes the following changes:

1. The `png_image_read_direct` function is not used in the code, so it is removed.
2. The `png_image_read_from_memory` function is used to read the PNG image data from memory.
3. The `png_image_free` function is used to free the memory allocated for the PNG image data.

With these changes, the code should now build and run successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
