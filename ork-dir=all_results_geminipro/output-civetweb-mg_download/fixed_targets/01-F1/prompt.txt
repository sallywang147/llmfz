Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "mongoose.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const std::string host = stream.ConsumeRemainingBytesAsString();
  const int port = stream.ConsumeIntegral<int>();
  const int use_ssl = stream.ConsumeBool();
  const size_t ebuf_len = stream.ConsumeIntegralInRange<size_t>(0, 1024);
  char* ebuf = static_cast<char*>(std::malloc(ebuf_len));
  const std::string fmt = stream.ConsumeRemainingBytesAsString();

  struct mg_connection* conn = mg_download(const_cast<char*>(host.c_str()), port,
                                          use_ssl, ebuf, ebuf_len,
                                          const_cast<char*>(fmt.c_str()));
  mg_close_connection(conn);
  std::free(ebuf);
  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
