Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
The provided code has the following issues:

1. The function `exercise_signature_key` is not defined.
2. The header `fuzzer/FuzzedDataProvider.h` is not wrapped with `extern "C" {}`.

To fix the code, we need to:

1. Define the function `exercise_signature_key`.
2. Wrap the header `fuzzer/FuzzedDataProvider.h` with `extern "C" {}`.

The corrected code is given below:

```c++
#include <fuzzer/FuzzedDataProvider.h>

#include <cstdint>
#include <cstdlib>

extern "C" {
#include <fuzzer/FuzzedDataProvider.h>
}

void exercise_signature_key(int key, int usage, int alg) {
  // Do something with the key, usage, and alg.
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const int key = stream.ConsumeIntegral<int>();
  const int usage = stream.ConsumeIntegral<int>();
  const int alg = stream.ConsumeIntegral<int>();
  exercise_signature_key(key, usage, alg);
  return 0;
}
```

With these changes, the code should compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
