Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <cstdint>
#include <cstdlib>

extern "C" {
#include <fuzzer/FuzzedDataProvider.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const int key = stream.ConsumeIntegral<int>();
  const int usage = stream.ConsumeIntegral<int>();
  const int alg = stream.ConsumeIntegral<int>();
  exercise_signature_key(key, usage, alg);
  return 0;
}

// Define the missing function `exercise_signature_key`
void exercise_signature_key(int key, int usage, int alg) {
  // Implement the logic for exercising the signature key
}
```

The changes made to the code are:

1. The `#include <fuzzer/FuzzedDataProvider.h>` directive is wrapped with `extern "C" {}` to make the C++ symbols in the header file compatible with C code.
2. The `exercise_signature_key` function is defined with the `void` return type and takes three integer arguments: `key`, `usage`, and `alg`.

Now, the code should compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
