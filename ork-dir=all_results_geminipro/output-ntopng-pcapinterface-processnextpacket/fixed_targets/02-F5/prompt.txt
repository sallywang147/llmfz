Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>
#include <vector>

#include "pcap.h"

class PcapInterface {
 public:
  PcapInterface(const uint8_t* data, size_t size)
      : data(data), size(size) {}

  bool processNextPacket(const uint8_t* data, size_t size, struct pcap* pd, int if_index, int pcap_datalink_type) {
    FuzzedDataProvider stream(data, size);
    const size_t packet_size =
        stream.ConsumeIntegralInRange<size_t>(0, 1024 * 1024);
    std::vector<uint8_t> packet(packet_size);
    stream.ConsumeBytes<uint8_t>(packet.data(), packet_size);
    return pcap_process_packet(pd, packet.data(), packet_size) == 1;
  }

 private:
  const uint8_t* data;
  size_t size;
};

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  PcapInterface pcap_interface(data, size);
  pcap_interface.processNextPacket(data, size, nullptr, 0, 0);
  return 0;
}
```

The following changes were made to the code:

1. The `processNextPacket` method was modified to take the `data` and `size` as arguments.
2. The `pcap_interface.processNextPacket(data, size, nullptr, 0, 0);` line was added to the `LLVMFuzzerTestOneInput` function to call the `processNextPacket` method with the correct arguments.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
