Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <chrono>
#include <iostream>
#include <string>

extern "C" {
  #include "cctz/time_zone.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider fuzzed_data(data, size);

  std::chrono::duration<long long, std::ratio<1l, 1000000l> > offset;
  offset.count() = fuzzed_data.ConsumeIntegral<int32_t>();
  cctz::time_zone::Impl *tz = cctz::fixed_time_zone(&offset);
  std::string name = fuzzed_data.ConsumeRandomLengthString();
  tz->set_name(name);
  std::string abbreviation = fuzzed_data.ConsumeRandomLengthString();
  tz->set_abbreviation(abbreviation);
  std::chrono::system_clock::time_point tp;
  cctz::convert(cctz::civil_second(fuzzed_data.ConsumeIntegral<uint32_t>(), fuzzed_data.ConsumeIntegral<uint32_t>(), fuzzed_data.ConsumeIntegral<uint32_t>(), fuzzed_data.ConsumeIntegral<uint32_t>(), fuzzed_data.ConsumeIntegral<uint32_t>(), fuzzed_data.ConsumeIntegral<uint32_t>()), *tz, &tp);
  cctz::format("%Y-%m-%d %H:%M:%S %z", tp, *tz);

  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
