Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>

extern "C" {
#include <pcap/pcap.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  PcapInterface pcap_interface;
  pcap_interface.startPacketPolling();
  return 0;
}
```
The code above has the following issues:

1. `PcapInterface` is not defined.
2. `startPacketPolling()` is not a member function of `PcapInterface`.

To fix these issues, we need to include the necessary header files and define the `PcapInterface` class.

The corrected code is:
```c++
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>

#include <pcap/pcap.h>

extern "C" {
class PcapInterface {
 public:
  void startPacketPolling();
};
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  PcapInterface pcap_interface;
  pcap_interface.startPacketPolling();
  return 0;
}
```
This code should compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
