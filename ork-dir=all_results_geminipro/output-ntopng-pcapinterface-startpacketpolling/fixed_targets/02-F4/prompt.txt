Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <pcap/pcap.h>

#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const char* device = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange(0, size)).c_str();
  const int snaplen = stream.ConsumeIntegralInRange<int>(0, 1000);
  const int promisc = stream.ConsumeBool() ? 1 : 0;
  const int to_ms = stream.ConsumeIntegralInRange<int>(0, 1000);
  const char* errbuf = nullptr;

  pcap_t* pcap = pcap_create(device, errbuf);
  if (pcap == nullptr) {
    return 0;
  }

  if (pcap_set_snaplen(pcap, snaplen) != 0) {
    pcap_close(pcap);
    return 0;
  }

  if (pcap_set_promisc(pcap, promisc) != 0) {
    pcap_close(pcap);
    return 0;
  }

  if (pcap_set_timeout(pcap, to_ms) != 0) {
    pcap_close(pcap);
    return 0;
  }

  PcapInterface pcap_interface(pcap);
  pcap_interface.startPacketPolling();
  pcap_close(pcap);
  return 0;
}

// Define the PcapInterface class
class PcapInterface {
 public:
  PcapInterface(pcap_t* pcap) : pcap_(pcap) {}

  void startPacketPolling() {
    pcap_loop(pcap_, 0, nullptr, nullptr);
  }

 private:
  pcap_t* pcap_;
};
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
