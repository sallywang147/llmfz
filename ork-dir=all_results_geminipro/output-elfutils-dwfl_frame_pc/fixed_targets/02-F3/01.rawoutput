```c++
#include <cstdint>
#include <cstdio>
#include <cstdlib>

extern "C" {
#include <libdwarf.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  Dwfl_Module* module = dwfl_module_create_from_memory(data, size, 0, 0, 0);
  if (module == nullptr) {
    return 0;
  }

  Dwfl_Frame* frame = dwfl_frame_create();
  if (frame == nullptr) {
    dwfl_module_destroy(module);
    return 0;
  }

  FuzzedDataProvider provider(data, size);
  while (provider.remaining_bytes() > 0) {
    size_t pc = provider.ConsumeIntegral<size_t>();
    char isactivation = provider.ConsumeBool();
    bool ret = dwfl_frame_pc(frame, &pc, &isactivation);
    if (!ret) {
      break;
    }
  }

  dwfl_frame_destroy(frame);
  dwfl_module_destroy(module);

  return 0;
}
```