Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <openssl/evp.h>
#include <openssl/hmac.h>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  if (!size)
    return 0;

  FuzzedDataProvider stream(data, size);

  std::vector<uint8_t> password = stream.ConsumeBytes<uint8_t>(
      stream.ConsumeIntegralInRange(0, 128));
  std::vector<uint8_t> salt = stream.ConsumeBytes<uint8_t>(
      stream.ConsumeIntegralInRange(0, 128));
  size_t iterations = stream.ConsumeIntegral<size_t>();
  size_t output_length = stream.ConsumeIntegral<size_t>();

  std::vector<uint8_t> result(output_length);

  EVP_MD_CTX *inner_ctx = EVP_MD_CTX_create();
  EVP_MD_CTX *outer_ctx = EVP_MD_CTX_create();

  EVP_DigestInit(inner_ctx, EVP_md5());
  EVP_DigestInit(outer_ctx, EVP_md5());

  // Call the missing function
  MD5_pbkdf2_hmac_assist(inner_ctx, outer_ctx, (char *)password.data(),
                         (char *)result.data(), iterations);

  EVP_MD_CTX_destroy(inner_ctx);
  EVP_MD_CTX_destroy(outer_ctx);

  return 0;
}
```

The fixed code calls the missing function `MD5_pbkdf2_hmac_assist` inside the `LLVMFuzzerTestOneInput` function, resolving the build error.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
