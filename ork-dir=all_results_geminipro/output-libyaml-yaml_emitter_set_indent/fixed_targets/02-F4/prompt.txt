Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "yaml.h"

extern "C" {
#include "yaml.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  yaml_emitter_t emitter;
  if (!yaml_emitter_initialize(&emitter)) {
    return 0;
  }

  const int indent = stream.ConsumeIntegral<int>();
  yaml_emitter_set_indent(&emitter, indent);

  yaml_emitter_delete(&emitter);
  return 0;
}
```

The original code has the following issues:

1. The `yaml.h` header is included twice, once with `#include "yaml.h"` and once with `#include <yaml.h>`. This is not necessary and can lead to errors.
2. The `yaml_emitter_delete` function is not declared in the `yaml.h` header. This is because the `yaml.h` header is a C header, and `yaml_emitter_delete` is a C++ function. To use a C++ function in a C program, it must be declared as `extern "C"`.

To fix these issues, the code has been modified as follows:

1. The `#include <yaml.h>` line has been removed.
2. The `yaml_emitter_delete` function has been declared as `extern "C"`.

With these changes, the code should compile and run correctly.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
