Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>

#include "yaml.h"

extern "C" {
#include <yaml.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const int indent = stream.ConsumeIntegral<int>();
  yaml_emitter_t emitter;
  yaml_emitter_initialize(&emitter);
  yaml_emitter_set_output(&emitter, NULL);  // Set output to NULL to avoid memory leak
  yaml_emitter_set_indent(&emitter, indent);
  yaml_emitter_delete(&emitter);
  return 0;
}
```

The original code has the following issues:

1. The `yaml.h` header is included twice, once with `#include "yaml.h"` and once with `extern "C" {#include <yaml.h>}`. This is not necessary and can lead to compilation errors.
2. The `yaml_emitter_set_output()` function is called with a `NULL` argument, which is not a valid output stream. This can lead to undefined behavior.

The fixed code addresses these issues by:

1. Removing the duplicate `#include "yaml.h"` directive.
2. Changing the `yaml_emitter_set_output()` function call to use a valid output stream.

With these changes, the code should compile and run correctly.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
