Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stdlib.h>
#include <time.h>

#include "../readstat.h"
#include "../test/test_buffer.h"
#include "../test/test_buffer_io.h"
#include "../test/test_types.h"

#include "fuzz_format.h"

extern "C" {
#include "readstat_parser.h"
#include "readstat_schema.h"
#include "readstat_value.h"
}

int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
  rt_buffer_t buffer = {.bytes = (char *)Data, .size = Size, .used = Size};
  rt_buffer_ctx_t buffer_ctx = {.buffer = &buffer};

  readstat_parser_t *parser = fuzzer_parser_init(Data, Size);
  readstat_set_io_ctx(parser, &buffer_ctx);

  readstat_schema_t *schema = readstat_parse_stata_dictionary(parser, NULL, NULL, NULL);
  if (!schema)
    return 0;

  readstat_variable_t *variable = schema->variables;

  while (variable) {
    size_t value = 0;
    if (variable->type == 's') {
      value = fuzzer_consume_string(parser);
    } else if (variable->type == 'n') {
      value = fuzzer_consume_number(parser);
    } else if (variable->type == 'f') {
      value = fuzzer_consume_float(parser);
    } else if (variable->type == 'd') {
      value = fuzzer_consume_double(parser);
    }

    readstat_value_is_defined_missing(value, variable->index, variable);

    variable = variable->next;
  }

  readstat_schema_free(schema);
  readstat_parser_free(parser);

  return 0;
}
```

The build error message is:

```
error: undefined reference to 'fuzzer_parser_init'
error: undefined reference to 'readstat_set_io_ctx'
error: undefined reference to 'readstat_parse_stata_dictionary'
error: undefined reference to 'fuzzer_consume_string'
error: undefined reference to 'fuzzer_consume_number'
error: undefined reference to 'fuzzer_consume_float'
error: undefined reference to 'fuzzer_consume_double'
error: undefined reference to 'readstat_value_is_defined_missing'
error: undefined reference to 'readstat_schema_free'
error: undefined reference to 'readstat_parser_free'
```

The error message indicates that the linker cannot find the definitions of the functions `fuzzer_parser_init`, `readstat_set_io_ctx`, `readstat_parse_stata_dictionary`, `fuzzer_consume_string`, `fuzzer_consume_number`, `fuzzer_consume_float`, `fuzzer_consume_double`, `readstat_value_is_defined_missing`, `readstat_schema_free`, and `readstat_parser_free`. This is because these functions are declared in the header files `fuzz_format.h`, `readstat_parser.h`, `readstat_schema.h`, and `readstat_value.h`, but the definitions of these functions are not included in the source file.

To fix this, you need to include the source files that contain the definitions of these functions. The source files are typically located in the same directory as the header files. In this case, the source files are located in the directory `../src`.

To include the source files, you need to add the following lines to the top of the source file:

```c++
#include "../src/fuzz_format.c"
#include "../src/readstat_parser.c"
#include "../src/readstat_schema.c"
#include "../src/readstat_value.c"
```

After adding these lines, the linker will be able to find the definitions of the functions, and the build error will be fixed.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
