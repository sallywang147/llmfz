Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include "../src/nokogiri_gumbo.h"
#include <stdint.h>

extern "C" {
#include <stdlib.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  if (size < 10) {
    return 0;
  }

  GumboInternalError error;
  error.type = GUMBO_ERR_SYNTAX;
  error.original_text = (char *)data;
  error.original_text_length = size;
  error.position = size / 2;
  error.context = NULL;
  error.context_length = 0;

  char *output = NULL;
  size_t output_length = gumbo_caret_diagnostic_to_string(&error, (char *)data, size, &output);
  if (output_length == 0) {
    return 0;
  }

  free(output);

  return 0;
}
```

The original code has the following issues:

1. The header file `nokogiri_gumbo.h` is not wrapped with `extern "C" {}`. This causes the linker to fail to find the definition of the function `gumbo_caret_diagnostic_to_string`.
2. The function `gumbo_caret_diagnostic_to_string` is declared as returning a `size_t`, but the definition in `nokogiri_gumbo.h` returns a `GumboStringPiece`. This causes the compiler to generate an error.

The fixed code wraps the header file `nokogiri_gumbo.h` with `extern "C" {}` and changes the return type of the function `gumbo_caret_diagnostic_to_string` to `size_t`.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
