Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

#include "unicode/casemap.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  static bool initialized = false;
  if (!initialized) {
    icu::Locale::setDefault(icu::Locale::getUS());
    initialized = true;
  }

  FuzzedDataProvider provider(data, size);
  icu::CaseMap to_lower;
  std::vector<short> input;
  std::vector<short> output;
  icu::Edits edits;
  int32_t error_code = 0;

  // Generate the input string.
  size_t input_length = provider.ConsumeIntegralInRange<size_t>(0, 1024);
  for (size_t i = 0; i < input_length; ++i) {
    input.push_back(provider.ConsumeIntegral<short>());
  }

  // Generate the output buffer.
  size_t output_capacity = provider.ConsumeIntegralInRange<size_t>(0, 1024);
  output.resize(output_capacity);

  // Generate the locale.
  size_t locale_length = provider.ConsumeIntegralInRange<size_t>(0, 10);
  std::string locale;
  for (size_t i = 0; i < locale_length; ++i) {
    locale += static_cast<char>(provider.ConsumeIntegral<uint8_t>());
  }

  // Generate the options.
  int32_t options = provider.ConsumeIntegral<int32_t>();

  // Call the function to fuzz.
  to_lower.toLower(locale.c_str(), options, input.data(), input.size(),
                   output.data(), output.size(), &edits, &error_code);

  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
