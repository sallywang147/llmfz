Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstring>
#include <string>

extern "C" {
#include "libusb/libusb.h"
#include "libusb/libusbi.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider stream(data, size);
  libusb_context *ctx = NULL;
  libusb_device_handle *dev_handle = NULL;
  char desc_index = stream.ConsumeIntegral<char>();
  int length = stream.ConsumeIntegralInRange<int>(1, 1024);
  std::string input = stream.ConsumeRandomLengthString();
  char *d = new char[length + 1];
  memset(d, 0, length + 1);
  strcpy(d, input.c_str());

  int ret = libusb_init(&ctx);
  if (ret < 0) {
    return ret;
  }

  ret = libusb_get_device_list(ctx, &dev_handle);
  if (ret < 0) {
    return ret;
  }

  ret = libusb_get_string_descriptor_ascii(dev_handle, desc_index, (unsigned char *)d, length);
  if (ret < 0) {
    return ret;
  }

  libusb_free_device_list(dev_handle, 1);
  libusb_exit(ctx);

  delete[] d;

  return 0;
}
```
The fixed code:

1. Added `#include <cstring>` to include the `memset` and `strcpy` functions.
2. Changed the type of `d` to `char *` and allocated memory for it using `new`.
3. Used `memset` to initialize the memory allocated for `d` to 0.
4. Used `strcpy` to copy the string from `input` to `d`.
5. Changed the type of the third argument of `libusb_get_string_descriptor_ascii` to `unsigned char *` to match the function signature.

These changes fix the build issues and allow the code to compile and run correctly.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
