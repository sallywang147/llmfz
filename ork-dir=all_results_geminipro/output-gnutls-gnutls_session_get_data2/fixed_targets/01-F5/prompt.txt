Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>

extern "C" {
#include <gnutls/gnutls.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const size_t session_size = stream.ConsumeIntegralInRange<size_t>(0, 1024);
  const size_t datum_size = stream.ConsumeIntegralInRange<size_t>(0, 1024);
  struct gnutls_session_int* session =
      static_cast<gnutls_session_int*>(std::malloc(session_size));
  memset(session, 0, session_size);
  struct gnutls_datum_t datum;
  memset(&datum, 0, sizeof(datum));
  datum.data = std::malloc(datum_size);
  memset(datum.data, 0, datum_size);
  datum.size = datum_size;
  int ret = gnutls_session_get_data2(session, &datum);
  gnutls_deinit(session);  // Properly clean up the gnutls session
  std::free(session);
  std::free(datum.data);
  return ret;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
