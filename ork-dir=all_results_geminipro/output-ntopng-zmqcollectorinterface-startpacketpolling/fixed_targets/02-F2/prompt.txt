Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>

#include "ZMQCollectorInterface.h"

extern "C" {
#include "llvm/Support/CommandLine.h"
#include "llvm/Support/raw_ostream.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  ZMQCollectorInterface* interface = new ZMQCollectorInterface();
  interface->startPacketPolling(interface);
  delete interface;
  return 0;
}
```

In this case, the build error is:

```
error: undefined reference to 'llvm::cl::opt<std::string>'
```

This error is caused by the use of the LLVM command-line library without properly including the necessary headers. To fix this, we need to include the `llvm/Support/CommandLine.h` header and wrap it with `extern "C" {}` to ensure that the C++ compiler generates compatible symbols for linking.

Additionally, we also include the `llvm/Support/raw_ostream.h` header to enable the use of the `llvm::outs()` function for printing messages.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
