Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <vector>

namespace fuzzing {
namespace datasource {

class Datasource {
 public:
  void get(std::vector* this_ptr, Datasource* min, size_t max, size_t id,
           size_t) {
    std::vector<uint8_t>& this_vec = *this_ptr;
    this_vec.clear();
    this_vec.reserve(max);
    for (size_t i = 0; i < max; i++) {
      this_vec.push_back(static_cast<uint8_t>(id));
    }
  }
};

}  // namespace datasource
}  // namespace fuzzing

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  size_t max_size = stream.ConsumeIntegralInRange<size_t>(1, 10000);
  size_t id = stream.ConsumeIntegralInRange<size_t>(0, 10000);
  std::vector<uint8_t> vec;
  fuzzing::datasource::Datasource src;
  src.get(&vec, nullptr, max_size, id, 0);
  return 0;
}
```
This code should compile and run successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
