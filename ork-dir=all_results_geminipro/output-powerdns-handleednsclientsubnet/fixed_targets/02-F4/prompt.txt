Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include "dns.hh"
#include "dnsheader.hh"
#include "edns.hh"
#include "fuzzer.hh"

extern "C" {
#include <vector>
#include <string>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  if (size < sizeof(dnsheader)) {
    return 0;
  }
  std::vector<uint8_t> input(data, data + size);
  std::vector<uint8_t> output;
  bool rcode;
  std::string error;
  handleEDNSClientSubnet(&output, input.size(), sizeof(dnsheader),
                         input.data(), input.data() + sizeof(dnsheader), false,
                         &error);
  return 0;
}

extern "C" int handleEDNSClientSubnet(std::vector<uint8_t> *output,
                                       size_t request_size, size_t header_size,
                                       const uint8_t *request,
                                       const uint8_t *payload, bool add_edns,
                                       std::string *error) {
  // Implement the function body here
  return 0;
}
```

The issue in the original code is that the `handleEDNSClientSubnet` function is declared as `extern "C"`, but its definition is not wrapped in `extern "C" {}`. This causes the linker to not be able to find the definition of the function when linking the object files.

To fix this, we need to wrap the definition of the `handleEDNSClientSubnet` function in `extern "C" {}`. This tells the linker to look for the definition of the function in the C++ object files, even though it is declared as `extern "C"`.

Here is the corrected code:

```c++
#include "dns.hh"
#include "dnsheader.hh"
#include "edns.hh"
#include "fuzzer.hh"

extern "C" {
#include <vector>
#include <string>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  if (size < sizeof(dnsheader)) {
    return 0;
  }
  std::vector<uint8_t> input(data, data + size);
  std::vector<uint8_t> output;
  bool rcode;
  std::string error;
  handleEDNSClientSubnet(&output, input.size(), sizeof(dnsheader),
                         input.data(), input.data() + sizeof(dnsheader), false,
                         &error);
  return 0;
}

extern "C" {
int handleEDNSClientSubnet(std::vector<uint8_t> *output,
                                       size_t request_size, size_t header_size,
                                       const uint8_t *request,
                                       const uint8_t *payload, bool add_edns,
                                       std::string *error) {
  // Implement the function body here
  return 0;
}
}
```

With this change, the code should build successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
