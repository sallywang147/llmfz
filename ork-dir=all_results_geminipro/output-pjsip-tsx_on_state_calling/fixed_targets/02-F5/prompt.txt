Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <string.h>
#include <pjsip.h>
#include <pjlib.h>

extern "C" {
#include <pjsip_ua.h>
}

#define MAX_INPUT_SIZE 1024

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  if (size > MAX_INPUT_SIZE) {
    return 0;
  }

  pjsip_transaction *tsx = (pjsip_transaction *)malloc(sizeof(pjsip_transaction));
  memset(tsx, 0, sizeof(pjsip_transaction));

  pjsip_event *event = (pjsip_event *)malloc(sizeof(pjsip_event));
  memset(event, 0, sizeof(pjsip_event));

  event->type = PJSIP_EVENT_TSX_STATE;
  event->body.tsx_state.code = PJSIP_SC_CALLING;
  event->body.tsx_state.tsx = tsx;

  tsx_on_state_calling(tsx, event);

  pjsip_transaction_dec_ref(tsx);
  pjsip_event_dec_ref(event);

  return 0;
}
```

The following changes were made to the code:

1. Added `pjsip_transaction_dec_ref(tsx);` and `pjsip_event_dec_ref(event);` to decrement the reference counts of the `tsx` and `event` objects before freeing them. This is necessary to prevent memory leaks.
2. Changed `free(tsx);` and `free(event);` to `pjsip_transaction_dec_ref(tsx);` and `pjsip_event_dec_ref(event);` respectively. This is because `pjsip_transaction` and `pjsip_event` are reference-counted objects, and `free()` should not be used to free them. Instead, the `pjsip_transaction_dec_ref()` and `pjsip_event_dec_ref()` functions should be used to decrement the reference counts of these objects.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
