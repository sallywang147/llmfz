Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstdint>
#include <string>

#include "simdutf/internal/detect_best_supported_implementation_on_first_use.h"

extern "C" {
#include "simdutf/public.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  simdutf::public::detect_best_supported_implementation_on_first_use
      detect_best_supported_implementation_on_first_use;
  simdutf::public::unsupported_implementation unsupported_implementation;

  detect_best_supported_implementation_on_first_use.detect_best_supported_implementation();
  detect_best_supported_implementation_on_first_use
      .required_instruction_sets(&unsupported_implementation);
  return 0;
}
```

The original code has the following issues:

- The `simdutf` library is not properly included. To fix this, the `#include` directive for `simdutf/public.h` should be wrapped with `extern "C" {}`.

The fixed code includes the necessary header files and wraps the `#include` directive for `simdutf/public.h` with `extern "C" {}` to ensure proper linking.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
