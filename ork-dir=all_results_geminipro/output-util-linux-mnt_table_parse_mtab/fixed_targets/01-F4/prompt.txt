Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include <mntent.h>
#include <mnttab.h>

extern "C" {
#include <mntent.h>
#include <mnttab.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const std::string filename = stream.ConsumeRemainingBytesAsString();
  struct libmnt_table* table = mnt_new_table();
  int ret = mnt_table_parse_mtab(table, filename.c_str());
  mnt_free_table(table);
  return ret;
}
```

The error message is:

```
error: undefined reference to `mnt_table_parse_mtab'
```

This means that the function `mnt_table_parse_mtab` is not defined in the program. To fix this, we need to include the header file that defines this function. In this case, the header file is `<mntent.h>`.

We also need to wrap the `#include` directive for `<mntent.h>` with `extern "C" {}`. This is because the function `mnt_table_parse_mtab` is a C function, and we are compiling the program with a C++ compiler.

The corrected code is shown above.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
