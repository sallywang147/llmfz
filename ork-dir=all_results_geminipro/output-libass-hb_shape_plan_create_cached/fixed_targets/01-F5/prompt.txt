Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>
#include <vector>

extern "C" {
#include <hb.h>
#include <hb-ot.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const std::string font_data = stream.ConsumeRemainingBytesAsString();
  hb_blob_t* font_blob = hb_blob_create((const char*)font_data.c_str(),
                                        font_data.size(),
                                        HB_MEMORY_MODE_READONLY,
                                        nullptr, nullptr);
  if (font_blob == nullptr) {
    return 0;
  }
  hb_face_t* face = hb_face_create(font_blob, 0);
  if (face == nullptr) {
    hb_blob_destroy(font_blob);
    return 0;
  }
  hb_shape_plan_t* shape_plan = hb_shape_plan_create_cached(face, nullptr, nullptr, 0, nullptr);
  if (shape_plan == nullptr) {
    hb_face_destroy(face);
    hb_blob_destroy(font_blob);
    return 0;
  }
  hb_shape_plan_destroy(shape_plan);
  hb_face_destroy(face);
  hb_blob_destroy(font_blob);
  return 0;
}
```
In this corrected code, the `hb.h` and `hb-ot.h` headers are wrapped with `extern "C" {}`. This ensures that the C++ compiler will not mangle the function names, which is necessary for the linker to find the correct symbols.

With these changes, the code should compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
