#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>
#include <vector>

#include <hb.h>
#include <hb-ot.h>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const std::string font_data = stream.ConsumeRemainingBytesAsString();
  hb_blob_t* font_blob = hb_blob_create((const char*)font_data.c_str(),
                                        font_data.size(),
                                        HB_MEMORY_MODE_READONLY,
                                        nullptr, nullptr);
  if (font_blob == nullptr) {
    return 0;
  }
  hb_face_t* face = hb_face_create(font_blob, 0);
  if (face == nullptr) {
    hb_blob_destroy(font_blob);
    return 0;
  }
  hb_shape_plan_t* shape_plan = hb_shape_plan_create_cached(face, nullptr, nullptr, 0, nullptr);
  if (shape_plan == nullptr) {
    hb_face_destroy(face);
    hb_blob_destroy(font_blob);
    return 0;
  }
  hb_shape_plan_destroy(shape_plan);
  hb_face_destroy(face);
  hb_blob_destroy(font_blob);
  return 0;
}
</solution>