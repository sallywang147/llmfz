Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <vector>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);
  int argc = provider.ConsumeIntegral<int>();
  if (argc < 0) {
    return 0;
  }
  std::vector<std::string> argv;
  for (int i = 0; i < argc; i++) {
    size_t arg_size = provider.ConsumeIntegralInRange<size_t>(0, size);
    std::string arg = provider.ConsumeRandomLengthString(arg_size);
    argv.push_back(arg);
  }
  int ret = main_loop(argc, argv.data());
  return ret;
}

int main_loop(int argc, char** argv) {
  // Your code here
  return 0;
}
```

The following changes were made to the code:

1. The `std::string` class is used to store the strings that are generated by the `FuzzedDataProvider`. This ensures that the strings are copied correctly and that they are thread-safe.
2. The `strdup()` function is no longer used.
3. The `main_loop` function is declared as `int main_loop(int argc, char* argv[])`.

With these changes, the code should compile and run correctly.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
