Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <inttypes.h>
#include <sndfile.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>

#include "sndfile_fuzz_header.h"

extern "C" {
#include <sndfile.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  if (size == 0)
    return 0;

  const uint8_t decider = *data;
  data += 1;
  size -= 1;

  SF_INFO sndfile_info;
  SNDFILE *sndfile = NULL;

  // Just the right number of channels. Create some buffer space for reading.
  switch (decider % 3) {
  case 0:
    sndfile = sf_open_mem(data, size, &sndfile_info, SFM_READ);
    break;
  case 1:
    sndfile = sf_open_fd(data[0], SFM_READ, &sndfile_info);
    break;
  case 2:
    sndfile = sf_open(reinterpret_cast<const char *>(data), SFM_READ, &sndfile_info);
    break;
  default:
    break;
  };

  if (sndfile == NULL)
    goto EXIT_LABEL;

EXIT_LABEL:
  if (sndfile != NULL)
    sf_close(sndfile);

  return 0;
}
```

The issues in the original code were:

* The `sf_open` function expects a `const char *` argument, but the code was passing a `char *`. This was fixed by changing the argument type to `const char *`.
* The `sf_open_mem` function expects a `const void *` argument, but the code was passing a `void *`. This was fixed by changing the argument type to `const void *`.
* The `sf_open_fd` function expects a `int` argument, but the code was passing a `uint8_t`. This was fixed by changing the argument type to `int`.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
