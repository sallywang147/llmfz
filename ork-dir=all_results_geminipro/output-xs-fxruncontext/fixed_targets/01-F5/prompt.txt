Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>

extern "C" {
#include "fx.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);
  const size_t pool_size = provider.ConsumeIntegralInRange<size_t>(
      0, 1 << 20);
  struct sxPool* pool = sxPoolCreate(pool_size);
  if (pool == nullptr) {
    return 0;
  }

  const size_t context_size = provider.ConsumeIntegralInRange<size_t>(
      0, 1 << 20);
  struct sxContext* context = sxContextCreate(pool, context_size);
  if (context == nullptr) {
    sxPoolDestroy(pool);
    return 0;
  }

  // Fix: Call fxRunContext with the correct argument order.
  fxRunContext(context, pool);

  sxContextDestroy(context);
  sxPoolDestroy(pool);

  return 0;
}
```
The original code had an issue in the call to `fxRunContext`. The arguments were passed in the wrong order. The correct order is `fxRunContext(context, pool)`. This is because `fxRunContext` expects the context to be the first argument and the pool to be the second argument.

The corrected code now passes the arguments in the correct order and should compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
