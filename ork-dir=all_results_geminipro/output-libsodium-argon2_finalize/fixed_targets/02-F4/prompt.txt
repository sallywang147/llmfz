Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <vector>

#include "argon2.h"

extern "C" {
#include "argon2.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  argon2_context context;
  argon2_instance_t instance;
  argon2_context_init(&context);
  argon2_instance_init(&instance);
  instance.output = (uint8_t*)malloc(stream.ConsumeIntegralInRange<size_t>(1, 1024));
  instance.output_len = stream.ConsumeIntegralInRange<size_t>(1, 1024);
  instance.salt = (uint8_t*)malloc(stream.ConsumeIntegralInRange<size_t>(1, 1024));
  instance.salt_len = stream.ConsumeIntegralInRange<size_t>(1, 1024);
  instance.memory_cost = stream.ConsumeIntegralInRange<uint32_t>(1, 1024);
  instance.parallelism = stream.ConsumeIntegralInRange<uint32_t>(1, 1024);
  instance.time_cost = stream.ConsumeIntegralInRange<uint32_t>(1, 1024);
  instance.type = stream.ConsumeIntegralInRange<argon2_type>(Argon2_d, Argon2_id);
  instance.version = stream.ConsumeIntegralInRange<uint32_t>(0x10, 0x19);
  instance.lanes = stream.ConsumeIntegralInRange<uint32_t>(1, 1024);
  instance.threads = stream.ConsumeIntegralInRange<uint32_t>(1, 1024);

  argon2_verify(&instance, stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange<size_t>(1, 1024)).data(), stream.ConsumeIntegralInRange<size_t>(1, 1024), &context);
  argon2_finalize(&context, &instance);
  argon2_context_free(&context);
  argon2_instance_free(&instance);
  free(instance.output);
  free(instance.salt);

  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
