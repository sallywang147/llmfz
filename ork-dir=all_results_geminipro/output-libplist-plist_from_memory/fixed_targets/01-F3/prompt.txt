Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <plist/plist.h>
#include <stdio.h>

extern "C" {
#include <fuzzer/FuzzedDataProvider.h>
}

extern "C" int LLVMFuzzerTestOneInput(const unsigned char *data, size_t size) {
  FuzzedDataProvider data_provider(data, size);
  plist_t root_node = NULL;
  int plist_format;
  plist_from_memory(reinterpret_cast<const char *>(data_provider.ConsumeBytes<char>(size)), size, &root_node,
                    &plist_format);
  plist_free(root_node);

  return 0;
}
```

Changes made:

1. Included the `fuzzer/FuzzedDataProvider.h` header to use the `FuzzedDataProvider` class for consuming the input data.

2. Wrapped the `#include <fuzzer/FuzzedDataProvider.h>` directive with `extern "C" {}` to ensure compatibility with the C++ compiler.

3. Modified the `plist_from_memory` function call to use the `ConsumeBytes` method of the `FuzzedDataProvider` to consume the input data.

4. Changed the type of the `data` parameter in the `LLVMFuzzerTestOneInput` function to `const unsigned char *` to match the expected type for fuzzing.

5. Added the `extern "C"` keyword before the `int LLVMFuzzerTestOneInput` function declaration to ensure that it is exported as a C function.

With these changes, the code should compile and run correctly.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
