Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <string>

extern "C" {
#include "dns.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const int zt_size = stream.ConsumeIntegral<int>();
  struct dns_zt* zt =
      static_cast<struct dns_zt*>(std::malloc(sizeof(struct dns_zt) * zt_size));
  if (zt == nullptr) {
    return 0;
  }
  const bool newonly = stream.ConsumeBool();
  const size_t arg_size = stream.ConsumeIntegralInRange<size_t>(0, 1024);
  char* arg = static_cast<char*>(std::malloc(arg_size));
  if (arg == nullptr) {
    std::free(zt);
    return 0;
  }
  stream.ConsumeBytes<char>(arg, arg_size);
  // Define the function `dns_zt_asyncload` here.
  int dns_zt_asyncload(struct dns_zt* zt, int newonly,
                       void (*callback)(void*, int, int, void*), void* userdata,
                       const char* arg);
  dns_zt_asyncload(zt, newonly, nullptr, arg);
  std::free(zt);
  std::free(arg);
  return 0;
}
```

In this corrected code:

- The header file `dns.h` is included with `extern "C" {}` to ensure that the function `dns_zt_asyncload` is properly linked.
- The function `dns_zt_asyncload` is defined within the `extern "C" {}` block.
- The definition of `dns_zt_asyncload` matches the declaration in the `dns.h` header file.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
