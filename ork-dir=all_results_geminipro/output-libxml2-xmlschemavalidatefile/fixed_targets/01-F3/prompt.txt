Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <libxml/parser.h>
#include <libxml/relaxng.h>
#include <libxml/xmlschemastypes.h>
#include <libxml/xmlschemas.h>
#include <libxml/xmlschemavalid.h>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  xmlSchemaValidCtxtPtr ctxt;
  xmlSchemaParserCtxtPtr pctxt;
  xmlSchemaPtr schema;
  xmlDocPtr doc;
  int ret;

  ctxt = xmlSchemaNewValidCtxt();
  if (ctxt == NULL) {
    return 0;
  }

  pctxt = xmlSchemaNewParserCtxt(ctxt);
  if (pctxt == NULL) {
    xmlSchemaFreeValidCtxt(ctxt);
    return 0;
  }

  FuzzedDataProvider provider(data, size);
  const size_t schema_size = provider.ConsumeIntegralInRange<size_t>(0, size);
  auto schema_data = provider.ConsumeBytes<char>(schema_size);
  schema = xmlSchemaParseMem(schema_data.data(), schema_data.size(), pctxt);
  xmlSchemaFreeParserCtxt(pctxt);
  if (schema == NULL) {
    xmlSchemaFreeValidCtxt(ctxt);
    return 0;
  }

  const size_t doc_size = provider.ConsumeIntegralInRange<size_t>(0, size);
  auto doc_data = provider.ConsumeBytes<char>(doc_size);
  doc = xmlParseMemory(doc_data.data(), doc_data.size());
  if (doc == NULL) {
    xmlSchemaFree(schema);
    xmlSchemaFreeValidCtxt(ctxt);
    return 0;
  }

  ret = xmlSchemaValidateDoc(ctxt, doc);
  if (ret != 0) {
    fprintf(stderr, "Validation failed.\n");
  }

  xmlFreeDoc(doc);
  xmlSchemaFree(schema);
  xmlSchemaFreeValidCtxt(ctxt);
  return 0;
}
</code>

The code has the following build issues:
<error>
The target function `int xmlSchemaValidateFile(struct _xmlSchemaValidCtxt * ctxt, char * filename, int options)` was not called by the fuzz target `LLVMFuzzerTestOneInput`.YOU MUST CALL FUNCTION `int xmlSchemaValidateFile(struct _xmlSchemaValidCtxt * ctxt, char * filename, int options)` INSIDE FUNCTION `LLVMFuzzerTestOneInput`.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
