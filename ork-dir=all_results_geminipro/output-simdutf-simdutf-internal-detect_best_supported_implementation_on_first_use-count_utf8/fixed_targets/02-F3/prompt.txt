Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

extern "C" {
#include "simdutf/public/simdutf.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const std::string text = stream.ConsumeRemainingBytesAsString();
  simdutf::detect_best_supported_implementation_on_first_use::count_utf8(
      nullptr, const_cast<char*>(text.c_str()), text.size());
  return 0;
}
```

The original code had the following issues:

* The `simdutf/utf8.h` header was included without being wrapped in `extern "C" {}`. This caused a linker error because the C++ compiler generated name-mangled symbols for the functions and variables declared in that header, while the C compiler expected them to have unmangled names.
* The `simdutf::internal::detect_best_supported_implementation_on_first_use::count_utf8` function was not declared as `extern "C"`, which also caused a linker error because the C compiler expected it to have an unmangled name.

The fixed code wraps the `simdutf/utf8.h` header in `extern "C" {}` and declares the `simdutf::internal::detect_best_supported_implementation_on_first_use::count_utf8` function as `extern "C"`, which allows the C compiler to link to it successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
