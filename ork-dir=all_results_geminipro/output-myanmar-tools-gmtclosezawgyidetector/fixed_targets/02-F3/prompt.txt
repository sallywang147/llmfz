Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <cstddef>

extern "C" {
#include "public/myanmartools.h"
}

using google_myanmar_tools::ZawgyiDetector;

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *rawData, size_t length) {
  auto data = reinterpret_cast<const char *>(rawData);
  struct GMTZawgyiDetector *detector = GMTNewZawgyiDetector();
  GMTDetectZawgyi(detector, data, length);
  GMTDeleteZawgyiDetector(detector);  // Fix: Use GMTDeleteZawgyiDetector instead of GMTCloseZawgyiDetector
  return 0; // Non-zero return values are reserved for future use.
}
```
In the original code, `GMTCloseZawgyiDetector` was used to close the Zawgyi detector, but it should be `GMTDeleteZawgyiDetector` instead. This is because `GMTDeleteZawgyiDetector` is the correct function to delete the Zawgyi detector, while `GMTCloseZawgyiDetector` is used to close the Zawgyi converter.

The corrected code uses `GMTDeleteZawgyiDetector` to delete the Zawgyi detector, which fixes the build error and ensures that the Zawgyi detector is properly cleaned up after use.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
