<system>
You are a security testing engineer who wants to write a C++ program to execute all lines in a given function by defining and initializing its parameters in a suitable way before fuzzing the function through <code>LLVMFuzzerTestOneInput</code>.

Carefully study the function signature and its parameters, then follow the example problems and solutions to answer the final problem. YOU MUST call the function to fuzz in the solution.

Try as many variations of these inputs as possible. Do not use a random number generator such as <code>rand()</code>.

Use <code>FuzzedDataProvider</code> to generate these inputs. You MUST declare it in <code>LLVMFuzzerTestOneInput</code>, like this:
<code>
FuzzedDataProvider stream(data, size);
</code>

Include <code>#include <fuzzer/FuzzedDataProvider.h></code> in the solution.

This code shows example of using it:
<code>
// Extract integral values
int int_arg = stream.ConsumeIntegral<int>();
int int_arg_in_range = stream.ConsumeIntegralInRange(-100, 100);
bool bool_arg = stream.ConsumeBool();

// Extract floating point values
float probability = stream.ConsumeProbability();
double double_arg = stream.ConsumeFloatingPoint<double>();
double double_arg_in_range = stream.ConsumeFloatingPointInRange(-1.0, 1.0);

// Extract value from predefined set, such as enum or array
EnumType enum = stream.ConsumeEnum<EnumType>();
int valid_values = stream.PickValueInArray({FLAG_1, FLAG_2, FLAG_3});

// Extract an array of bytes as a vector. You MUST call <code>.data()</code> to use result as pointer.
std::vector<uint8_t> bytes = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange(0, max_size));
void *data_ptr = bytes.data();
std::vector<uint8_t> bytes2 = stream.ConsumeBytes<uint8_t>(requested_size);
void *data2_ptr = bytes2.data();

// Extract a string. You MUST use <code>.c_str()</code> to use result as pointer
std::string str = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange(0, max_size));
char *ptr = str.c_str();
std::string str2 = stream.ConsumeBytesAsString(requested_size);
char *ptr2 = str2.c_str();
std::string str3 = stream.ConsumeRandomLengthString();
char *ptr3 = str3.c_str();

// Extract to user defined object
struct_type_t obj;
size_t consumed = stream.ConsumeData(&obj, sizeof(obj));
</code>

There MUST be AT MOST ONE call to <code>ConsumeRemainingBytes</code> to consume remaining input!
<code>
FuzzedDataProvider stream(data, size);

std::vector<uint8_t> bytes3 = stream.ConsumeRemainingBytes();
void *data3_ptr = bytes3.data();
</code>

All variables used MUST be declared and initialized. Carefully make sure that the variable and argument types in your code match and compiles successfully. Add type casts to make types match.

Do not create new variables with the same names as existing variables.
WRONG:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  void* data = Foo();
}
</code>

EXTREMELY IMPORTANT: If you write code using <code>goto</code>, you MUST MUST also declare all variables BEFORE the <code>goto</code>. Never introduce new variables after the <code>goto</code>.
WRONG:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  int a = bar();
  if (!some_function()) goto EXIT;
  Foo b = target_function(data, size);
  int c = another_func();
EXIT:
  return 0;
}
</code>

CORRECT:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  int a = bar();
  Foo b;
  int c;

  if (!some_function()) goto EXIT;
  b = target_function(data, size);
  c = another_func()
EXIT:
  return 0;
}
</code>

If an example provided for the same library includes a unique header file, then it must be included in the solution as well.
</system>

<task>
Your goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:
<function header>
void run_test(char * data, size_t size, int intent_id, int input_format, int output_format, int flags)
</function header>
</task>

<solution>

#include "lcms2.h"
#include <stdint.h>

// An extended cmsDoTransform fuzzer. The idea is to include a range of
// input/output source formats.

void run_test(const uint8_t *data, size_t size, uint32_t intent, uint32_t flags, int dstVal) {
  if (size < 2) {
    return;
  }

  cmsHPROFILE srcProfile = cmsOpenProfileFromMem(data, size);
  if (!srcProfile)
    return;

  // Select dstProfile and dstFormat
  cmsHPROFILE dstProfile;
  uint32_t dstFormat;
  if (dstVal == 1) {
    dstProfile = cmsCreateLab4Profile(NULL);
    dstFormat = TYPE_Lab_8;
  } else if (dstVal == 2) {
    dstProfile = cmsCreateLab2Profile(NULL);
    dstFormat = TYPE_LabV2_8;
  } else if (dstVal == 3) {
    cmsToneCurve *gamma18;
    gamma18 = cmsBuildGamma(0, 1.8);
    dstProfile = cmsCreateGrayProfile(NULL, gamma18);
    cmsFreeToneCurve(gamma18);
    dstFormat = TYPE_GRAY_FLT | EXTRA_SH(1);
  } else if (dstVal == 4) {
    dstProfile = cmsCreateXYZProfile();
    dstFormat = TYPE_XYZ_16;
  } else if (dstVal == 5) {
    dstProfile = cmsCreateXYZProfile();
    dstFormat = TYPE_XYZ_DBL;
  } else if (dstVal == 6) {
    dstProfile = cmsCreateLab4Profile(NULL);
    dstFormat = TYPE_Lab_DBL;
  } else if (dstVal == 7) {
    dstProfile = cmsCreateLab4Profile(NULL);
    dstFormat = TYPE_Lab_DBL;
  } else if (dstVal == 8) {
    dstProfile = cmsCreate_OkLabProfile(NULL);
    dstFormat = (FLOAT_SH(1) | COLORSPACE_SH(PT_MCH3) | CHANNELS_SH(3) | BYTES_SH(0));
  } else if (dstVal == 9) {
    dstProfile = cmsCreateNULLProfile();
    dstFormat = 0;
  } else if (dstVal == 10) {
    dstProfile = cmsCreateBCHSWabstractProfile(17, 0, 1.2, 0, 3, 5000, 5000);
    dstFormat = TYPE_Lab_DBL;
  } else {
    dstProfile = cmsCreate_sRGBProfile();
    dstFormat = TYPE_RGB_8;
  }

  if (!dstProfile) {
    cmsCloseProfile(srcProfile);
    return;
  }

  // Extract srcFormat from the random src profile
  cmsColorSpaceSignature srcCS = cmsGetColorSpace(srcProfile);
  cmsUInt32Number nSrcComponents = cmsChannelsOf(srcCS);
  cmsUInt32Number srcFormat;
  if (srcCS == cmsSigLabData) {
    if (dstVal != 7) {
      srcFormat = COLORSPACE_SH(PT_Lab) | CHANNELS_SH(nSrcComponents) | BYTES_SH(0);
    } else {
      srcFormat = COLORSPACE_SH(PT_Lab) | CHANNELS_SH(nSrcComponents) | BYTES_SH(0) | FLOAT_SH(1);
    }
  } else {
    srcFormat = COLORSPACE_SH(PT_ANY) | CHANNELS_SH(nSrcComponents) | BYTES_SH(1);
  }

  // Create the transform
  cmsContext ctx = cmsCreateContext(NULL, NULL);
  cmsHTRANSFORM hTransform = cmsCreateTransformTHR(ctx, srcProfile, srcFormat, dstProfile, dstFormat, intent, flags);

  cmsCloseProfile(srcProfile);
  cmsCloseProfile(dstProfile);
  if (!hTransform)
    return;

  // Do transformation.
  // The output buffer type depends on the dstFormat
  // The input buffer type depends on the srcFormat.
  if (T_BYTES(srcFormat) == 0) { // 0 means double
    // Ensure output is large enough
    long long output[nSrcComponents * 4];
    double input[nSrcComponents];
    for (uint32_t i = 0; i < nSrcComponents; i++)
      input[i] = 0.5f;
    cmsDoTransform(hTransform, input, output, 1);
  } else {
    uint8_t input[nSrcComponents];
    for (uint32_t i = 0; i < nSrcComponents; i++)
      input[i] = 128;

    if (dstFormat == TYPE_XYZ_16) {
      cmsCIEXYZ output_XYZ = {0, 0, 0};
      cmsDoTransform(hTransform, input, &output_XYZ, 1);
    } else if (dstFormat == TYPE_XYZ_DBL) {
      cmsCIEXYZTRIPLE out[4];
      cmsDoTransform(hTransform, input, out, 1);
    } else if (dstFormat == TYPE_Lab_DBL || dstFormat == (FLOAT_SH(1) | COLORSPACE_SH(PT_MCH3) | CHANNELS_SH(3) | BYTES_SH(0))) {
      cmsCIELab Lab1;
      cmsDoTransform(hTransform, input, &Lab1, 1);
    } else {
      uint8_t output[4];
      cmsDoTransform(hTransform, input, output, 1);
    }
  }
  cmsDeleteTransform(hTransform);
}

int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  if (size < 12) {
    return 0;
  }

  uint32_t flags = *((const uint32_t *)data + 0);
  uint32_t intent = *((const uint32_t *)data + 1) % 16;
  int decider = *((int *)data + 2) % 11;
  data += 12;
  size -= 12;

  // Transform using various output formats.
  run_test(data, size, intent, flags, decider);

  return 0;
}

</solution>


<task>
Your goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:
<function header>
char * cmsCreateProofingTransform(char * InputProfile, int InputFormat, char * OutputProfile, int OutputFormat, char * ProofingProfile, int nIntent, int ProofingIntent, int dwFlags)
</function header>
</task>
You MUST call <code>
char * cmsCreateProofingTransform(char * InputProfile, int InputFormat, char * OutputProfile, int OutputFormat, char * ProofingProfile, int nIntent, int ProofingIntent, int dwFlags)
</code> in your solution!

<solution>
