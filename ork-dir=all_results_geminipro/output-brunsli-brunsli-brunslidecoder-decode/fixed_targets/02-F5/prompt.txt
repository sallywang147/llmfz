Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <brunsli/brunsli_decode.h>
#include <fuzzer/FuzzedDataProvider.h>

extern "C" {
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>  // for free()
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);
  size_t input_size = provider.ConsumeIntegralInRange<size_t>(0, size);
  size_t output_size = provider.ConsumeIntegralInRange<size_t>(0, size);
  size_t actual_output_size = 0;
  char* output_data = nullptr;
  brunsli::BrunsliDecoder decoder;
  int result = decoder.Decode(data, &input_size,
                             nullptr, &output_size,
                             &output_data);
  if (result != 0) return 0;
  result = decoder.Decode(nullptr, &actual_output_size,
                             nullptr, &output_size,
                             &output_data);
  free(output_data);  // Free the allocated memory to avoid memory leak
  return 0;
}
```

The fixed code includes the necessary header `<stdlib.h>` within the `extern "C" {}` block to ensure that the `free()` function is available to the C++ compiler. Additionally, it frees the allocated memory for `output_data` to avoid memory leak. This ensures that the code compiles and runs without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
