Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <brunsli/decode.h>
#include <brunsli/types.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>

extern "C" {
#include <fuzzer/FuzzedDataProvider.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider fuzzed_data(data, size);
  brunsli::BrunsliDecoder decoder;
  size_t in_size = fuzzed_data.remaining_bytes();
  const char *in = reinterpret_cast<const char *>(fuzzed_data.ConsumeRemainingBytes());
  size_t out_size = 0;
  char *out = nullptr;
  size_t decoded_size = 0;
  char *decoded = nullptr;
  int ret = decoder.Decode(&in_size, &in, &out_size, &out, &decoded_size, &decoded);
  free(out);
  free(decoded);
  return ret;
}
```

Changes made:

1. Included the `fuzzer/FuzzedDataProvider.h` header to use the `FuzzedDataProvider` class for generating test inputs.
2. Wrapped the `#include <fuzzer/FuzzedDataProvider.h>` directive with `extern "C" {}` to resolve the undefined reference error.
3. Used `FuzzedDataProvider` to generate the input data for the `BrunsliDecoder`.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
