Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "deflate.h"
#include "zopfli.h"

extern "C" {
#include <zopfli.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider stream(data, size);

  const std::string input = stream.ConsumeRemainingBytesAsString();
  const size_t instart = stream.ConsumeIntegralInRange<size_t>(0, input.size());
  const size_t inend = stream.ConsumeIntegralInRange<size_t>(instart, input.size());
  const size_t blocksize = stream.ConsumeIntegralInRange<size_t>(1, input.size());

  size_t *splitpoints = nullptr;
  size_t npoints = 0;
  ZopfliBlockSplitSimple(const_cast<char*>(input.data()), instart, inend, blocksize, &splitpoints, &npoints);

  if (splitpoints != nullptr) {
    free(splitpoints);
  }

  return 0;
}
```

The error message is:
```
error: undefined reference to 'ZopfliBlockSplitSimple'
```
This error means that the linker cannot find the definition of the function `ZopfliBlockSplitSimple`. To fix this, we need to make sure that the header file that declares this function is included in the compilation.

In this case, the header file that declares `ZopfliBlockSplitSimple` is `zopfli.h`. However, this header file is already included in the code, so the linker should be able to find the definition of the function.

One possible reason for this error is that the header file `zopfli.h` is not included in the correct place. The header file should be included before any other header files that use the functions declared in `zopfli.h`.

To fix this, we can move the `#include <zopfli.h>` line to the top of the file, before any other `#include` directives.

Here is the corrected code:
```c++
#include <zopfli.h>

#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "deflate.h"

extern "C" {
#include <zopfli.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider stream(data, size);

  const std::string input = stream.ConsumeRemainingBytesAsString();
  const size_t instart = stream.ConsumeIntegralInRange<size_t>(0, input.size());
  const size_t inend = stream.ConsumeIntegralInRange<size_t>(instart, input.size());
  const size_t blocksize = stream.ConsumeIntegralInRange<size_t>(1, input.size());

  size_t *splitpoints = nullptr;
  size_t npoints = 0;
  ZopfliBlockSplitSimple(const_cast<char*>(input.data()), instart, inend, blocksize, &splitpoints, &npoints);

  if (splitpoints != nullptr) {
    free(splitpoints);
  }

  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
