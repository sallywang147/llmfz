Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <assert.h>
#include <stdlib.h>
#include <string.h>

#include "private_settings.h"

extern "C" {
#include <stdbool.h>
#include <stdint.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  // Extract a string. You MUST use `c_str()` to use result as pointer
  std::string settings = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange(0, size));
  char *settings_ptr = settings.c_str();

  // Extract a boolean.
  bool merge = stream.ConsumeBool();

  // Consume the remaining bytes.
  std::vector<uint8_t> remaining_bytes = stream.ConsumeRemainingBytes();

  // Create a private_settings_t object.
  struct private_settings_t *this_ptr = new struct private_settings_t;
  assert(this_ptr != NULL);

  // Call the function to fuzz.
  bool result = load_string(this_ptr, settings_ptr, merge);

  // Free the private_settings_t object.
  delete this_ptr;

  return 0;
}
```

The issue in the original code was that the `stdint.h` header was not included, which caused the build error "undefined reference to `ConsumeIntegralInRange`". To fix this, `stdint.h` has been added to the list of included headers.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
