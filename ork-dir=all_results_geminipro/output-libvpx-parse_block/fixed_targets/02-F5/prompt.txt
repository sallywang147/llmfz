Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

extern "C" {
#include <libavcodec/avcodec.h>
#include <libavutil/avutil.h>
}

struct TileWorkerData {};
struct VP9Decoder {};

extern "C" void parse_block(struct TileWorkerData*, struct VP9Decoder*, int, int, char, int, int);

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  struct TileWorkerData* tile_worker_data = new TileWorkerData;
  struct VP9Decoder* vp9_decoder = new VP9Decoder;
  FuzzedDataProvider provider(data, size);
  int arg_1 = provider.ConsumeIntegralInRange<int>(0, 100);
  int arg_2 = provider.ConsumeIntegralInRange<int>(0, 100);
  char arg_3 = provider.ConsumeIntegral<char>();
  int arg_4 = provider.ConsumeIntegralInRange<int>(0, 100);
  int arg_5 = provider.ConsumeIntegralInRange<int>(0, 100);
  parse_block(tile_worker_data, vp9_decoder, arg_1, arg_2, arg_3, arg_4, arg_5);
  delete tile_worker_data;
  delete vp9_decoder;
  return 0;
}

void parse_block(struct TileWorkerData* tile_worker_data, struct VP9Decoder* vp9_decoder, int arg_1, int arg_2, char arg_3, int arg_4, int arg_5) {
  // Do something with the arguments.
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
