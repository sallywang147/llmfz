Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include "Poco/RegularExpression.h"

#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <string>
#include <vector>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);
  std::string input = provider.ConsumeRemainingBytesAsString();
  std::string regex = provider.ConsumeRemainingBytesAsString();

  Poco::RegularExpression re(regex);
  std::vector<std::string> matches;
  re.split(input, matches);

  return 0;
}
```

The issue was that the `Poco/RegularExpression.h` header was not wrapped with `extern "C" {}`. This caused the linker to fail to find the definition of the `Poco::RegularExpression` class.

To fix this issue, the `#include` directive for `Poco/RegularExpression.h` was wrapped with `extern "C" {}`. This tells the compiler to treat the header as a C header, which allows the linker to find the definition of the `Poco::RegularExpression` class.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
