Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>
#include <vector>
#include <string>

#include "Poco/RegularExpression.h"

extern "C" {
#include <cstdint>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider stream(data, size);

  std::string input_string = stream.ConsumeRemainingBytesAsString();
  std::string regex_string = stream.ConsumeRemainingBytesAsString();
  Poco::RegularExpression regex(regex_string);
  std::vector<std::string> results;
  int limit = stream.ConsumeIntegral<int>();
  int result = regex.split(input_string, results, limit);

  return result;
}
```

The original code has the following issues:

1. The `Poco/RegularExpression.h` header is not wrapped with `extern "C" {}`. This is necessary because the header contains C++ code that needs to be compiled as C code.
2. The `LLVMFuzzerTestOneInput` function is not declared as `extern "C"`. This is necessary because the function is called from C code.

The fixed code addresses these issues by wrapping the `Poco/RegularExpression.h` header with `extern "C" {}` and declaring the `LLVMFuzzerTestOneInput` function as `extern "C"`.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
