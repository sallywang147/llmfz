Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

#include <freetype/freetype.h>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  // Initialize FreeType library.
  FT_Library library;
  if (FT_Init_FreeType(&library)) {
    return 0;
  }

  // Create a new face object.
  FT_Face face;
  if (FT_New_Memory_Face(library, data, size, 0, &face)) {
    FT_Done_FreeType(library);
    return 0;
  }

  // Create a new size object.
  FT_Size size;
  if (FT_New_Size(face, &size)) {
    FT_Done_Face(face);
    FT_Done_FreeType(library);
    return 0;
  }

  // Create a new glyph slot object.
  FT_GlyphSlot slot;
  if (FT_Get_Glyph(face, 0, FT_LOAD_DEFAULT, &slot)) {
    FT_Done_Size(size);
    FT_Done_Face(face);
    FT_Done_FreeType(library);
    return 0;
  }

  // Fuzz the glyph index and load flags.
  FuzzedDataProvider provider(data, size);
  int glyph_index = provider.ConsumeIntegral<int>();
  int load_flags = provider.ConsumeIntegral<int>();

  // Load the glyph.
  if (FT_Load_Glyph(face, glyph_index, load_flags, FT_LOAD_DEFAULT)) {
    FT_Done_Glyph(slot);
    FT_Done_Size(size);
    FT_Done_Face(face);
    FT_Done_FreeType(library);
    return 0;
  }

  // Free the glyph slot.
  FT_Done_Glyph(slot);

  // Free the size object.
  FT_Done_Size(size);

  // Free the face object.
  FT_Done_Face(face);

  // Free the FreeType library.
  FT_Done_FreeType(library);

  return 0;
}
</code>

The code has the following build issues:
<error>
The target function `int TT_Load_Glyph(struct TT_SizeRec_ * size, struct FT_GlyphSlotRec_ * glyph, int glyph_index, int load_flags)` was not called by the fuzz target `LLVMFuzzerTestOneInput`.YOU MUST CALL FUNCTION `int TT_Load_Glyph(struct TT_SizeRec_ * size, struct FT_GlyphSlotRec_ * glyph, int glyph_index, int load_flags)` INSIDE FUNCTION `LLVMFuzzerTestOneInput`.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
