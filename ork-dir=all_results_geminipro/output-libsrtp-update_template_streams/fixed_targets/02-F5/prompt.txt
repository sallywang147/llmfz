Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "srtp.h"

extern "C" {
#include <srtp/srtp.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  srtp_policy_t policy;
  srtp_init();
  srtp_policy_init(&policy);
  srtp_policy_parse(&policy, stream.ConsumeRemainingBytesAsString().c_str(),
                    stream.remaining_bytes());
  srtp_ctx_t_ session;
  srtp_create(&session, &policy);
  int ret = update_template_streams(&session, &policy);
  srtp_policy_destroy(&policy);
  srtp_destroy(&session);
  srtp_shutdown();
  return ret;
}
```

The issue is that the function `update_template_streams` is not defined. To fix this, the following line should be added to the top of the file:

```c++
extern "C" int update_template_streams(srtp_ctx_t_ session, srtp_policy_t_ policy);
```

This line declares the function `update_template_streams` as an external function, which means that it is defined in another file. The compiler will then look for the definition of the function in the other file and link it to the current file.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
