```c++
#include <fuzzer/FuzzedDataProvider.h>
#include <libssh2.h>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  ssh_session session = ssh2_new();
  if (session == NULL) {
    return 0;
  }
  ssh2_options_set(session, SSH2_OPTIONS_HOST, "localhost");

  FuzzedDataProvider provider(data, size);
  size_t username_length = provider.ConsumeIntegralInRange<size_t>(0, 1024);
  std::string username = provider.ConsumeBytesAsString(username_length);

  int rc = ssh2_userauth_agent(session, username.c_str());
  if (rc != SSH2_AUTH_SUCCESS) {
    ssh2_disconnect(session);
    ssh2_free(session);
    return 0;
  }

  ssh2_disconnect(session);
  ssh2_free(session);

  return 0;
}
```

The corrected code is shown below:

```c++
#include <fuzzer/FuzzedDataProvider.h>
#include <libssh2.h>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  ssh_session session = ssh2_new();
  if (session == NULL) {
    return 0;
  }
  ssh2_options_set(session, SSH2_OPTIONS_HOST, "localhost");

  FuzzedDataProvider provider(data, size);
  size_t username_length = provider.ConsumeIntegralInRange<size_t>(0, 1024);
  std::string username = provider.ConsumeBytesAsString(username_length);

  int rc = ssh2_userauth_agent(session, username.c_str());
  if (rc != SSH2_AUTH_SUCCESS) {
    ssh2_disconnect(session);
    ssh2_free(session);
    return 0;
  }

  ssh2_disconnect(session);
  ssh2_free(session);

  return 0;
}
```