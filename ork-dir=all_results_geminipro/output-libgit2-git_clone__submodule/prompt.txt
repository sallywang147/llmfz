<system>
You are a security testing engineer who wants to write a C++ program to execute all lines in a given function by defining and initializing its parameters in a suitable way before fuzzing the function through <code>LLVMFuzzerTestOneInput</code>.

Carefully study the function signature and its parameters, then follow the example problems and solutions to answer the final problem. YOU MUST call the function to fuzz in the solution.

Try as many variations of these inputs as possible. Do not use a random number generator such as <code>rand()</code>.

Use <code>FuzzedDataProvider</code> to generate these inputs. You MUST declare it in <code>LLVMFuzzerTestOneInput</code>, like this:
<code>
FuzzedDataProvider stream(data, size);
</code>

Include <code>#include <fuzzer/FuzzedDataProvider.h></code> in the solution.

This code shows example of using it:
<code>
// Extract integral values
int int_arg = stream.ConsumeIntegral<int>();
int int_arg_in_range = stream.ConsumeIntegralInRange(-100, 100);
bool bool_arg = stream.ConsumeBool();

// Extract floating point values
float probability = stream.ConsumeProbability();
double double_arg = stream.ConsumeFloatingPoint<double>();
double double_arg_in_range = stream.ConsumeFloatingPointInRange(-1.0, 1.0);

// Extract value from predefined set, such as enum or array
EnumType enum = stream.ConsumeEnum<EnumType>();
int valid_values = stream.PickValueInArray({FLAG_1, FLAG_2, FLAG_3});

// Extract an array of bytes as a vector. You MUST call <code>.data()</code> to use result as pointer.
std::vector<uint8_t> bytes = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange(0, max_size));
void *data_ptr = bytes.data();
std::vector<uint8_t> bytes2 = stream.ConsumeBytes<uint8_t>(requested_size);
void *data2_ptr = bytes2.data();

// Extract a string. You MUST use <code>.c_str()</code> to use result as pointer
std::string str = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange(0, max_size));
char *ptr = str.c_str();
std::string str2 = stream.ConsumeBytesAsString(requested_size);
char *ptr2 = str2.c_str();
std::string str3 = stream.ConsumeRandomLengthString();
char *ptr3 = str3.c_str();

// Extract to user defined object
struct_type_t obj;
size_t consumed = stream.ConsumeData(&obj, sizeof(obj));
</code>

There MUST be AT MOST ONE call to <code>ConsumeRemainingBytes</code> to consume remaining input!
<code>
FuzzedDataProvider stream(data, size);

std::vector<uint8_t> bytes3 = stream.ConsumeRemainingBytes();
void *data3_ptr = bytes3.data();
</code>

All variables used MUST be declared and initialized. Carefully make sure that the variable and argument types in your code match and compiles successfully. Add type casts to make types match.

Do not create new variables with the same names as existing variables.
WRONG:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  void* data = Foo();
}
</code>

EXTREMELY IMPORTANT: If you write code using <code>goto</code>, you MUST MUST also declare all variables BEFORE the <code>goto</code>. Never introduce new variables after the <code>goto</code>.
WRONG:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  int a = bar();
  if (!some_function()) goto EXIT;
  Foo b = target_function(data, size);
  int c = another_func();
EXIT:
  return 0;
}
</code>

CORRECT:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  int a = bar();
  Foo b;
  int c;

  if (!some_function()) goto EXIT;
  b = target_function(data, size);
  c = another_func()
EXIT:
  return 0;
}
</code>

If an example provided for the same library includes a unique header file, then it must be included in the solution as well.
</system>

<task>
Your goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:
<function header>
int git_transport_smart(struct git_transport ** out, struct git_remote * owner, char * param)
</function header>
</task>

<solution>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "futils.h"
#include "git2.h"
#include "git2/sys/transport.h"

#include "standalone_driver.h"

#define UNUSED(x) (void)(x)

struct fuzzer_buffer {
  const unsigned char *data;
  size_t size;
};

struct fuzzer_stream {
  git_smart_subtransport_stream base;
  const unsigned char *readp;
  const unsigned char *endp;
};

struct fuzzer_subtransport {
  git_smart_subtransport base;
  git_transport *owner;
  struct fuzzer_buffer data;
};

static git_repository *repo;

static int fuzzer_stream_read(git_smart_subtransport_stream *stream, char *buffer, size_t buf_size, size_t *bytes_read) {
  struct fuzzer_stream *fs = (struct fuzzer_stream *)stream;
  size_t avail = fs->endp - fs->readp;

  *bytes_read = (buf_size > avail) ? avail : buf_size;
  memcpy(buffer, fs->readp, *bytes_read);
  fs->readp += *bytes_read;

  return 0;
}

static int fuzzer_stream_write(git_smart_subtransport_stream *stream, const char *buffer, size_t len) {
  UNUSED(stream);
  UNUSED(buffer);
  UNUSED(len);
  return 0;
}

static void fuzzer_stream_free(git_smart_subtransport_stream *stream) { free(stream); }

static int fuzzer_stream_new(struct fuzzer_stream **out, const struct fuzzer_buffer *data) {
  struct fuzzer_stream *stream = malloc(sizeof(*stream));
  if (!stream)
    return -1;

  stream->readp = data->data;
  stream->endp = data->data + data->size;
  stream->base.read = fuzzer_stream_read;
  stream->base.write = fuzzer_stream_write;
  stream->base.free = fuzzer_stream_free;

  *out = stream;

  return 0;
}

static int fuzzer_subtransport_action(git_smart_subtransport_stream **out, git_smart_subtransport *transport, const char *url, git_smart_service_t action) {
  struct fuzzer_subtransport *ft = (struct fuzzer_subtransport *)transport;

  UNUSED(url);
  UNUSED(action);

  return fuzzer_stream_new((struct fuzzer_stream **)out, &ft->data);
}

static int fuzzer_subtransport_close(git_smart_subtransport *transport) {
  UNUSED(transport);
  return 0;
}

static void fuzzer_subtransport_free(git_smart_subtransport *transport) { free(transport); }

static int fuzzer_subtransport_new(struct fuzzer_subtransport **out, git_transport *owner, const struct fuzzer_buffer *data) {
  struct fuzzer_subtransport *sub = malloc(sizeof(*sub));
  if (!sub)
    return -1;

  sub->owner = owner;
  sub->data.data = data->data;
  sub->data.size = data->size;
  sub->base.action = fuzzer_subtransport_action;
  sub->base.close = fuzzer_subtransport_close;
  sub->base.free = fuzzer_subtransport_free;

  *out = sub;

  return 0;
}

static int fuzzer_subtransport_cb(git_smart_subtransport **out, git_transport *owner, void *payload) {
  struct fuzzer_buffer *buf = (struct fuzzer_buffer *)payload;
  struct fuzzer_subtransport *sub;

  if (fuzzer_subtransport_new(&sub, owner, buf) < 0)
    return -1;

  *out = &sub->base;
  return 0;
}

static int fuzzer_transport_cb(git_transport **out, git_remote *owner, void *param) {
  git_smart_subtransport_definition def = {fuzzer_subtransport_cb, 1, param};
  return git_transport_smart(out, owner, &def);
}

static void fuzzer_git_abort(const char *op) {
  const git_error *err = git_error_last();
  fprintf(stderr, "unexpected libgit error: %s: %s\n", op, err ? err->message : "<none>");
  abort();
}

int LLVMFuzzerInitialize(int *argc, char ***argv) {
#if defined(_WIN32)
  char tmpdir[MAX_PATH], path[MAX_PATH];

  if (GetTempPath((DWORD)sizeof(tmpdir), tmpdir) == 0)
    abort();

  if (GetTempFileName(tmpdir, "lg2", 1, path) == 0)
    abort();

  if (git_futils_mkdir(path, 0700, 0) < 0)
    abort();
#else
  char path[] = "/tmp/git2.XXXXXX";

  if (mkdtemp(path) != path)
    abort();
#endif

  if (git_libgit2_init() < 0)
    abort();

  if (git_libgit2_opts(GIT_OPT_SET_PACK_MAX_OBJECTS, 10000000) < 0)
    abort();

  UNUSED(argc);
  UNUSED(argv);

  if (git_repository_init(&repo, path, 1) < 0)
    fuzzer_git_abort("git_repository_init");

  return 0;
}

int LLVMFuzzerTestOneInput(const unsigned char *data, size_t size) {
  struct fuzzer_buffer buffer = {data, size};
  git_remote_callbacks callbacks = GIT_REMOTE_CALLBACKS_INIT;
  git_remote *remote;

  if (git_remote_create_anonymous(&remote, repo, "fuzzer://remote-url") < 0)
    fuzzer_git_abort("git_remote_create");

  callbacks.transport = fuzzer_transport_cb;
  callbacks.payload = &buffer;

  if (git_remote_connect(remote, GIT_DIRECTION_FETCH, &callbacks, NULL, NULL) < 0)
    goto out;

  git_remote_download(remote, NULL, NULL);

out:
  git_remote_free(remote);

  return 0;
}

</solution>


<task>
Your goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:
<function header>
int git_clone__submodule(struct git_repository ** out, char * url, char * local_path, struct git_clone_options * _options)
</function header>
</task>
You MUST call <code>
int git_clone__submodule(struct git_repository ** out, char * url, char * local_path, struct git_clone_options * _options)
</code> in your solution!

<solution>
