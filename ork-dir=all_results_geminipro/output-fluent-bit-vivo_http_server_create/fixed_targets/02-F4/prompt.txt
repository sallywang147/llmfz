Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <string>

extern "C" {
#include "vivo_exporter.h"
#include "flb_config.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  const char* listen_address = stream.ConsumeRemainingBytesAsString().c_str();
  const int tcp_port = stream.ConsumeIntegral<int>();

  // Fix: Check if the data stream is empty before creating the exporter context.
  if (stream.empty()) {
    return 0;
  }

  struct vivo_exporter* ctx = vivo_exporter_create();
  if (ctx == nullptr) {
    return 0;
  }

  struct flb_config* config = flb_config_create();
  if (config == nullptr) {
    vivo_exporter_destroy(ctx);
    return 0;
  }

  struct prom_http* http = vivo_http_server_create(ctx,
                                                    const_cast<char*>(listen_address),
                                                    tcp_port, config);
  if (http == nullptr) {
    vivo_exporter_destroy(ctx);
    flb_config_destroy(config);
    return 0;
  }

  vivo_http_server_destroy(http);
  flb_config_destroy(config);
  vivo_exporter_destroy(ctx);
  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
