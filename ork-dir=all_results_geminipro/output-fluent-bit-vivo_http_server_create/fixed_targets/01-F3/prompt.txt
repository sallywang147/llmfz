Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "vivo_exporter.h"

extern "C" {
#include "flb.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const std::string listen = stream.ConsumeRemainingBytesAsString();
  const int tcp_port = stream.ConsumeIntegral<int>();
  struct flb_config config;
  struct vivo_exporter ctx;
  vivo_http_server_create(&ctx, listen.c_str(), tcp_port, &config);
  return 0;
}
```

The original code has the following issues:

* The `vivo_http_server_create` function is declared with `const_cast` on the `listen` parameter, which is not necessary and can lead to undefined behavior.
* The `listen` parameter of `vivo_http_server_create` is declared as a `const char*`, but the `ConsumeRemainingBytesAsString` method of `FuzzedDataProvider` returns a `std::string`. This can lead to a compiler error because the types are not compatible.

To fix these issues, the `const_cast` on the `listen` parameter of `vivo_http_server_create` has been removed, and the `listen` parameter has been changed to a `char*`. Additionally, the `vivo_http_server_create` function has been wrapped with `extern "C"` to ensure that it is visible to the linker.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
