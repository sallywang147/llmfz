Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <cstddef>
#include <cstdint>

extern "C" {
#include "src/parser/parser.h"
#include "src/terminal/terminal.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  Terminal::Emulator emulator;
  Parser::Resize resize(&emulator);
  for (size_t i = 0; i < size; i++) {
    resize.act(Parser::UserByte(data[i]));
  }

  return 0;
}
```

The original code has a few issues:

1. The `Parser::Resize` class has a constructor that takes a `Terminal::Emulator` as an argument. This constructor is not called in the provided code, so the `resize` object is not properly initialized.

2. The `act_on_terminal` method of the `Parser::Resize` class is called with the `emulator` object as an argument. However, the `resize` object was not initialized with this `emulator` object, so the call to `act_on_terminal` will not work correctly.

The fixed code addresses these issues by:

1. Passing the `emulator` object to the constructor of the `Parser::Resize` class.

2. Removing the `&emulator` argument from the call to `act_on_terminal`.

With these changes, the code should now compile and run correctly.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
