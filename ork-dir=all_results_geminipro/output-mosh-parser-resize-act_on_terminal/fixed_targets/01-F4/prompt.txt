Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <cstddef>
#include <cstdint>

extern "C" {
#include "src/parser/parser.h"
#include "src/terminal/terminal.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  Terminal::Emulator emu;
  Parser::Resize resize(&emu);  // Pass the emulator object as an argument
  for (size_t i = 0; i < size; i++) {
    resize.act(Parser::UserByte(data[i]));
  }

  return 0;
}
```

In the fixed code:

- The `Parser::Resize` object is created with the `Terminal::Emulator` object as an argument, allowing the `act_on_terminal` method to access the emulator object and perform the intended operations.
- The `extern "C" {}` block is used to wrap the header file inclusions for the `parser` and `terminal` modules, ensuring that the function symbols are exported with C linkage.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
