Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "../ini.h"

#include <fuzzer/FuzzedDataProvider.h>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);

  const size_t max_str_len = provider.ConsumeIntegralInRange<size_t>(5, 100);
  char *str = (char *)malloc(max_str_len + 1);
  provider.ConsumeBytes(str, max_str_len);
  str[max_str_len] = '\0';

  const size_t max_num = provider.ConsumeIntegralInRange<size_t>(0, 100);
  char num_str[100];
  sprintf(num_str, "%zu", max_num);

  const size_t max_stream_len = provider.ConsumeIntegralInRange<size_t>(5, 100);
  char *stream = (char *)malloc(max_stream_len + 1);
  provider.ConsumeBytes(stream, max_stream_len);
  stream[max_stream_len] = '\0';

  char *result = ini_reader_string(str, max_num, stream);
  if (result) {
    free(result);
  }

  free(str);
  free(stream);

  return 0;
}
```

The original code has the following issues:

1. The `ini.h` header is not wrapped with `extern "C" {}`. This causes the linker to fail to resolve the reference to the `ini_reader_string` function.

2. The `ini_reader_string` function is not declared in the header file. This causes the compiler to generate an error when trying to call the function.

To fix the code, we need to wrap the `ini.h` header with `extern "C" {}` and declare the `ini_reader_string` function in the header file.

Here is the fixed code:

```c++
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

extern "C" {
#include "../ini.h"
}

#include <fuzzer/FuzzedDataProvider.h>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);

  const size_t max_str_len = provider.ConsumeIntegralInRange<size_t>(5, 100);
  char *str = (char *)malloc(max_str_len + 1);
  provider.ConsumeBytes(str, max_str_len);
  str[max_str_len] = '\0';

  const size_t max_num = provider.ConsumeIntegralInRange<size_t>(0, 100);
  char num_str[100];
  sprintf(num_str, "%zu", max_num);

  const size_t max_stream_len = provider.ConsumeIntegralInRange<size_t>(5, 100);
  char *stream = (char *)malloc(max_stream_len + 1);
  provider.ConsumeBytes(stream, max_stream_len);
  stream[max_stream_len] = '\0';

  char *result = ini_reader_string(str, max_num, stream);
  if (result) {
    free(result);
  }

  free(str);
  free(stream);

  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
