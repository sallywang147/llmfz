Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "brotli/encode.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const int quality = stream.ConsumeIntegral<int>();
  const int lgwin = stream.ConsumeIntegral<int>();
  const int block_size = stream.ConsumeIntegral<int>();
  const size_t input_size = stream.ConsumeIntegral<size_t>();
  const std::string input = stream.ConsumeRemainingBytesAsString();

  size_t output_size = 0;
  std::string output;
  output.resize(input_size * 2);
  const int result = BrotliEncoderCompress(quality, lgwin, block_size, input_size,
                                          input.data(), &output_size, output.data());
  if (result != BROTLI_RESULT_SUCCESS) {
    return 0;
  }
  output.resize(output_size);
  return 0;
}
```
The build error is caused by the use of `const_cast` on the `input` string. To fix this, we can use the `data()` member function of the `std::string` class to get a pointer to the underlying data. This pointer is not const, so we can pass it to `BrotliEncoderCompress` without using `const_cast`.

The corrected code is shown below:

```c++
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "brotli/encode.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const int quality = stream.ConsumeIntegral<int>();
  const int lgwin = stream.ConsumeIntegral<int>();
  const int block_size = stream.ConsumeIntegral<int>();
  const size_t input_size = stream.ConsumeIntegral<size_t>();
  const std::string input = stream.ConsumeRemainingBytesAsString();

  size_t output_size = 0;
  std::string output;
  output.resize(input_size * 2);
  const int result = BrotliEncoderCompress(quality, lgwin, block_size, input_size,
                                          input.data(), &output_size, output.data());
  if (result != BROTLI_RESULT_SUCCESS) {
    return 0;
  }
  output.resize(output_size);
  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
