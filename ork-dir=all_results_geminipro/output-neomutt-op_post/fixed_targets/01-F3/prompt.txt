Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

#include "fuzzer/FuzzedDataProvider.h"

extern "C" {
#include "op.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);

  struct IndexSharedData {
    std::vector<uint8_t> data;
  };

  struct IndexPrivateData {
    std::vector<uint8_t> data;
  };

  IndexSharedData shared;
  IndexPrivateData private_data;

  int arg_int = provider.ConsumeIntegral<int>();

  op_post(&shared, &private_data, arg_int);

  return 0;
}
```

The corrected code includes the `op.h` header file using the `extern "C"` block. This is necessary because the `op.h` header file is written in C, and we are compiling the code using a C++ compiler. The `extern "C"` block tells the compiler to compile the code in the block as C code, rather than C++ code. This allows us to use the `op_post` function in the code.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
