Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>
#include "zstd.h"

extern "C" size_t LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  const size_t seq_size = stream.ConsumeIntegralInRange<size_t>(0, 100000);
  char* seq = new char[seq_size];
  stream.ConsumeBytes(seq, seq_size);

  const size_t max_output_size = stream.ConsumeIntegralInRange<size_t>(0, 100000);
  char* output = new char[max_output_size];

  ZSTD_CCtx* cctx = ZSTD_createCCtx();
  LZ4HC_optimal_t* opt = LZ4HC_createOptimal();

  size_t const ret =
      ZSTD_generateSequences(cctx, opt, seq_size, seq, max_output_size, output);

  ZSTD_freeCCtx(cctx);
  LZ4HC_freeOptimal(opt);
  delete[] seq;
  delete[] output;

  return ret;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
