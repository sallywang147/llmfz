Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>
#include <cstdint>
#include <string>
#include <vector>

extern "C" {
#include "lodepng.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider stream(data, size);

  const std::string filename = stream.ConsumeRandomLengthString();
  const std::vector<uint8_t> image = stream.ConsumeRemainingBytes<uint8_t>();
  const int w = stream.ConsumeIntegral<int>();
  const int h = stream.ConsumeIntegral<int>();
  const int colortype = stream.ConsumeIntegral<int>();
  const int bitdepth = stream.ConsumeIntegral<int>();

  lodepng::encode(filename, reinterpret_cast<char *>(image.data()), w, h, colortype,
                 bitdepth);
  return 0;
}
```

The original code had a few issues:

1. The `lodepng.h` header was missing the `extern "C"` wrapper. This is necessary because `lodepng.h` is a C header and the C++ compiler expects C++ headers.

2. The `std::vector` class was not included. This is necessary because the `image` variable is declared as a `std::vector<uint8_t>`.

3. The `lodepng::encode` function was missing the `extern "C"` wrapper. This is necessary because `lodepng::encode` is a C++ function and the C++ compiler expects C functions.

The fixed code includes the `extern "C"` wrappers for the `lodepng.h` header and the `lodepng::encode` function, and it also includes the `std::vector` class. This should fix the build issues and allow the code to compile and run correctly.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
