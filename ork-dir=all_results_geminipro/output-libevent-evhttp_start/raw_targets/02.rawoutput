#include <assert.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>
#include <string>
#include <sys/socket.h>

#include <fuzzer/FuzzedDataProvider.h>

extern "C" {
#include "libevent/include/event2/buffer.h"
#include "libevent/include/event2/bufferevent.h"
#include "libevent/include/event2/event.h"
#include "libevent/include/event2/http.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {

  FuzzedDataProvider data_provider(data, size);

  std::string s1 = data_provider.ConsumeRandomLengthString();
  std::string s2 = data_provider.ConsumeRandomLengthString();
  size_t int1 = data_provider.ConsumeIntegral<size_t>();
  size_t int2 = data_provider.ConsumeIntegral<size_t>();
  size_t int3 = data_provider.ConsumeIntegral<size_t>();
  size_t int4 = data_provider.ConsumeIntegral<size_t>();

  int options1 = int2 % 16;
  int options2 = int3 % 16;

  struct evhttp *httpd = NULL;
  struct event_base *base = NULL;
  struct evconnlistener *listener = NULL;

  /*create a base*/
  base = event_base_new();
  if (!base) {
    return 0;
  }

  /*create a httpd*/
  httpd = evhttp_start(s1.c_str(), int1);
  if (!httpd) {
    event_base_free(base);
    return 0;
  }

  /*set some options*/
  evhttp_set_timeout(httpd, int2);
  evhttp_set_max_headers(httpd, int3);
  evhttp_set_max_body_size(httpd, int4);

  /*create a listener*/
  listener = evconnlistener_new_bind(base, NULL, NULL, options1, options2, s2.c_str(), int2);
  if (!listener) {
    evhttp_free(httpd);
    event_base_free(base);
    return 0;
  }

  /*set some options*/
  evconnlistener_set_error_cb(listener, NULL);
  evconnlistener_set_cb(listener, NULL, NULL, NULL, httpd);

  /*clean up*/
  evconnlistener_free(listener);
  evhttp_free(httpd);
  event_base_free(base);

  return 0;
}

</solution>