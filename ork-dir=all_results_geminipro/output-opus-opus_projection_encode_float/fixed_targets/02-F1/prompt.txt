Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>

#include "opus/opus.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const int32_t channels = stream.ConsumeIntegral<int32_t>();
  const int32_t frame_size = stream.ConsumeIntegral<int32_t>();
  const int32_t max_data_bytes = stream.ConsumeIntegral<int32_t>();
  float* pcm = reinterpret_cast<float*>(stream.ConsumeBytes<float>(frame_size * channels * sizeof(float)));
  char* data_out = reinterpret_cast<char*>(stream.ConsumeBytes<char>(max_data_bytes));
  OpusProjectionEncoder* st = opus_projection_encoder_create(channels, 48000, OPUS_APPLICATION_VOIP, &stream.ConsumeIntegral<int32_t>());
  if (st == nullptr) {
    return 0;
  }
  const int ret = opus_projection_encode_float(st, pcm, frame_size, data_out, max_data_bytes);
  opus_projection_encoder_destroy(st);
  return ret;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
