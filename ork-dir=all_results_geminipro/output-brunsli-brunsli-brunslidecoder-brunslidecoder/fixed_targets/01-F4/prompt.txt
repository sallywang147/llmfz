Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <brunsli/decode.h>
#include <brunsli/decode_jpeg.h>
#include <brunsli/status.h>
#include <fuzzer/FuzzedDataProvider.h>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider stream(data, size);
  brunsli::BrunsliDecoder *decoder = new brunsli::BrunsliDecoder();
  decoder->BrunsliDecoder();  // Fix: Call the default constructor
  const size_t kMaxDecodedPixels = 1024 * 1024;
  brunsli::JPEGData jpeg_data;
  jpeg_data.data = stream.ConsumeRemainingBytes();
  jpeg_data.size = stream.remaining_bytes();
  brunsli::BrunsliStatus status = decoder->DecodeJPEG(
      jpeg_data, kMaxDecodedPixels, nullptr, nullptr, nullptr);
  delete decoder;
  return 0;
}
```
The original code had a few issues:

1. The `BrunsliDecoder` class has a default constructor, but it was not being called. This caused the compiler to generate an error.
2. The `JPEGData` struct was not being initialized properly. The `data` and `size` members needed to be set to the data and size of the JPEG image, respectively.

The corrected code fixes these issues. The `BrunsliDecoder` class is now properly constructed, and the `JPEGData` struct is initialized with the data and size of the JPEG image.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
