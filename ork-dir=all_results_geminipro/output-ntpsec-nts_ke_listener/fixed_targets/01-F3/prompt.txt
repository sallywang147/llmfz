Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

extern "C" {
#include <ntpsec/tests/ntpd/nts_ke.h>
}

extern int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) { // ntpsec/tests/ntpd/nts_ke.c

  char *arg = (char *)malloc(Size + 1);
  memcpy(arg, Data, Size);
  arg[Size] = '\0';

  nts_ke_listener(arg);

  free(arg);

  return 0;
}
```

The original code has the following issues:

1. The header file `ntpsec/tests/ntpd/nts_ke.c` is included directly, which is not a standard C++ header file. This causes the compiler to treat the C code in that file as C++ code, leading to compilation errors.

2. The function `nts_ke_listener` is declared in the C code in `ntpsec/tests/ntpd/nts_ke.c`, but it is not declared in the C++ code. This causes the linker to report an undefined reference to the function.

To fix these issues, we need to:

1. Change the `#include` directive for `ntpsec/tests/ntpd/nts_ke.c` to `#include <ntpsec/tests/ntpd/nts_ke.h>`. This will include the header file for the C code, which contains the function declarations.

2. Wrap the `#include` directive for `ntpsec/tests/ntpd/nts_ke.h` with `extern "C" {}`. This tells the compiler to treat the C code in that file as C code, preventing compilation errors.

After making these changes, the code should compile and run correctly.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
