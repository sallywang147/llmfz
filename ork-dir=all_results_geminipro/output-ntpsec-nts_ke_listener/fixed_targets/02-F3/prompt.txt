Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include "ntpd.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define kMinInputLength 20
#define kMaxInputLength 1024

char * nts_ke_listener(char * arg);

extern "C" {
#include <fuzzer/FuzzedDataProvider.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) { // ntpsec/tests/ntpd/nts_ke.c

  if (Size < kMinInputLength || Size > kMaxInputLength) {
    return 0;
  }

  char *arg = (char *)malloc(Size + 1);
  memcpy(arg, Data, Size);
  arg[Size] = '\0';

  char *ret = nts_ke_listener(arg);
  if (ret) free(ret);
  free(arg);

  return 0;
}
```

The original code has the following issues:
1. The `nts_ke_listener` function is declared but not defined.
2. The `LLVMFuzzerTestOneInput` function is declared as `extern "C"`, but the function definition is missing the `extern "C"` declaration.

The fixed code includes the following changes:
1. The `nts_ke_listener` function is defined.
2. The `LLVMFuzzerTestOneInput` function definition is wrapped with `extern "C"`.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
