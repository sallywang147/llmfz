Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <cstddef>
#include <cstdint>
#include <fuzzer/FuzzedDataProvider.h>
#include <string>

extern "C" {
#include <libFuzzer/libFuzzer.h>
}

struct parse {
  std::string str;
};

extern "C" int nonnewline(parse* p) {
  size_t i = 0;
  while (i < p->str.size() && p->str[i] != '\n') {
    i++;
  }
  p->str = p->str.substr(0, i);
  return 0;
}

extern "C" void LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);

  parse p;
  p.str = provider.ConsumeRemainingBytesAsString();

  nonnewline(&p);
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
