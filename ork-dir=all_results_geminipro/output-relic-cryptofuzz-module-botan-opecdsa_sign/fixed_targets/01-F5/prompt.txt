Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <optional>
#include <string>

extern "C" {
#include "cryptofuzz.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  std::optional<std::string> msg = stream.ConsumeRemainingBytesAsString();
  if (!msg) {
    return 0;
  }
  cryptofuzz::module::relic relic;
  cryptofuzz::operation::ECDSA_Sign ecdsa_sign;
  cryptofuzz::module::Botan::OpECDSA_Sign(msg.value(), &relic, &ecdsa_sign);
  return 0;
}
```

The fixed code:

1. Added `std::optional<std::string> msg = stream.ConsumeRemainingBytesAsString();` to consume the remaining bytes as a string.
2. Added a check to see if `msg` has a value before using it.
3. Changed `cryptofuzz::module::Botan::OpECDSA_Sign(&msg, &relic, &ecdsa_sign);` to `cryptofuzz::module::Botan::OpECDSA_Sign(msg.value(), &relic, &ecdsa_sign);` to pass the string value of `msg` to the function.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
