Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const std::string opt = stream.ConsumeRemainingBytesAsString();
  int mutate_flags = 0;
  parse_mutate_flags(const_cast<char*>(opt.c_str()), &mutate_flags);
  return 0;
}

extern "C" {
#include "parse_mutate_flags.h"
}
```

In this case, the error message is:

```
error: undefined reference to 'parse_mutate_flags'
```

This means that the linker cannot find the definition of the function `parse_mutate_flags`. To fix this, we need to include the header file that contains the definition of this function. In this case, the header file is `parse_mutate_flags.h`.

However, simply including the header file is not enough. We also need to wrap the `#include` directive with `extern "C" {}`. This is because the function `parse_mutate_flags` is written in C, and we are compiling the code with a C++ compiler. The `extern "C"` directive tells the compiler to compile the code in the header file as C code, rather than C++ code.

Once we have made these changes, the code should compile and run successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
