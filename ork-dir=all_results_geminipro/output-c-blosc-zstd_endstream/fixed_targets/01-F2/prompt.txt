Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

#include "zstd.h"

extern "C" {
#include "zstd.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  ZSTD_CCtx* cctx = ZSTD_createCCtx();
  if (!cctx) {
    return 0;
  }

  FuzzedDataProvider provider(data, size);
  ZSTD_inBuffer input = {nullptr, 0, 0};

  while (provider.remaining_bytes() > 0) {
    size_t next_size = provider.ConsumeIntegralInRange<size_t>(
        0, provider.remaining_bytes());
    auto next_input = provider.ConsumeBytes<unsigned char>(next_size);
    input.src = next_input.data();
    input.size = next_input.size();
    input.pos = 0;
    while (input.pos < input.size) {
      size_t ret = ZSTD_compressStream(cctx, &input, ZSTD_e_end);
      if (ZSTD_isError(ret)) {
        fprintf(stderr, "ZSTD_compressStream error: %s\n", ZSTD_getErrorName(ret));
        ZSTD_freeCCtx(cctx);
        return 0;
      }
    }
  }

  size_t ret = ZSTD_endStream(cctx, &input);
  if (ZSTD_isError(ret)) {
    fprintf(stderr, "ZSTD_endStream error: %s\n", ZSTD_getErrorName(ret));
  }

  ZSTD_freeCCtx(cctx);

  return 0;
}
```
In this case, the error is caused by the missing `extern "C" {}` around the `#include "zstd.h"` directive. This is necessary because the `zstd.h` header file contains C-style function declarations, which are not compatible with C++ by default. By wrapping the `#include` directive with `extern "C" {}`, we tell the compiler to treat the declarations in the header file as C-style declarations, which allows the code to compile successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
