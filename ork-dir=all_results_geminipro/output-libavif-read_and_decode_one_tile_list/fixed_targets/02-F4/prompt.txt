Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

extern "C" {
#include <aom/aom_decoder.h>
#include <aom/aom_mem.h>
#include <aom/aomdx.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider provider(data, size);
  aom_codec_ctx_t codec_ctx;
  aom_codec_dec_cfg_t dec_cfg = aom_codec_dec_cfg_t();
  aom_codec_err_t ret;
  aom_codec_iface_t *codec = aom_codec_av1_dx();
  ret = aom_codec_dec_init(&codec_ctx, codec, &dec_cfg, 0);
  if (ret != AOM_CODEC_OK) return 0;

  size_t buffer_size = provider.ConsumeIntegralInRange<size_t>(0, 1024 * 1024);
  std::vector<uint8_t> buffer(buffer_size);
  provider.ConsumeBytes<uint8_t>(buffer.data(), buffer_size);
  aom_read_bit_buffer rb = {buffer.data(), buffer_size, 0};

  aom_image_t image;
  ret = aom_img_alloc(&image, AV1_IMG_FMT_I420, 128, 128, 1);
  if (ret != AOM_CODEC_OK) return 0;
  aom_codec_iter_t iter = NULL;
  ret = aom_codec_decode(&codec_ctx, &rb, &iter);
  if (ret != AOM_CODEC_OK) return 0;
  int tile_list_count = 0;
  while (aom_codec_decode_tile(&codec_ctx, &iter, &image, NULL, NULL,
                              NULL, NULL, NULL, 0, &tile_list_count) ==
         AOM_CODEC_OK) {
    char *data = nullptr;
    char *data_end = nullptr;
    char **data_ptr = &data;
    ret = read_and_decode_one_tile_list(&codec_ctx, &rb, data, data_end,
                                        data_ptr, &tile_list_count);
    if (ret != AOM_CODEC_OK) return 0;
  }

  aom_codec_destroy(&codec_ctx);
  aom_img_free(&image);
  return 0;
}
```

The following changes were made to the code:

* The header files `<aom/aom_decoder.h>`, `<aom/aom_mem.h>`, and `<aom/aomdx.h>` were wrapped with `extern "C" {}` to allow the object linking to succeed.
* The function `read_and_decode_one_tile_list` was declared as `extern "C"` to allow it to be called from the C++ code.

With these changes, the code should now compile and run successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
