Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>
#include <vector>

extern "C" {
#include "speex/speex_bits.h"
#include "speex/speex_preprocess.h"
}

extern "C" int split_cb_search_shape_sign(float *target, float *ak, float *awk1, float *awk2,
                               char *par, int p, int nsf, float *exc, float *r,
                               SpeexBits *bits, char *stack, int complexity,
                               int update_target);

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const size_t target_size = stream.ConsumeIntegralInRange<size_t>(1, 1000);
  std::vector<float> target(target_size);
  stream.ConsumeFloatingPointArray(target.data(), target_size);

  const size_t ak_size = stream.ConsumeIntegralInRange<size_t>(1, 1000);
  std::vector<float> ak(ak_size);
  stream.ConsumeFloatingPointArray(ak.data(), ak_size);

  const size_t awk1_size = stream.ConsumeIntegralInRange<size_t>(1, 1000);
  std::vector<float> awk1(awk1_size);
  stream.ConsumeFloatingPointArray(awk1.data(), awk1_size);

  const size_t awk2_size = stream.ConsumeIntegralInRange<size_t>(1, 1000);
  std::vector<float> awk2(awk2_size);
  stream.ConsumeFloatingPointArray(awk2.data(), awk2_size);

  const size_t par_size = stream.ConsumeIntegralInRange<size_t>(1, 1000);
  std::vector<char> par(par_size);
  stream.ConsumeBytes<char>(par.data(), par_size);

  const int p = stream.ConsumeIntegral<int>();
  const int nsf = stream.ConsumeIntegral<int>();

  const size_t exc_size = stream.ConsumeIntegralInRange<size_t>(1, 1000);
  std::vector<float> exc(exc_size);
  stream.ConsumeFloatingPointArray(exc.data(), exc_size);

  const size_t r_size = stream.ConsumeIntegralInRange<size_t>(1, 1000);
  std::vector<float> r(r_size);
  stream.ConsumeFloatingPointArray(r.data(), r_size);

  SpeexBits bits;
  char stack[1000];
  const int complexity = stream.ConsumeIntegral<int>();
  const int update_target = stream.ConsumeIntegral<int>();

  split_cb_search_shape_sign(target.data(), ak.data(), awk1.data(), awk2.data(),
                             par.data(), p, nsf, exc.data(), r.data(), &bits,
                             stack, complexity, update_target);
  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
