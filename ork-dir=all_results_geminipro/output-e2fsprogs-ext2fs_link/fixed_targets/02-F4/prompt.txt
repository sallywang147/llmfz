Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <assert.h>
#include <errno.h>
#include <fcntl.h>
#include <fuzzer/FuzzedDataProvider.h>
#include <linux/memfd.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <sys/syscall.h>
#include <unistd.h>

#include "ext2fs/ext2fs.h"
extern "C" {
#include "e2p/e2p.h"
#include "support/print_fs_flags.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {

  const char *progname = "ext2fs_link_fuzzer";
  add_error_table(&et_ext2_error_table);

  enum FuzzerType { ext2fsLink, kMaxValue = ext2fsLink };

  FuzzedDataProvider stream(data, size);
  const FuzzerType f = stream.ConsumeEnum<FuzzerType>();
  int flags = stream.ConsumeIntegral<int>();
#ifndef USE_FLAGS
  flags = 0;
#endif

  static const char *fname = "/tmp/ext2_test_file";

  // Write our data to a temp file.
#ifdef SAVE_FS_IMAGE
  int fd = open(fname, O_CREAT | O_TRUNC | O_RDWR, 0644);
#else
  int fd = syscall(SYS_memfd_create, fname, 0);
#endif
  std::vector<char> buffer = stream.ConsumeRemainingBytes<char>();
  write(fd, buffer.data(), buffer.size());

  std::string fspath("/proc/self/fd/" + std::to_string(fd));

  ext2_filsys fs;
#ifdef USE_FLAGS
  printf("Flags: 0x%08x ", flags);
  print_fs_flags(stdout, flags);
  flags &= ~EXT2_FLAG_NOFREE_ON_ERROR;
#endif
  errcode_t retval = ext2fs_open(fspath.c_str(), flags | EXT2_FLAG_IGNORE_CSUM_ERRORS, 0, 0, unix_io_manager, &fs);

  if (retval) {
    com_err(progname, retval, "while trying to open file system");
  } else {
#ifdef DUMP_SUPER
    list_super2(fs->super, stdout);
#endif
    printf("FuzzerType: %d\n", (int)f);
    switch (f) {
    case ext2fsLink: {
      std::string name = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange(0, 100));
      int dir = stream.ConsumeIntegral<int>();
      int ino = stream.ConsumeIntegral<int>();
      retval = ext2fs_link(fs, dir, name.c_str(), ino, flags);
      if (retval)
        com_err(progname, retval, "while trying to create link");
      break;
    }
    default: {
      assert(false);
    }
    }
    ext2fs_close(fs);
  }
  close(fd);

  return 0;
}
```
The issue in the original code is that the header file `ext2fs/ext2fs.h` is not wrapped with `extern "C" {}`. This causes the linker to not be able to find the definitions of the functions declared in that header file.

To fix this, we need to wrap the `#include` directive for `ext2fs/ext2fs.h` with `extern "C" {}`. This will tell the linker to look for the definitions of the functions in that header file in the C language, rather than the C++ language.

Here is the corrected code:
```c++
#include <assert.h>
#include <errno.h>
#include <fcntl.h>
#include <fuzzer/FuzzedDataProvider.h>
#include <linux/memfd.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <sys/syscall.h>
#include <unistd.h>

#include "ext2fs/ext2fs.h"
extern "C" {
#include "e2p/e2p.h"
#include "support/print_fs_flags.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {

  const char *progname = "ext2fs_link_fuzzer";
  add_error_table(&et_ext2_error_table);

  enum FuzzerType { ext2fsLink, kMaxValue = ext2fsLink };

  FuzzedDataProvider stream(data, size);
  const FuzzerType f = stream.ConsumeEnum<FuzzerType>();
  int flags = stream.ConsumeIntegral<int>();
#ifndef USE_FLAGS
  flags = 0;
#endif

  static const char *fname = "/tmp/ext2_test_file";

  // Write our data to a temp file.
#ifdef SAVE_FS_IMAGE
  int fd = open(fname, O_CREAT | O_TRUNC | O_RDWR, 0644);
#else
  int fd = syscall(SYS_memfd_create, fname, 0);
#endif
  std::vector<char> buffer = stream.ConsumeRemainingBytes<char>();
  write(fd, buffer.data(), buffer.size());

  std::string fspath("/proc/self/fd/" + std::to_string(fd));

  ext2_filsys fs;
#ifdef USE_FLAGS
  printf("Flags: 0x%08x ", flags);
  print_fs_flags(stdout, flags);
  flags &= ~EXT2_FLAG_NOFREE_ON_ERROR;
#endif
  errcode_t retval = ext2fs_open(fspath.c_str(), flags | EXT2_FLAG_IGNORE_CSUM_ERRORS, 0, 0, unix_io_manager, &fs);

  if (retval) {
    com_err(progname, retval, "while trying to open file system");
  } else {
#ifdef DUMP_SUPER
    list_super2(fs->super, stdout);
#endif
    printf("FuzzerType: %d\n", (int)f);
    switch (f) {
    case ext2fsLink: {
      std::string name = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange(0, 100));
      int dir = stream.ConsumeIntegral<int>();
      int ino = stream.ConsumeIntegral<int>();
      retval = ext2fs_link(fs, dir, name.c_str(), ino, flags);
      if (retval)
        com_err(progname, retval, "while trying to create link");
      break;
    }
    default: {
      assert(false);
    }
    }
    ext2fs_close(fs);
  }
  close(fd);

  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
