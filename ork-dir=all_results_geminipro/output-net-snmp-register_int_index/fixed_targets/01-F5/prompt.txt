Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>
#include <map>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const size_t name_len = stream.ConsumeIntegral<size_t>();
  const std::string name = stream.ConsumeBytesAsString(name_len);
  const int val = stream.ConsumeIntegral<int>();

  std::map<std::string, int> name_to_val;
  name_to_val.insert(std::make_pair(name, val));

  // Call the register_int_index function with the correct arguments
  register_int_index(name.c_str(), name_len, val);

  return 0;
}

// Define the register_int_index function
extern "C" int register_int_index(const char* name, size_t name_len, int val) {
  // Implement the functionality of the register_int_index function here
  return 0;
}
```

Changes made:

1. The `register_int_index` function is declared and defined.
2. The `register_int_index` function is called inside the `LLVMFuzzerTestOneInput` function with the correct arguments.
3. The `name` variable is converted to a `char*` before passing it to the `register_int_index` function.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
