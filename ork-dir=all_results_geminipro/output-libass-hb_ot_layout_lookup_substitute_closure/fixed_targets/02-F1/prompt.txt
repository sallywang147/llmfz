Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "hb.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const std::string font_data = stream.ConsumeRemainingBytesAsString();
  hb_blob_t* font_blob = hb_blob_create(font_data.c_str(), font_data.size(),
                                         HB_MEMORY_MODE_READONLY, nullptr,
                                         nullptr);
  if (font_blob == nullptr) {
    return 0;
  }
  hb_face_t* face = hb_face_create(font_blob, 0);
  hb_blob_destroy(font_blob);
  if (face == nullptr) {
    return 0;
  }

  const int lookup_index = stream.ConsumeIntegral<int>();
  hb_set_t* glyphs = hb_set_create();
  hb_ot_layout_lookup_substitute_closure(face, lookup_index, glyphs);
  hb_set_destroy(glyphs);
  hb_face_destroy(face);
  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
