Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include "fuzzer/FuzzedDataProvider.h"

#include <cstddef>
#include <cstdint>
#include <cstdlib>

extern "C" {
#include "pcre2.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  pcre2_real_compile_context_8* context =
      pcre2_compile_context_create_8(nullptr);
  if (context == nullptr) {
    return 0;
  }

  const int newline = stream.ConsumeIntegral<int>();
  pcre2_set_newline_8(context, newline);
  pcre2_compile_context_free_8(context);
  return 0;
}
```

Changes made:

1. Changed the `#include <fuzzer/FuzzedDataProvider.h>` to `#include "fuzzer/FuzzedDataProvider.h"` to resolve the undefined reference to `FuzzedDataProvider`.

2. Wrapped the `#include "pcre2.h"` directive with `extern "C" {}` to resolve the undefined reference to `pcre2_compile_context_create_8` and `pcre2_compile_context_free_8`.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
