Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <vector>

#include "psa/crypto.h"
#include "psa/crypto_derivation.h"
#include "psa/crypto_key_agreement.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  struct psa_key_derivation_s operation;
  memset(&operation, 0, sizeof(operation));

  operation.alg = stream.ConsumeIntegralInRange<psa_algorithm_t>(
      PSA_ALG_HKDF_SHA_256, PSA_ALG_HKDF_SHA_512);
  operation.key = stream.ConsumeIntegralInRange<psa_key_id_t>(1, 1000);
  operation.output = stream.ConsumeIntegralInRange<psa_key_id_t>(1, 1000);

  int key = stream.ConsumeIntegralInRange<int>(1, 1000);

  mbedtls_test_psa_key_agreement_with_self(&operation, key);

  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
