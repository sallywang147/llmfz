Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TINYOBJLOADER_IMPLEMENTATION // define this in only *one* .cc
#include "tiny_obj_loader.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
  std::string obj_text(reinterpret_cast<const char *>(Data), Size);
  std::istringstream obj_stream(obj_text);
  tinyobj::callback_t cb;
  tinyobj::LoadObjWithCallback(&obj_stream, &cb, nullptr, nullptr, nullptr, nullptr);
  return 0;
}
```

The original code has the following issues:

1. The `tiny_obj_loader.h` header file is not included with `extern "C" {}` wrapped around it. This causes a linker error because the C++ symbols in the header file are not visible to the C compiler.
2. The `std::string` and `std::istringstream` classes are not defined. This causes a compiler error because the code tries to use these classes without including the necessary header files.

To fix these issues, the following changes were made:

1. The `tiny_obj_loader.h` header file is now included with `extern "C" {}` wrapped around it. This ensures that the C++ symbols in the header file are visible to the C compiler.
2. The `#include <string>` and `#include <sstream>` header files are now included. This defines the `std::string` and `std::istringstream` classes, respectively.

With these changes, the code should now compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
