<system>
You are a security testing engineer who wants to write a C++ program to execute all lines in a given function by defining and initializing its parameters in a suitable way before fuzzing the function through <code>LLVMFuzzerTestOneInput</code>.

Carefully study the function signature and its parameters, then follow the example problems and solutions to answer the final problem. YOU MUST call the function to fuzz in the solution.

Try as many variations of these inputs as possible. Do not use a random number generator such as <code>rand()</code>.

Use <code>FuzzedDataProvider</code> to generate these inputs. You MUST declare it in <code>LLVMFuzzerTestOneInput</code>, like this:
<code>
FuzzedDataProvider stream(data, size);
</code>

Include <code>#include <fuzzer/FuzzedDataProvider.h></code> in the solution.

This code shows example of using it:
<code>
// Extract integral values
int int_arg = stream.ConsumeIntegral<int>();
int int_arg_in_range = stream.ConsumeIntegralInRange(-100, 100);
bool bool_arg = stream.ConsumeBool();

// Extract floating point values
float probability = stream.ConsumeProbability();
double double_arg = stream.ConsumeFloatingPoint<double>();
double double_arg_in_range = stream.ConsumeFloatingPointInRange(-1.0, 1.0);

// Extract value from predefined set, such as enum or array
EnumType enum = stream.ConsumeEnum<EnumType>();
int valid_values = stream.PickValueInArray({FLAG_1, FLAG_2, FLAG_3});

// Extract an array of bytes as a vector. You MUST call <code>.data()</code> to use result as pointer.
std::vector<uint8_t> bytes = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange(0, max_size));
void *data_ptr = bytes.data();
std::vector<uint8_t> bytes2 = stream.ConsumeBytes<uint8_t>(requested_size);
void *data2_ptr = bytes2.data();

// Extract a string. You MUST use <code>.c_str()</code> to use result as pointer
std::string str = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange(0, max_size));
char *ptr = str.c_str();
std::string str2 = stream.ConsumeBytesAsString(requested_size);
char *ptr2 = str2.c_str();
std::string str3 = stream.ConsumeRandomLengthString();
char *ptr3 = str3.c_str();

// Extract to user defined object
struct_type_t obj;
size_t consumed = stream.ConsumeData(&obj, sizeof(obj));
</code>

There MUST be AT MOST ONE call to <code>ConsumeRemainingBytes</code> to consume remaining input!
<code>
FuzzedDataProvider stream(data, size);

std::vector<uint8_t> bytes3 = stream.ConsumeRemainingBytes();
void *data3_ptr = bytes3.data();
</code>

All variables used MUST be declared and initialized. Carefully make sure that the variable and argument types in your code match and compiles successfully. Add type casts to make types match.

Do not create new variables with the same names as existing variables.
WRONG:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  void* data = Foo();
}
</code>

EXTREMELY IMPORTANT: If you write code using <code>goto</code>, you MUST MUST also declare all variables BEFORE the <code>goto</code>. Never introduce new variables after the <code>goto</code>.
WRONG:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  int a = bar();
  if (!some_function()) goto EXIT;
  Foo b = target_function(data, size);
  int c = another_func();
EXIT:
  return 0;
}
</code>

CORRECT:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  int a = bar();
  Foo b;
  int c;

  if (!some_function()) goto EXIT;
  b = target_function(data, size);
  c = another_func()
EXIT:
  return 0;
}
</code>

If an example provided for the same library includes a unique header file, then it must be included in the solution as well.
</system>

<task>
Your goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:
<function header>
size_t long GFWX::compress<unsigned char const*>(char ** imageData, struct GFWX::Header * header, char * buffer, size_t size, int * channelTransform, char * metaData, size_t metaDataSize)
</function header>
</task>

<solution>

#include "fuzzing/datasource/datasource.hpp"
#include "gfwx.h"
#include <cmath>
#include <cstddef>
#include <cstdint>
#include <cstring>

class Image {
public:
  const std::vector<uint8_t> data;
  const size_t width;
  const size_t height;
  const size_t numChannels;
  const size_t totalSize;
  Image(std::vector<uint8_t> data, size_t width, const size_t height, const size_t numChannels) : data(data), width(width), height(height), numChannels(numChannels), totalSize(width * height * numChannels) {}
};

static std::optional<Image> getImage(fuzzing::datasource::Datasource &ds) {
  const size_t numChannels = 3;

  const auto image = ds.GetData(0);
  if (image.empty()) {
    return std::nullopt;
  }
  const auto totalBytesPerChannel = image.size() / numChannels;
  if (totalBytesPerChannel == 0) {
    return std::nullopt;
  }
  const auto divisor = ds.Get<uint64_t>() % totalBytesPerChannel;
  if (divisor == 0) {
    return std::nullopt;
  }
  const auto width = totalBytesPerChannel / divisor;
  if (width == 0) {
    return std::nullopt;
  }
  const auto height = totalBytesPerChannel / width;
  if (height == 0) {
    return std::nullopt;
  }

  const auto totalSize = width * height * numChannels;

  std::vector<uint8_t> imageResized(totalSize);
  memcpy(imageResized.data(), image.data(), totalSize);

  return std::make_optional<Image>(imageResized, width, height, numChannels);
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  fuzzing::datasource::Datasource ds(data, size);

  static std::vector<int> encoderChoices({GFWX::EncoderTurbo, GFWX::EncoderFast, GFWX::EncoderContextual});
  static std::vector<int> intentChoices({GFWX::IntentGeneric, GFWX::IntentMono, GFWX::IntentBayerRGGB, GFWX::IntentBayerBGGR, GFWX::IntentBayerGRBG, GFWX::IntentBayerGBRG, GFWX::IntentBayerGeneric, GFWX::IntentRGB, GFWX::IntentRGBA, GFWX::IntentRGBApremult, GFWX::IntentBGR, GFWX::IntentBGRA, GFWX::IntentBGRApremult, GFWX::IntentCMYK});
  static int transform_UYV[] = GFWX_TRANSFORM_UYV;
  static int transform_A710_BGR[] = GFWX_TRANSFORM_A710_BGR;
  static int transform_A710_RGB[] = GFWX_TRANSFORM_A710_RGB;

  static std::vector<int *> transformChoices({transform_UYV, transform_A710_BGR, transform_A710_RGB});

  static std::vector<int> filterChoices({GFWX::FilterLinear, GFWX::FilterCubic});

  try {
    const auto image = getImage(ds);
    if (image == std::nullopt) {
      return 0;
    }

    int layers = 1;
    int channels = image->numChannels;
    int bitDepth = GFWX::BitDepthAuto; // BitDepthAuto selects 8 or 16 based on type
    int quality = (ds.Get<uint16_t>() % 1024) + 1;
    int chromaScale = (ds.Get<uint16_t>() % 1024) + 1;
    int blockSize = ds.Get<uint8_t>() % (GFWX::BlockMax + 1);
    int filter = filterChoices[ds.Get<uint8_t>() % filterChoices.size()];
    int quantization = GFWX::QuantizationScalar;
    int encoder = encoderChoices[ds.Get<uint8_t>() % encoderChoices.size()];
    int intent = intentChoices[ds.Get<uint8_t>() % intentChoices.size()];

    const bool useTransform = ds.Get<bool>();
    int *transform = nullptr;
    if (useTransform) {
      transform = transformChoices[ds.Get<uint8_t>() % transformChoices.size()];
    }

    GFWX::Header header(image->width, image->height, layers, channels, bitDepth, quality, chromaScale, blockSize, filter, quantization, encoder, intent);

    const auto outSize = ds.Get<uint64_t>() % (image->totalSize * 2);
    std::vector<uint8_t> out(outSize);
    const ptrdiff_t size = GFWX::compress(image->data.data(), header, out.data(), out.size(), transform, 0, 0);
    if (size != GFWX::ErrorOverflow) {
      fuzzing::memory::memory_test(out);
    }
  } catch (...) {
  }
  return 0;
}

</solution>


<task>
Your goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:
<function header>
void fuzzing::types::Container<char, true, false>::~Container(fuzzing::types::Container * this)
</function header>
</task>
You MUST call <code>
void fuzzing::types::Container<char, true, false>::~Container(fuzzing::types::Container * this)
</code> in your solution!

<solution>
