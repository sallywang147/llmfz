Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <ft2build.h>
#include FT_FREETYPE_H
#include FT_GLYPH_H>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

extern "C" {
#include <freetype/ttnameid.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider fdp(data, size);

  FT_Library library;
  if (FT_Init_FreeType(&library)) {
    return 0;
  }

  FT_Face face;
  if (FT_New_Memory_Face(library, data, size, 0, &face)) {
    FT_Done_FreeType(library);
    return 0;
  }

  FT_Set_Pixel_Sizes(face, 0, 16);

  FT_GlyphSlot slot = face->glyph;

  int glyph_index = fdp.ConsumeIntegralInRange<int>(0, face->num_glyphs - 1);
  int load_flags = fdp.ConsumeIntegral<int>();

  if (FT_Load_Glyph(face, glyph_index, load_flags)) {
    FT_Done_Face(face);
    FT_Done_FreeType(library);
    return 0;
  }

  FT_Done_Face(face);
  FT_Done_FreeType(library);

  return 0;
}
```

The following changes were made to the original code:

1. The `tt_glyph_load` function was replaced with `FT_Load_Glyph`.
2. The `ttnameid.h` header was included to use the `TT_NAME_ID_GLYPH` constant.

With these changes, the code should compile and run correctly.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
