Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

extern "C" {
#include "dns.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  struct dns_zt* zt = dns_zt_create(nullptr, nullptr);
  if (zt == nullptr) {
    return 0;
  }

  struct dns_view* view = dns_view_create();
  if (view == nullptr) {
    dns_zt_free(zt);
    return 0;
  }

  const bool freeze = stream.ConsumeBool();
  dns_zt_freezezones(zt, view, freeze);

  dns_view_delete(view);
  dns_zt_free(zt);
  return 0;
}
```

The following changes were made to the original code:

1. The header file `dns.h` is now wrapped with `extern "C" {}`. This ensures that the function declarations in the header file are visible to the C++ compiler.
2. The function `dns_zt_freezezones` is now declared in the header file `dns.h`. This allows the C++ compiler to find the function definition when it is called in the `LLVMFuzzerTestOneInput` function.

With these changes, the code should now compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
