Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>
#include <cstddef>
#include <cstdint>
#include <cstdlib>

#include <dns/zt.h>

extern "C" {
#include <dns/zt_private.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  struct dns_zt* zt = dns_zt_create();
  if (zt == nullptr) {
    return 0;
  }

  struct dns_view* view = dns_zt_view_create(zt);
  if (view == nullptr) {
    dns_zt_destroy(zt);
    return 0;
  }

  const bool freeze = stream.ConsumeBool();

  int ret = dns_zt_freezezones(zt, view, freeze);

  dns_zt_view_destroy(view);
  dns_zt_destroy(zt);

  return ret;
}
```

The fixed code is shown above.
The issues in the original code are:
1. The header `#include <dns/zt_private.h>` is not wrapped with `extern "C" {}`.
2. The function `dns_zt_freezezones` is not declared in the header `#include <dns/zt.h>`.

To fix the issues, we need to:
1. Wrap the header `#include <dns/zt_private.h>` with `extern "C" {}`.
2. Declare the function `dns_zt_freezezones` in the header `#include <dns/zt.h>`.

The fixed code is shown above.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
