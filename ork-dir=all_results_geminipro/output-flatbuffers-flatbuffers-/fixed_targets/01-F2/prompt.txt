Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>
#include <vector>

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/idl.h"
#include "flatbuffers/util.h"

namespace flatbuffers {
namespace fuzzer {

// Fuzzes the provided flatbuffers schema.
extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  std::string schema_data = stream.ConsumeRemainingBytesAsString();

  // Parse the schema.
  flatbuffers::Parser parser;
  auto ast = parser.Parse(schema_data.c_str());
  if (!ast) {
    return 0;
  }

  // Generate text code for the schema.
  std::string text_code;
  flatbuffers::TextCodeGenerator text_code_generator;
  text_code_generator.Generate(*ast, &text_code);

  // Generate binary code for the schema.
  std::string binary_code;
  flatbuffers::GenerateBinaryCode(*ast, &binary_code);

  return 0;
}

}  // namespace fuzzer
}  // namespace flatbuffers
```

Changes made:

1. Added the missing `extern "C" {}` around the `#include` directives for the `flatbuffers` library headers. This is necessary for the object linking to succeed.

2. Updated the `GenerateBinaryCode` function call to use the `ast` pointer instead of a reference to `ast`. This is necessary because the `GenerateBinaryCode` function takes a pointer to the AST as its first argument.

With these changes, the code should now build and run as expected.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
