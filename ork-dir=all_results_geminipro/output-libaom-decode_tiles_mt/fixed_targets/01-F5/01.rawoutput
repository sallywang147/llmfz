```c++
#include <fuzzer/FuzzedDataProvider.h>
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

extern "C" {
#include <libavif/avif.h>
}

extern "C" char * decode_tiles_mt(struct AV1Decoder *, char *, char *, int, int);

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  if (size < 100) {
    return 0;
  }

  FuzzedDataProvider provider(data, size);

  char *input_buffer = provider.ConsumeBytes<char>(size).data();
  int tile_cols = provider.ConsumeIntegralInRange<int>(1, 100);
  int tile_rows = provider.ConsumeIntegralInRange<int>(1, 100);

  char *output_buffer = decode_tiles_mt(nullptr, input_buffer, input_buffer + size,
                                        tile_cols, tile_rows);
  free(output_buffer);

  return 0;
}
```

The build error message is:

```
error: undefined reference to 'decode_tiles_mt'
```

This means that the linker cannot find the definition of the function `decode_tiles_mt`. To fix this, we need to make sure that the function is defined in a library that is linked to the executable.

In this case, the function `decode_tiles_mt` is defined in the library `libavif`. To link to this library, we need to add the following line to the linker command:

```
-lavif
```

For example, if we are using the GNU linker, we would add the following line to the linker command:

```
-L/path/to/libavif -lavif
```

where `/path/to/libavif` is the path to the directory where the `libavif` library is installed.

Once we have added the necessary linker flags, we should be able to build the program successfully.