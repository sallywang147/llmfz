Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
The corrected code:
```c++
#include <fuzzer/FuzzedDataProvider.h>
#include <cstdint>

extern "C" {
#include "_GLOBAL__sub_I_ftfuzzer.cc"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  _GLOBAL__sub_I_ftfuzzer(data, size);
  return 0;
}
```
The code has the following build issues:
<error>
"_GLOBAL__sub_I_ftfuzzer.cc": No such file or directory
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
The header file `"_GLOBAL__sub_I_ftfuzzer.cc"` is not found. This could be because the file is not in the current directory or the include path is not set correctly.

To fix the issue, make sure that the header file is in the current directory or add the directory containing the header file to the include path.

The corrected code:
```c++
#include <fuzzer/FuzzedDataProvider.h>
#include <cstdint>

#include "_GLOBAL__sub_I_ftfuzzer.cc"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  _GLOBAL__sub_I_ftfuzzer(data, size);
  return 0;
}
```
Now the code should compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
