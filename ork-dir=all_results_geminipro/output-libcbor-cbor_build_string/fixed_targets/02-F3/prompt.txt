Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <vector>

#include "cbor.h"

#include <fuzzer/FuzzedDataProvider.h>

extern "C" {
#include "cbor.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider provider(data, size);

  std::string str = provider.ConsumeRandomLengthString();
  char *val = str.c_str();
  struct cbor_item_t *item = cbor_build_string(val);
  if (item) {
    cbor_decref(&item);
  }
  return 0;
}
```

The original code has the following issues:
1. The `cbor.h` header is included twice, once with `extern "C" {}` and once without. This is incorrect and can lead to undefined reference errors.
2. The `cbor_decref()` function is not declared in the `cbor.h` header. This can lead to a compiler error.

To fix these issues, the `cbor.h` header should be included only once, with `extern "C" {}`. Additionally, the `cbor_decref()` function should be declared in the `cbor.h` header.

The corrected code is shown above.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
