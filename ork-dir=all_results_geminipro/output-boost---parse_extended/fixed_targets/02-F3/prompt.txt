Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <boost/regex.hpp>
#include <fuzzer/FuzzedDataProvider.h>

extern "C" {
#include <cstring>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
  FuzzedDataProvider fuzzed_data(Data, Size);
  std::string regex_string = fuzzed_data.ConsumeRemainingBytesAsString();
  boost::re_detail_500::basic_regex_parser<char, boost::c_regex_traits<char> > parser;
  parser.parse_extended(regex_string.c_str());
  return 0;
}
```

The error is:
```
error: no matching function for call to ‘parse_extended’
```

The reason for this error is that the `parse_extended` method takes a `const char*` as its argument, but the `regex_string` variable is a `std::string`. To fix this, we need to convert the `regex_string` variable to a `const char*` before passing it to the `parse_extended` method. This can be done using the `c_str()` method of the `std::string` class.

The corrected code is shown above.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
