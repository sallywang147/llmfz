Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <cstdint>
#include <cstring>
#include <string>

#include "lodepng.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  if (size == 0)
    return 0;

  // Setting last byte of input as random_color_type
  // Fuzzer will still be able to mutate the data accordingly as
  // last byte of png file can be changed and file will still remain valid.
  size_t random_color_type = data[size - 1] % 6;

  unsigned w = 0, h = 0;
  std::vector<unsigned char> image;

  unsigned error = lodepng::decode(image, w, h, data, size);
  if (error)
    return 0;

  char filename[256];
  sprintf(filename, "/tmp/lodepng_fuzz_%d.png", random_color_type);

  error = lodepng::encode24_file(filename, reinterpret_cast<char *>(image.data()), w, h);
  if (error)
    return 0;

  return 0;
}
</code>

The code has the following build issues:
<error>
The target function `int lodepng_encode24_file(char * filename, char * image, int w, int h)` was not called by the fuzz target `LLVMFuzzerTestOneInput`.YOU MUST CALL FUNCTION `int lodepng_encode24_file(char * filename, char * image, int w, int h)` INSIDE FUNCTION `LLVMFuzzerTestOneInput`.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
