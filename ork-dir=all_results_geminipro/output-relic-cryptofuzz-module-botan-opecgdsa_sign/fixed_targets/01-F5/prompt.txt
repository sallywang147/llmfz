Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include "cryptofuzz/cryptofuzz.h"

#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <memory>

#include "cryptofuzz/module/Botan.h"
#include "cryptofuzz/module/relic.h"
#include "cryptofuzz/operation/ECDSA_Sign.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  std::optional<std::string> hash_algorithm = stream.ConsumeBool()
                                                  ? std::make_optional(stream.ConsumeRandomLengthString())
                                                  : std::nullopt;
  std::unique_ptr<cryptofuzz::module::relic> relic_module =
      std::make_unique<cryptofuzz::module::relic>();
  std::unique_ptr<cryptofuzz::operation::ECDSA_Sign> ecdsa_sign_operation =
      std::make_unique<cryptofuzz::operation::ECDSA_Sign>();
  cryptofuzz::module::Botan::OpECGDSA_Sign(hash_algorithm, relic_module.get(),
                                           ecdsa_sign_operation.get());
  return 0;
}
```

The original code has the following issues:

1. The `cryptofuzz/module/Botan.h` header is not wrapped with `extern "C" {}`. This is necessary because the header contains C++ code that needs to be linked with the C code in the fuzzer.
2. The `cryptofuzz/module/relic.h` header is not wrapped with `extern "C" {}`. This is necessary because the header contains C++ code that needs to be linked with the C code in the fuzzer.
3. The `cryptofuzz/operation/ECDSA_Sign.h` header is not wrapped with `extern "C" {}`. This is necessary because the header contains C++ code that needs to be linked with the C code in the fuzzer.

The fixed code wraps all of the necessary headers with `extern "C" {}`. This allows the C++ code in the headers to be linked with the C code in the fuzzer.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
