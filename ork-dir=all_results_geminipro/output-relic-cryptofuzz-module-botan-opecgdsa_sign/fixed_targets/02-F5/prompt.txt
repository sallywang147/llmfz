Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <vector>

extern "C" {
#include "cryptofuzz/module/Botan.h"
#include "cryptofuzz/module/relic.h"
#include "cryptofuzz/operation/ECDSA_Sign.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  std::vector<uint8_t> key_bytes = stream.ConsumeBytes<uint8_t>(32);
  std::vector<uint8_t> message_bytes = stream.ConsumeBytes<uint8_t>(32);

  cryptofuzz::module::relic relic_module;
  cryptofuzz::module::Botan botan_module;
  cryptofuzz::operation::ECDSA_Sign ecdsa_sign_operation;

  cryptofuzz::module::Botan::OpECGDSA_Sign(
      &botan_module, &relic_module, &ecdsa_sign_operation, key_bytes.data(),
      key_bytes.size(), message_bytes.data(), message_bytes.size());

  return 0;
}
```

The error message is:
```
error: undefined reference to 'cryptofuzz::module::Botan::OpECGDSA_Sign'
```
The reason for this error is that the function `cryptofuzz::module::Botan::OpECGDSA_Sign` is declared in the header file `cryptofuzz/module/Botan.h`, but it is not defined in any of the source files. To fix this error, we need to add the definition of the function to one of the source files.

Here is the fixed code:
```c++
#include <fuzzer/FuzzedDataProvider.h>

#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <vector>

extern "C" {
#include "cryptofuzz/module/Botan.h"
#include "cryptofuzz/module/relic.h"
#include "cryptofuzz/operation/ECDSA_Sign.h"
}

namespace cryptofuzz {
namespace module {
namespace Botan {

void OpECGDSA_Sign(
    Botan* botan_module, relic* relic_module, ECDSA_Sign* ecdsa_sign_operation,
    const uint8_t* key_bytes, size_t key_bytes_len, const uint8_t* message_bytes,
    size_t message_bytes_len) {
  // Implementation of the ECDSA_Sign operation using the Botan library.
}

}  // namespace Botan
}  // namespace module
}  // namespace cryptofuzz

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  std::vector<uint8_t> key_bytes = stream.ConsumeBytes<uint8_t>(32);
  std::vector<uint8_t> message_bytes = stream.ConsumeBytes<uint8_t>(32);

  cryptofuzz::module::relic relic_module;
  cryptofuzz::module::Botan botan_module;
  cryptofuzz::operation::ECDSA_Sign ecdsa_sign_operation;

  cryptofuzz::module::Botan::OpECGDSA_Sign(
      &botan_module, &relic_module, &ecdsa_sign_operation, key_bytes.data(),
      key_bytes.size(), message_bytes.data(), message_bytes.size());

  return 0;
}
```

With this fix, the code should compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
