Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>

#include <gnutls/gnutls.h>

extern "C" {
#include <gnutls/gnutls.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  gnutls_session_int* session = gnutls_session_new(nullptr);
  if (session == nullptr) {
    return 0;
  }

  size_t data_size = stream.ConsumeIntegralInRange<size_t>(0, 1024);
  std::vector<char> data_buffer(data_size);
  stream.ConsumeBytes(data_buffer.data(), data_buffer.size());

  size_t data_returned = 0;
  int ret = gnutls_session_set_data(session, data_buffer.data(), data_buffer.size());
  if (ret != 0) {
    gnutls_session_free(session);
    return 0;
  }

  // Call gnutls_session_get_data() to fix the build issue.
  ret = gnutls_session_get_data(session, data_buffer.data(), &data_returned);
  if (ret != 0) {
    gnutls_session_free(session);
    return 0;
  }

  gnutls_session_free(session);
  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
