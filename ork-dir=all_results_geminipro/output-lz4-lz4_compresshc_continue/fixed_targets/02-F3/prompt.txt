Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <vector>

extern "C" {
#include "lz4hc.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const size_t src_size = stream.ConsumeIntegralInRange<size_t>(0, size);
  const size_t dst_size = stream.ConsumeIntegralInRange<size_t>(0, size);
  std::vector<char> src(src_size);
  std::vector<char> dst(dst_size);
  stream.ConsumeBytes<char>(src.data(), src_size);

  LZ4_streamHC_u ctx;
  LZ4_resetStreamHC(&ctx, src_size);
  const int ret = LZ4_compressHC_continue(&ctx, src.data(), dst.data(), src_size);

  return 0;
}
```

The original code has a build issue because the header `#include "lz4hc.h"` is not wrapped with `extern "C" {}`. To fix this issue, we need to wrap the header with `extern "C" {}` like this:

```c++
extern "C" {
#include "lz4hc.h"
}
```

After this change, the code can be built successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
