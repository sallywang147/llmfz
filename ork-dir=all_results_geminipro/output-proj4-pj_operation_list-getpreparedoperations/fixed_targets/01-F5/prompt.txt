Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stddef.h>
#include <stdint.h>
#include <string>
#include <vector>

#include "libfuzzer/libfuzzer_macro.h"

extern "C" {
#include "pjsua2.h"
}

namespace {
class PJ_OPERATION_LIST {
 public:
  std::vector<pj_operation*>* getPreparedOperations(pj_operation_list* list,
                                                    pj_ctx* ctx);
};

std::vector<pj_operation*>* PJ_OPERATION_LIST::getPreparedOperations(
    pj_operation_list* list, pj_ctx* ctx) {
  std::vector<pj_operation*>* vec = new std::vector<pj_operation*>;
  for (size_t i = 0; i < list->count; ++i) {
    pj_operation* op = list->arr[i];
    if (op->op_id == PJ_OPERATION_ID_INVITE) {
      vec->push_back(op);
    }
  }
  return vec;
}
}  // namespace

DEFINE_PROTO_FUZZER(const uint8_t* data, size_t size) {
  pj_operation_list* list =
      reinterpret_cast<pj_operation_list*>(const_cast<uint8_t*>(data));
  pj_ctx* ctx = pj_create_null_ctx();
  PJ_OPERATION_LIST op_list;
  std::vector<pj_operation*>* vec = op_list.getPreparedOperations(list, ctx);
  pj_ctx_free(ctx);
  delete vec;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
