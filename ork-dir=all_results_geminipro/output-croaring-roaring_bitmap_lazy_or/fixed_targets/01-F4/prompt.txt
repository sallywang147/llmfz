Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <vector>

extern "C" {
#include "roaring/roaring.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const size_t bitmap_size = stream.ConsumeIntegral<size_t>();
  const bool allocated = stream.ConsumeBool();
  std::vector<uint32_t> bitmap_data;
  bitmap_data.reserve(bitmap_size);
  for (size_t i = 0; i < bitmap_size; ++i) {
    bitmap_data.push_back(stream.ConsumeIntegral<uint32_t>());
  }
  roaring_bitmap_t* bitmap1 =
      allocated ? roaring_bitmap_create() : roaring_bitmap_direct_from_data(
                                               bitmap_data.data(), bitmap_size);
  bitmap_data.clear();
  bitmap_data.reserve(bitmap_size);
  for (size_t i = 0; i < bitmap_size; ++i) {
    bitmap_data.push_back(stream.ConsumeIntegral<uint32_t>());
  }
  roaring_bitmap_t* bitmap2 =
      allocated ? roaring_bitmap_create() : roaring_bitmap_direct_from_data(
                                               bitmap_data.data(), bitmap_size);
  const bool lazy = stream.ConsumeBool();
  roaring_bitmap_lazy_or(bitmap1, bitmap2, lazy);
  roaring_bitmap_free(bitmap1);
  roaring_bitmap_free(bitmap2);
  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
