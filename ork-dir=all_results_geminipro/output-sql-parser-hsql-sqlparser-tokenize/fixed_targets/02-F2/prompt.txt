Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <string>
#include <vector>

#include "SQLParser.h"

using namespace hsql;

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  std::string input(reinterpret_cast<const char *>(data), size);
  std::vector<SQLToken> tokens;
  SQLParser::tokenize(input, &tokens);
  return 0;
}
```

The original code had the following issues:

1. The header `#include "SQLParser.h"` was missing the `extern "C" {}` wrapper. This is necessary because the header file is written in C++ and the fuzzer function is written in C. Without the wrapper, the linker would not be able to find the definition of the `tokenize` function.

2. The `using namespace hsql;` statement was outside of the `extern "C" {}` wrapper. This is necessary because the `hsql` namespace is defined in the C++ header file. Without the wrapper, the compiler would not be able to find the definition of the `SQLParser` class.

The fixed code includes the `extern "C" {}` wrapper around the `#include "SQLParser.h"` header and the `using namespace hsql;` statement. This allows the linker and compiler to find the necessary definitions and build the code successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
