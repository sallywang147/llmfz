Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#include "expat.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  char test_file[] = "libfuzzer.xml";

  FILE *fp = fopen(test_file, "wb");
  if (!fp)
    return 0;
  fwrite(data, size, 1, fp);
  fclose(fp);

  XML_Parser parser = XML_ParserCreate(NULL);
  if (!parser) {
    return 0;
  }

  char *open_entity = "<!ENTITY foo \"";
  char *close_entity = "\">";
  XML_ExternalEntityParserCreate(parser, open_entity, close_entity);

  fp = fopen(test_file, "r");
  if (!fp)
    return 0;
  while (!feof(fp)) {
    char buf[4096];
    size_t len = fread(buf, 1, sizeof(buf), fp);
    if (len < 0)
      break;
    XML_Parse(parser, buf, len, feof(fp));
  }
  fclose(fp);
  XML_ParserFree(parser);

  remove(test_file);
  return 0;
}
```

The missing function `XML_ExternalEntityParserCreate` is defined in the header file `expat.h`, so the issue can be fixed by adding the following line at the beginning of the code:

```c++
#include <expat.h>
```

The build error message also mentions that the function `XML_ExternalEntityParserCreate` is not declared in the scope of `LLVMFuzzerTestOneInput`. This can be fixed by adding `extern "C"` before the function declaration, like this:

```c++
extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  ...
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
