Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include "xls.h"

extern "C" {
#include <stdint.h>
}

int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
  int outError;
  xls_open_file((char *)Data, NULL, &outError);
  return 0;
}
```

The original code has the following issues:

1. The header file `xls.h` is not wrapped with `extern "C" {}`. This causes a linker error because the C++ compiler expects the function `xls_open_file` to be declared with C linkage, but the header file declares it with C++ linkage.

To fix this issue, we need to wrap the `#include` directive for `xls.h` with `extern "C" {}`. This tells the compiler to expect the function `xls_open_file` to be declared with C linkage.

2. The function `xls_open_file` is declared with a return type of `int`, but the definition of the function in the `xls.h` header file has a return type of `XLS_ERROR`. This causes a compiler error because the return type of the function must match the return type in the header file.

To fix this issue, we need to change the return type of the `xls_open_file` function in the code to `XLS_ERROR`.

The corrected code is shown below:

```c++
#include "xls.h"

extern "C" {
#include <stdint.h>
}

XLS_ERROR LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
  XLS_ERROR outError;
  xls_open_file((char *)Data, NULL, &outError);
  return outError;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
