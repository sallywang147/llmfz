Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>
#include <cstdint>
#include <cstdlib>

extern "C" {
#include "key_agreement.h" // Include the header file that declares exercise_key_agreement_key
}

extern "C" {
#include "key_agreement.h" // Include the header file that defines exercise_key_agreement_key
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  const int key = stream.ConsumeIntegral<int>();
  const int usage = stream.ConsumeIntegral<int>();
  const int alg = stream.ConsumeIntegral<int>();

  exercise_key_agreement_key(key, usage, alg);
  return 0;
}
```

Changes made:

1. Added `extern "C" {}` around the inclusion of the header file that defines the `exercise_key_agreement_key` function. This ensures that the function declaration is visible to the linker and that the code compiles and runs without errors.
2. Removed the redundant inclusion of the header file that declares the `exercise_key_agreement_key` function. This is not necessary since the function is already included in the header file that defines it.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
