Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>

#include <gnutls/gnutls.h>

extern "C" {
#include <gnutls/x509.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  gnutls_session_t session;
  gnutls_init(&session, GNUTLS_SERVER);

  gnutls_priority_set_direct(session, "NORMAL", NULL);

  // Initialize the certificate and private key.
  gnutls_certificate_credentials_t x509_cred;
  gnutls_certificate_allocate_credentials(&x509_cred);
  gnutls_certificate_set_x509_key_file(x509_cred, "cert.pem", "key.pem", GNUTLS_X509_FMT_PEM);

  // Set the credentials.
  gnutls_credentials_set(session, GNUTLS_CRD_CERTIFICATE, x509_cred);

  // Initialize the handshake.
  gnutls_handshake_set_timeout(session, GNUTLS_DEFAULT_HANDSHAKE_TIMEOUT);
  gnutls_handshake_set_post_handshake_auth(session, GNUTLS_HANDSHAKE_POST_HANDSHAKE_AUTH_REQUIRED);

  // Read and write data.
  while (stream.remaining_bytes() > 0) {
    size_t len = stream.ConsumeIntegralInRange<size_t>(0, stream.remaining_bytes());
    auto data = stream.ConsumeBytes<uint8_t>(len);
    gnutls_transport_write(session, data.data(), data.size());

    // Process the data.
    int ret = gnutls_handshake(session);
    if (ret < 0) {
      gnutls_deinit(session);
      return 0;
    }
  }

  gnutls_deinit(session);
  return 0;
}
```

In this fixed code:

1. We include the necessary header `<gnutls/certificate.h>` to use the `gnutls_certificate_credentials_t` and `gnutls_certificate_set_x509_key_file` functions.

2. We allocate the certificate credentials using `gnutls_certificate_allocate_credentials`.

3. We set the certificate and private key files using `gnutls_certificate_set_x509_key_file`.

4. We pass the certificate credentials to `gnutls_credentials_set` to set the credentials for the session.

5. We free the certificate credentials using `gnutls_certificate_free_credentials` in the `gnutls_deinit` function.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
