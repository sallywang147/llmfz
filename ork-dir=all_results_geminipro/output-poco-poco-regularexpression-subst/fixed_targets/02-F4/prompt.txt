Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>
#include <vector>

#include "Poco/RegularExpression.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider provider(data, size);
  std::string pattern = provider.ConsumeRemainingBytesAsString();
  if (pattern.empty()) {
    return 0;
  }

  Poco::RegularExpression regex(pattern);
  std::string input = provider.ConsumeRemainingBytesAsString();
  std::string replace = provider.ConsumeRemainingBytesAsString();

  int num_replacements = provider.ConsumeIntegralInRange<int>(0, 100);
  regex.subst(&input, num_replacements, &replace,
              Poco::RegularExpression::Global);
  return 0;
}
```

The following changes were made:

1. Added the necessary header file `#include <Poco/RegularExpression.h>` to include the Poco library.
2. Wrapped the `#include <Poco/RegularExpression.h>` header with `extern "C" {}` to allow the object linking to succeed.

With these changes, the code should compile and run as expected.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
