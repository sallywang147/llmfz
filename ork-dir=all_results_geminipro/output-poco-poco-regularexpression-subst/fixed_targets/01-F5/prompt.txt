Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "Poco/RegularExpression.h"

extern "C" {
#include "Poco/RegularExpression.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  std::string input_string = stream.ConsumeRemainingBytesAsString();
  std::string pattern = stream.ConsumeRemainingBytesAsString();
  std::string replacement = stream.ConsumeRemainingBytesAsString();

  Poco::RegularExpression regex(pattern);
  int result = regex.subst(&input_string, 0, &replacement, 0);

  return 0;
}
```

The build error is caused by the following line:

```c++
#include "Poco/RegularExpression.h"
```

This line includes the header file `Poco/RegularExpression.h` twice, once in the global scope and once inside the `extern "C" {}` block. This is not allowed in C++, and it causes the linker to generate an error.

To fix the error, we need to remove the first `#include` directive and keep only the one inside the `extern "C" {}` block.

The corrected code:

```c++
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

extern "C" {
#include "Poco/RegularExpression.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  std::string input_string = stream.ConsumeRemainingBytesAsString();
  std::string pattern = stream.ConsumeRemainingBytesAsString();
  std::string replacement = stream.ConsumeRemainingBytesAsString();

  Poco::RegularExpression regex(pattern);
  int result = regex.subst(&input_string, 0, &replacement, 0);

  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
