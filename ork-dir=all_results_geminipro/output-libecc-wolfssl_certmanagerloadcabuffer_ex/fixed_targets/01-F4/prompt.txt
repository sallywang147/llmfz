Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <vector>

#include <wolfssl/options.h>
#include <wolfssl/wolfcrypt/cert.h>
#include <wolfssl/wolfcrypt/sha256.h>  // Include the missing header file

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  struct WOLFSSL_CERT_MANAGER* cert_manager =
      wolfSSL_CertManagerNew(wolfSSL_GetGlobalEnvironment());
  if (cert_manager == NULL) {
    return 0;
  }

  const std::vector<uint8_t> ca_buffer = stream.ConsumeRemainingBytes();
  const int ca_buffer_size = ca_buffer.size();
  const int flags = stream.ConsumeIntegral<int>();
  const int verify_depth = stream.ConsumeIntegral<int>();
  const int verify_hostname = stream.ConsumeIntegral<int>();

  int ret = wolfSSL_CertManagerLoadCABuffer_ex(
      cert_manager, reinterpret_cast<char*>(ca_buffer.data()), ca_buffer_size,
      flags, verify_depth, verify_hostname);

  wolfSSL_CertManagerFree(cert_manager);
  return ret;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
