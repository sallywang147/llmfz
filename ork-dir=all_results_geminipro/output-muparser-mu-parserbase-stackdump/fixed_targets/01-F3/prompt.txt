Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <iostream>
#include <stdint.h>
#include <stdio.h>
#include <string>

extern "C" {
#include "muParser.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  std::string line_string((char *)data, size);
  try {
    mu::Parser parser;
    parser.SetExpr(line_string);
    parser.Eval();
    std::stack<mu::value> value_stack;
    std::stack<mu::token> token_stack;
    parser.StackDump(&value_stack, &token_stack);
  } catch (mu::Parser::exception_type &e) {
    std::cerr << "Parser exception: " << e.GetMsg() << std::endl;
  } catch (mu::ParserError &e) {
    std::cerr << "Parser error: " << e.GetMsg() << std::endl;
  }
  return 0;
}
```

The original code had the following issues:

* The `mu::Parser` class was not being instantiated correctly. The `parser` variable should be declared as `mu::Parser parser;` instead of `mu::Parser* parser = new mu::Parser;`.
* The `parser.Eval()` function was not being called. This function is necessary to evaluate the expression and populate the value and token stacks.
* The `parser.StackDump()` function was not being called with the correct arguments. The correct arguments are `&value_stack` and `&token_stack`.
* The `std::cerr` object was not being used to print the exception messages. This object is necessary to print the messages to the standard error stream.

The fixed code addresses all of these issues and should now work as intended.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
