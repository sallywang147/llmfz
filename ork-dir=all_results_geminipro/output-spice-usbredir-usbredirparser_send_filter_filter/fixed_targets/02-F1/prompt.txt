Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>

#include "usbredirparser.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  struct usbredirparser* parser = usbredirparser_new();
  if (parser == nullptr) {
    return 0;
  }

  const uint32_t num_rules = stream.ConsumeIntegral<uint32_t>();
  for (uint32_t i = 0; i < num_rules; i++) {
    struct usbredirfilter_rule rule;
    memset(&rule, 0, sizeof(rule));

    rule.bus_id = stream.ConsumeIntegral<uint8_t>();
    rule.dev_id = stream.ConsumeIntegral<uint8_t>();
    rule.vendor_id = stream.ConsumeIntegral<uint16_t>();
    rule.product_id = stream.ConsumeIntegral<uint16_t>();
    rule.manufacturer = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange(0, 1024));
    rule.product = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange(0, 1024));
    rule.serial_number = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange(0, 1024));

    usbredirparser_send_filter_filter(parser, &rule, 0);
  }

  usbredirparser_delete(parser);
  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
