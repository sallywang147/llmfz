Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzing/memory.hpp>
#include <protobuf-c/protobuf-c.h>
#include <stdlib.h>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  ProtobufCBuffer buffer;
  protobuf_c_buffer_init(&buffer, 0, NULL);
  protobuf_c_buffer_append(&buffer, data, size);

  ProtobufCMessageDescriptor *descriptor = protobuf_c_descriptor_get_by_name("Foo__TestMessageCheck");
  ProtobufCMessage message;
  protobuf_c_message_init(&message, descriptor);

  size_t len = protobuf_c_message_pack_to_buffer(descriptor, &message, &buffer);
  uint8_t *copy = (uint8_t *)malloc(len);
  protobuf_c_message_pack_to_buffer(descriptor, &message, &buffer);
  fuzzing::memory::memory_test(copy, len);
  free(copy);

  protobuf_c_message_free(&message);
  protobuf_c_buffer_fini(&buffer);

  return 0;
}
```

The original code has several issues:

1. The function `oneof_field_pack_to_buffer` is not defined. It should be replaced with `protobuf_c_message_pack_to_buffer`.
2. The line `oneof_field_pack_to_buffer(descriptor->fields[0], 1, &message, &buffer);` is called twice, which is unnecessary. It should be called only once.
3. The line `protobuf_c_buffer_append(&buffer, data, size);` is called twice, which is unnecessary. It should be called only once.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
