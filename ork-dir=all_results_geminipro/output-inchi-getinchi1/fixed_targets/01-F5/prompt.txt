Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>

extern "C" {
#include "inchi_api.h"
}

// Define the maximum value for size_t. We return if the fuzzing input is equal
// to kSizeMax because appending the null-terminator to the InChI buffer would
// cause wraparound, thereby initializing the buffer to size 0.
static const size_t kSizeMax = (size_t)-1;

int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {

  if (size == kSizeMax)
    return 0;

  char *szINCHISource = malloc(sizeof(char) * (size + 1));
  memcpy(szINCHISource, data, size);
  szINCHISource[size] = '\0'; // InChI string must be null-terminated

  struct inchi_InputEx extended_input;
  extended_input.szInChI = szINCHISource;
  extended_input.szOptions = NULL;

  struct tagINCHI_Output out;
  int enforce_std_format = 0;

  int status = GetINCHI1(&extended_input, &out, enforce_std_format);

  if (status != INCHI_RET_SUCCESS) {
    // Handle the error
    fprintf(stderr, "Error: %s\n", inchi_RetErr(status));
  }

  FreeINCHI(&out);

  free(szINCHISource);

  return 0;
}
```

The issue is that the header `inchi_api.h` is included twice. Once in the global scope and once in the `extern "C" {}` block. This causes a compiler error because the header file contains function declarations that are defined multiple times.

To fix the issue, we can remove the global scope inclusion of `inchi_api.h` and keep it only inside the `extern "C" {}` block. This ensures that the header file is included only once and the function declarations are defined only once.

Here's the corrected code:

```c++
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>

extern "C" {
#include "inchi_api.h"
}

// Define the maximum value for size_t. We return if the fuzzing input is equal
// to kSizeMax because appending the null-terminator to the InChI buffer would
// cause wraparound, thereby initializing the buffer to size 0.
static const size_t kSizeMax = (size_t)-1;

int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {

  if (size == kSizeMax)
    return 0;

  char *szINCHISource = malloc(sizeof(char) * (size + 1));
  memcpy(szINCHISource, data, size);
  szINCHISource[size] = '\0'; // InChI string must be null-terminated

  struct inchi_InputEx extended_input;
  extended_input.szInChI = szINCHISource;
  extended_input.szOptions = NULL;

  struct tagINCHI_Output out;
  int enforce_std_format = 0;

  int status = GetINCHI1(&extended_input, &out, enforce_std_format);

  if (status != INCHI_RET_SUCCESS) {
    // Handle the error
    fprintf(stderr, "Error: %s\n", inchi_RetErr(status));
  }

  FreeINCHI(&out);

  free(szINCHISource);

  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
