Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <assert.h>
#include <getopt.h>
#include <inttypes.h>
#include <stdio.h>
#include <string.h>
#include <strings.h>
#include <sys/select.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

#include <openssl/engine.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/pem.h>

#include "picotls.h"
#include "picotls/openssl.h"
#include "util.h"

extern "C" {
#include "picotls/openssl/picotls_openssl.h"
}

void deterministic_random_bytes(void *buf, size_t len) {
  for (int i = 0; i < len; i++) {
    ((uint8_t *)buf)[i] = i;
  }
}

int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  ptls_context_t *ctx = ptls_context_new(PTLS_DEFAULT_PSK_KEY_SIZE,
                                          PTLS_DEFAULT_PSK_IDENTITY_SIZE);
  if (!ctx) {
    return -1;
  }
  ptls_context_set_random_bytes_callback(ctx, deterministic_random_bytes);
  ptls_t *tls = ptls_new(ctx, PTLS_CLIENT_MODE);
  if (!tls) {
    ptls_context_free(ctx);
    return -1;
  }

  ptls_buffer_t sendbuf;
  ptls_buffer_init(&sendbuf, data, size);

  /* This is the function that the fuzzer is complaining about. */
  ptls_send(tls, &sendbuf, NULL, PTLS_SEND_TYPE_APPLICATION_DATA);
  ptls_send(tls, NULL, NULL, 0);

  ptls_buffer_dispose(&sendbuf);
  ptls_free(tls);
  ptls_context_free(ctx);
  return 0;
}
```

The corrected code:

1. Added the missing `PTLS_SEND_TYPE_APPLICATION_DATA` argument to the first call to `ptls_send`. This argument specifies the type of data being sent, which is required by the function.
2. Changed the second call to `ptls_send` to `ptls_send(tls, NULL, NULL, 0);`. This call is used to send a close notify alert to the server, indicating that the client is closing the connection. The previous code was missing this call, which is required for a clean shutdown of the TLS connection.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
