Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <iostream>

#include "src/terminal/emulator.h"

extern "C" {
#include "src/fuzzer/fuzzed_data_provider.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  using namespace std;

  Terminal::Emulator emulator;
  FuzzedDataProvider stream(data, size);
  const size_t s_width = stream.ConsumeIntegralInRange<size_t>(0, 1000);
  const size_t s_height = stream.ConsumeIntegralInRange<size_t>(0, 1000);
  emulator.resize(s_width, s_height);

  return 0;
}
```

The original code has the following issues:
1. The `FuzzedDataProvider` class is not included in the code.
2. The `Terminal::Emulator` class is not included in the code.

To fix the issues, we need to include the necessary headers.

1. For the `FuzzedDataProvider` class, we need to include the following header:
```c++
#include "src/fuzzer/fuzzed_data_provider.h"
```

2. For the `Terminal::Emulator` class, we need to include the following header:
```c++
#include "src/terminal/emulator.h"
```

After including the necessary headers, the code should compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
