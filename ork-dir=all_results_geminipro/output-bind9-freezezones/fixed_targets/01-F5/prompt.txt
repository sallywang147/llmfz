Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>
#include <vector>

extern "C" {
#include "dns.h"
}

extern "C" int freezezones(struct dns_zone *, char *, char *);

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const std::string zone_name = stream.ConsumeRemainingBytesAsString();

  struct dns_zone zone;
  memset(&zone, 0, sizeof(zone));
  zone.name = const_cast<char*>(zone_name.c_str());
  zone.soa = &zone.soa_rec;
  zone.soa_rec.serial = 1;
  zone.soa_rec.rname = const_cast<char*>("ns.example.com.");
  zone.soa_rec.mname = const_cast<char*>("ns.example.com.");
  zone.soa_rec.refresh = 86400;
  zone.soa_rec.retry = 7200;
  zone.soa_rec.expire = 1209600;
  zone.soa_rec.minimum = 3600;

  std::vector<char> uap_buffer(stream.ConsumeIntegralInRange<size_t>(0, 1024));
  char* uap = uap_buffer.data();
  stream.ConsumeBytes(uap, uap_buffer.size());

  std::vector<char> uap_buffer2(stream.ConsumeIntegralInRange<size_t>(0, 1024));
  char* uap2 = uap_buffer2.data();
  stream.ConsumeBytes(uap2, uap_buffer2.size());

  freezezones(&zone, uap, uap2);

  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
