Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>
#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <wchar.h>  // Include the header file that defines mk_wcswidth_cjk

extern "C" {
#include <locale.h>  // Include the header file that defines setlocale
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  std::vector<int> pwcs(size);
  FuzzedDataProvider provider(data, size);
  for (size_t i = 0; i < size; i++) {
    pwcs[i] = provider.ConsumeIntegral<int>();
  }
  setlocale(LC_ALL, "en_US.UTF-8");  // Set the locale to "en_US.UTF-8" to enable UTF-8 support
  mk_wcswidth_cjk(pwcs.data(), size);
  return 0;
}
```

In this fixed code:

1. Included the `<locale.h>` header file to enable the use of the `setlocale` function.

2. Added `extern "C" {}` around the `#include <locale.h>` directive to ensure that the `setlocale` function is properly linked.

3. Called `setlocale(LC_ALL, "en_US.UTF-8")` to set the locale to "en_US.UTF-8". This is necessary to enable UTF-8 support in the `mk_wcswidth_cjk` function.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
