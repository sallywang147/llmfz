The build error is:
```
error: undefined reference to 'fuzzing::datasource::Base::Get<std::vector<std::string> >(std::vector<std::string>*, std::exception*, size_t)'
```

This error means that the linker cannot find the definition of the function `fuzzing::datasource::Base::Get<std::vector<std::string> >(std::vector<std::string>*, std::exception*, size_t)`. This is because the function is declared in the header file `fuzzer/FuzzedDataProvider.h`, but it is not defined in any of the source files.

To fix this error, you need to add the definition of the function to one of the source files. For example, you could add the following code to the file `fuzzer/FuzzedDataProvider.cc`:

```
namespace fuzzing {
namespace datasource {

template <typename T>
void Base::Get(T* this_, std::exception* id, size_t) {
  FuzzedDataProvider stream(id->what(), strlen(id->what()));
  *this_ = stream.ConsumeRemainingBytes<T>();
}

}  // namespace datasource
}  // namespace fuzzing
```

Once you have added the definition of the function, you should be able to build the code without errors.

Here is the complete fixed code:

```
#include <fuzzer/FuzzedDataProvider.h>

#include <vector>

namespace fuzzing {
namespace datasource {
class Base {
 public:
  template <typename T>
  void Get(T* this_, std::exception* id, size_t) {
    FuzzedDataProvider stream(id->what(), strlen(id->what()));
    *this_ = stream.ConsumeRemainingBytes<T>();
  }
};
}  // namespace datasource
}  // namespace fuzzing

namespace fuzzing {
namespace datasource {

template <>
void Base::Get<std::vector<std::string> >(std::vector<std::string>* this_, std::exception* id, size_t) {
  FuzzedDataProvider stream(id->what(), strlen(id->what()));
  *this_ = stream.ConsumeRemainingBytes<std::vector<std::string> >();
}

}  // namespace datasource
}  // namespace fuzzing

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  std::exception exception;
  fuzzing::datasource::Base base;
  std::vector<std::string> strings;
  base.Get<std::vector<std::string>>(&strings, &exception, size);
  return 0;
}
```