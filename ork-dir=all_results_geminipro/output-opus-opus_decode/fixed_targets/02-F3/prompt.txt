Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <string>
#include <vector>

#include "opus/opus.h"
#include "fuzzer/FuzzedDataProvider.h"

extern "C" {
#include "opus/opus_defines.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  const int channels = stream.ConsumeIntegralInRange<int>(1, 2);
  const int sample_rate = stream.ConsumeIntegralInRange<int>(8000, 48000);
  const int frame_size = stream.ConsumeIntegralInRange<int>(120, 960);
  const int decode_fec = stream.ConsumeBool();

  OpusDecoder* decoder = opus_decoder_create(sample_rate, channels, &stream.ConsumeIntegral<int>());
  if (decoder == nullptr) {
    return 0;
  }

  const size_t data_size = stream.ConsumeRemainingBytes<uint8_t>().size();
  char* data_ptr = reinterpret_cast<char*>(stream.ConsumeRemainingBytes<uint8_t>().data());

  std::vector<int16_t> pcm(frame_size * channels);
  int status = opus_decode(decoder, data_ptr, data_size, pcm.data(), frame_size, decode_fec);
  opus_decoder_destroy(decoder);

  return 0;
}
```

The error message indicates that the `opus_defines.h` header is missing. To fix this, we need to include this header file in the code. We can do this by wrapping the `#include` directive with `extern "C" {}` to ensure that the C++ compiler does not mangle the function names in the header file.

The corrected code is shown above.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
