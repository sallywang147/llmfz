Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

extern "C" {
#include "yaml.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const std::string data_string = stream.ConsumeRemainingBytesAsString();
  char* data_ptr = const_cast<char*>(data_string.c_str());

  // Initialize the YAML parser.
  yaml_parser_t parser;
  if (!yaml_parser_initialize(&parser)) {
    return 0;
  }

  // Set the input buffer.
  yaml_parser_set_input_string(&parser, data_ptr, data_string.size());

  // Allocate a buffer to store the parsed YAML document.
  std::vector<char> buffer(4096);

  // Initialize the file read handler.
  size_t size_read = 0;
  int yaml_file_read_handler(void* data, unsigned char* buffer, size_t size, size_t* size_read) {
    if (size_read >= data_string.size()) {
      return 1;  // EOF
    }
    memcpy(buffer, data_ptr + size_read, size);
    *size_read += size;
    return 0;
  }

  // Set the file read handler.
  yaml_parser_set_input(&parser, yaml_file_read_handler, &size_read);

  // Parse the YAML document.
  int done = 0;
  while (!done) {
    yaml_event_t event;
    if (!yaml_parser_parse(&parser, &event)) {
      break;
    }
    switch (event.type) {
      case YAML_STREAM_START_EVENT:
        break;
      case YAML_STREAM_END_EVENT:
        done = 1;
        break;
      case YAML_DOCUMENT_START_EVENT:
        break;
      case YAML_DOCUMENT_END_EVENT:
        break;
      case YAML_ALIAS_EVENT:
        break;
      case YAML_SCALAR_EVENT:
        break;
      case YAML_SEQUENCE_START_EVENT:
        break;
      case YAML_SEQUENCE_END_EVENT:
        break;
      case YAML_MAPPING_START_EVENT:
        break;
      case YAML_MAPPING_END_EVENT:
        break;
    }
    yaml_event_delete(&event);
  }

  // Clean up the YAML parser.
  yaml_parser_delete(&parser);

  return 0;
}
```

Changes made:

1. Changed the first parameter of `yaml_file_read_handler` from `char*` to `void*` to match the prototype of `yaml_parser_set_input`.

2. Wrapped the `#include "yaml.h"` directive with `extern "C" {}` to avoid the "undefined reference to" error.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
