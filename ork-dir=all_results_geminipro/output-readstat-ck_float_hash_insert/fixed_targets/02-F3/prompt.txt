Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stdlib.h>
#include <time.h>

extern "C" {
#include <ck_hash.h>
}

#include "fuzz_format.h"

int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
  ck_hash_table_t *table = ck_hash_init(CK_HASH_MODE_DEFAULT, ck_float_hash, ck_float_compare, ck_null_hash, NULL);
  if (table == NULL) {
    return 0;
  }

  FuzzedDataProvider provider(Data, Size);
  while (provider.remaining_bytes() > 0) {
    float key = provider.ConsumeFloatingPoint<float>();
    size_t value_size = provider.ConsumeIntegralInRange<size_t>(0, 1024);
    char *value = (char *)malloc(value_size + 1);
    if (value == NULL) {
      return 0;
    }
    provider.ConsumeBytes(value, value_size);
    value[value_size] = '\0';
    ck_hash_insert(table, &key, value);
    free(value);
  }

  ck_hash_destroy(table);

  return 0;
}
```

Changes made:

1. Changed `ck_float_hash_insert(key, value, table);` to `ck_hash_insert(table, &key, value);`. This is because `ck_hash_insert` takes a pointer to the key as its first argument, not the key itself.
2. Removed `ck_null_hash` from the call to `ck_hash_init`. This is because `ck_null_hash` is not a valid hash function.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
