Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <string>

#include "simdutf/internal/detect_best_supported_implementation_on_first_use.h"

extern "C" {
#include "simdutf/public/simdutf.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  simdutf::internal::unsupported_implementation unsupported_implementation;
  const std::string* description =
      simdutf::internal::detect_best_supported_implementation_on_first_use::
          description(&unsupported_implementation);
  (void)description;  // Avoid unused variable warning.
  return 0;
}
```

The issue with the original code was that the `#include` directive for `simdutf/public/simdutf.h` was not wrapped with `extern "C" {}`. This caused the linker to be unable to find the definition of the `LLVMFuzzerTestOneInput` function, which is declared in the `simdutf` library.

To fix the issue, we wrapped the `#include` directive for `simdutf/public/simdutf.h` with `extern "C" {}`. This tells the compiler to treat the symbols defined in that header file as C symbols, which allows the linker to find them.

Here is the corrected code:

```c++
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <string>

#include "simdutf/internal/detect_best_supported_implementation_on_first_use.h"

extern "C" {
#include "simdutf/public/simdutf.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  simdutf::internal::unsupported_implementation unsupported_implementation;
  const std::string* description =
      simdutf::internal::detect_best_supported_implementation_on_first_use::
          description(&unsupported_implementation);
  (void)description;  // Avoid unused variable warning.
  return 0;
}
```

With this change, the code should compile and link successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
