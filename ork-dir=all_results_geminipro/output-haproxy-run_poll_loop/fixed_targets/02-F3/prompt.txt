Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>

#include "poll_loop.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);
  // Initialize the poll loop.
  poll_loop_init();

  // Add a random number of poll items to the poll loop.
  int num_poll_items = provider.ConsumeIntegralInRange<int>(0, 100);
  for (int i = 0; i < num_poll_items; i++) {
    int fd = provider.ConsumeIntegralInRange<int>(0, 100);
    short events = provider.ConsumeIntegralInRange<short>(0, POLLIN | POLLOUT | POLLERR);
    poll_loop_add_fd(fd, events);
  }

  // Run the poll loop for a random amount of time.
  int timeout = provider.ConsumeIntegralInRange<int>(0, 100);
  poll_loop_run(timeout);

  // Clean up the poll loop.
  poll_loop_cleanup();

  // Call the run_poll_loop function.
  run_poll_loop();

  return 0;
}

void run_poll_loop() {
  // This function is called to run the poll loop.
  // It is defined here to avoid linking errors.
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
