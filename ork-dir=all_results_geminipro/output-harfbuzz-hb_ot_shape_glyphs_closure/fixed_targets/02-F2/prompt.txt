Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <vector>

#include "hb.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  hb_font_t* font = hb_font_create();
  hb_buffer_t* buffer = hb_buffer_create();
  hb_set_t* glyphs = hb_set_create();

  // Generate random text.
  const size_t text_size = stream.ConsumeIntegralInRange<size_t>(0, 1024);
  std::vector<char32_t> text;
  for (size_t i = 0; i < text_size; i++) {
    text.push_back(stream.ConsumeIntegralInRange<char32_t>(0, 0x10FFFF));
  }
  hb_buffer_add_utf32(buffer, text.data(), text.size(), 0, text.size());

  // Generate random features.
  const size_t num_features = stream.ConsumeIntegralInRange<size_t>(0, 10);
  std::vector<hb_feature_t> features;
  for (size_t i = 0; i < num_features; i++) {
    hb_feature_t feature;
    feature.tag = stream.ConsumeIntegralInRange<uint32_t>(0, 0xFFFFFFFF);
    feature.value = stream.ConsumeIntegralInRange<int32_t>(-1, 1);
    feature.start = stream.ConsumeIntegralInRange<unsigned int>(0, text_size);
    feature.end = stream.ConsumeIntegralInRange<unsigned int>(feature.start, text_size);
    features.push_back(feature);
  }

  // Generate random glyphs.
  const size_t num_glyphs = stream.ConsumeIntegralInRange<size_t>(0, 1024);
  for (size_t i = 0; i < num_glyphs; i++) {
    hb_set_add(glyphs, stream.ConsumeIntegralInRange<uint32_t>(0, 0xFFFFFFFF));
  }

  // Call the function to be fuzzed.
  hb_ot_shape_glyphs_closure(font, buffer, features.data(), features.size(), glyphs);

  // Clean up.
  hb_font_destroy(font);
  hb_buffer_destroy(buffer);
  hb_set_destroy(glyphs);

  return 0;
}
```
The original code had the following issues:

1. The `hb.h` header file was not wrapped in `extern "C" {}`. This caused the linker to complain about undefined references to the HarfBuzz functions.

2. The `hb_ot_shape_glyphs_closure` function was missing its `hb_ot_shape_glyphs_closure` declaration. This caused the compiler to complain about an undeclared function.

The fixed code wraps the `hb.h` header file in `extern "C" {}` and includes the `hb_ot_shape_glyphs_closure` declaration. This fixes the linker and compiler errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
