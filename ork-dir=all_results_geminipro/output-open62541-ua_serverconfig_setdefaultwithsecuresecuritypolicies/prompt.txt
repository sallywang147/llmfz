<system>
You are a security testing engineer who wants to write a C++ program to execute all lines in a given function by defining and initializing its parameters in a suitable way before fuzzing the function through <code>LLVMFuzzerTestOneInput</code>.

Carefully study the function signature and its parameters, then follow the example problems and solutions to answer the final problem. YOU MUST call the function to fuzz in the solution.

Try as many variations of these inputs as possible. Do not use a random number generator such as <code>rand()</code>.

Use <code>FuzzedDataProvider</code> to generate these inputs. You MUST declare it in <code>LLVMFuzzerTestOneInput</code>, like this:
<code>
FuzzedDataProvider stream(data, size);
</code>

Include <code>#include <fuzzer/FuzzedDataProvider.h></code> in the solution.

This code shows example of using it:
<code>
// Extract integral values
int int_arg = stream.ConsumeIntegral<int>();
int int_arg_in_range = stream.ConsumeIntegralInRange(-100, 100);
bool bool_arg = stream.ConsumeBool();

// Extract floating point values
float probability = stream.ConsumeProbability();
double double_arg = stream.ConsumeFloatingPoint<double>();
double double_arg_in_range = stream.ConsumeFloatingPointInRange(-1.0, 1.0);

// Extract value from predefined set, such as enum or array
EnumType enum = stream.ConsumeEnum<EnumType>();
int valid_values = stream.PickValueInArray({FLAG_1, FLAG_2, FLAG_3});

// Extract an array of bytes as a vector. You MUST call <code>.data()</code> to use result as pointer.
std::vector<uint8_t> bytes = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange(0, max_size));
void *data_ptr = bytes.data();
std::vector<uint8_t> bytes2 = stream.ConsumeBytes<uint8_t>(requested_size);
void *data2_ptr = bytes2.data();

// Extract a string. You MUST use <code>.c_str()</code> to use result as pointer
std::string str = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange(0, max_size));
char *ptr = str.c_str();
std::string str2 = stream.ConsumeBytesAsString(requested_size);
char *ptr2 = str2.c_str();
std::string str3 = stream.ConsumeRandomLengthString();
char *ptr3 = str3.c_str();

// Extract to user defined object
struct_type_t obj;
size_t consumed = stream.ConsumeData(&obj, sizeof(obj));
</code>

There MUST be AT MOST ONE call to <code>ConsumeRemainingBytes</code> to consume remaining input!
<code>
FuzzedDataProvider stream(data, size);

std::vector<uint8_t> bytes3 = stream.ConsumeRemainingBytes();
void *data3_ptr = bytes3.data();
</code>

All variables used MUST be declared and initialized. Carefully make sure that the variable and argument types in your code match and compiles successfully. Add type casts to make types match.

Do not create new variables with the same names as existing variables.
WRONG:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  void* data = Foo();
}
</code>

EXTREMELY IMPORTANT: If you write code using <code>goto</code>, you MUST MUST also declare all variables BEFORE the <code>goto</code>. Never introduce new variables after the <code>goto</code>.
WRONG:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  int a = bar();
  if (!some_function()) goto EXIT;
  Foo b = target_function(data, size);
  int c = another_func();
EXIT:
  return 0;
}
</code>

CORRECT:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  int a = bar();
  Foo b;
  int c;

  if (!some_function()) goto EXIT;
  b = target_function(data, size);
  c = another_func()
EXIT:
  return 0;
}
</code>

If an example provided for the same library includes a unique header file, then it must be included in the solution as well.
</system>

<task>
Your goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:
<function header>
void UA_ServerConfig_clean(struct UA_ServerConfig * config)
</function header>
</task>

<solution>

#include "custom_memory_manager.h"

#include <arpa/inet.h>
#include <errno.h>
#include <pthread.h>
#include <stdlib.h>
#include <sys/socket.h>

#include <open62541/plugin/log_stdout.h>
#include <open62541/server_config_default.h>
#include <open62541/types.h>

#include "ua_server_internal.h"

#include "testing_networklayers.h"

#define RECEIVE_BUFFER_SIZE 65535
#define SERVER_PORT 4840

volatile bool running = true;

static void *serverLoop(void *server_ptr) {
  UA_Server *server = (UA_Server *)server_ptr;

  while (running) {
    UA_Server_run_iterate(server, false);
  }
  return NULL;
}

/*
** Main entry point.  The fuzzer invokes this function with each
** fuzzed input.
*/
extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {

  // Allow the fuzzer to at least create all the necessary structs before limiting memory.
  // Otherwise fuzzing is useless
  UA_memoryManager_setLimit((unsigned long long)-1);

  /* less debug output */
  UA_ServerConfig initialConfig;
  memset(&initialConfig, 0, sizeof(UA_ServerConfig));
  UA_StatusCode retval = UA_ServerConfig_setMinimal(&initialConfig, SERVER_PORT, NULL);
  initialConfig.allowEmptyVariables = UA_RULEHANDLING_ACCEPT;
  if (retval != UA_STATUSCODE_GOOD) {
    UA_ServerConfig_clean(&initialConfig);
    UA_LOG_FATAL(UA_Log_Stdout, UA_LOGCATEGORY_SERVER, "Could not generate the server config");
    return EXIT_FAILURE;
  }

  UA_Server *server = UA_Server_newWithConfig(&initialConfig);
  if (!server) {
    UA_LOG_FATAL(UA_Log_Stdout, UA_LOGCATEGORY_SERVER, "Could not create server instance using UA_Server_new");
    return EXIT_FAILURE;
  }

  UA_ServerConfig *config = UA_Server_getConfig(server);

  // Enable the mDNS announce and response functionality
  config->mdnsEnabled = true;
  config->mdnsConfig.mdnsServerName = UA_String_fromChars("Sample Multicast Server");

  retval = UA_Server_run_startup(server);
  if (retval != UA_STATUSCODE_GOOD) {
    UA_LOG_FATAL(UA_Log_Stdout, UA_LOGCATEGORY_SERVER, "Could not run UA_Server_run_startup. %s", UA_StatusCode_name(retval));
    UA_Server_delete(server);
    return EXIT_FAILURE;
  }

  if (!UA_memoryManager_setLimitFromLast4Bytes(data, size)) {
    UA_Server_run_shutdown(server);
    UA_Server_delete(server);
    return EXIT_SUCCESS;
  }
  size -= 4;

  // Iterate once to initialize the TCP connection. Otherwise the connect below may come before the server is up.
  UA_Server_run_iterate(server, true);

  pthread_t serverThread;
  int rc = pthread_create(&serverThread, NULL, serverLoop, (void *)server);
  if (rc) {

    UA_LOG_FATAL(UA_Log_Stdout, UA_LOGCATEGORY_SERVER, "return code from pthread_create() is %d", rc);

    UA_Server_run_shutdown(server);
    UA_Server_delete(server);
    return -1;
  }

  int retCode = EXIT_SUCCESS;

  int sockfd = 0;
  {
    // create a client and write to localhost TCP server

    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
      UA_LOG_FATAL(UA_Log_Stdout, UA_LOGCATEGORY_CLIENT, "Could not create socket");
      retCode = EXIT_FAILURE;
    } else {

      struct sockaddr_in serv_addr;
      serv_addr.sin_family = AF_INET;
      serv_addr.sin_port = htons(SERVER_PORT);
      serv_addr.sin_addr.s_addr = inet_addr("127.0.0.1");

      int status = connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr));
      if (status >= 0) {
        if (write(sockfd, data, size) != size) {
          UA_LOG_FATAL(UA_Log_Stdout, UA_LOGCATEGORY_CLIENT, "Did not write %lu bytes", (long unsigned)size);
          retCode = EXIT_FAILURE;
        }
      } else {
        UA_LOG_FATAL(UA_Log_Stdout, UA_LOGCATEGORY_CLIENT, "Could not connect to server: %s", strerror(errno));
        retCode = EXIT_FAILURE;
      }
    }
  }
  running = false;
  void *status;
  pthread_join(serverThread, &status);

  // Process any remaining data. Just repeat a few times to empty all the buffered bytes
  for (size_t i = 0; i < 5; i++) {
    UA_Server_run_iterate(server, false);
  }
  close(sockfd);

  UA_Server_run_shutdown(server);
  UA_Server_delete(server);

  return retCode;
}

</solution>


<task>
Your goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:
<function header>
int UA_ServerConfig_setDefaultWithSecureSecurityPolicies(struct UA_ServerConfig * conf, short portNumber, struct UA_String * certificate, struct UA_String * privateKey, struct UA_String * trustList, size_t trustListSize, struct UA_String * issuerList, size_t issuerListSize, struct UA_String * revocationList, size_t revocationListSize)
</function header>
</task>
You MUST call <code>
int UA_ServerConfig_setDefaultWithSecureSecurityPolicies(struct UA_ServerConfig * conf, short portNumber, struct UA_String * certificate, struct UA_String * privateKey, struct UA_String * trustList, size_t trustListSize, struct UA_String * issuerList, size_t issuerListSize, struct UA_String * revocationList, size_t revocationListSize)
</code> in your solution!

<solution>
