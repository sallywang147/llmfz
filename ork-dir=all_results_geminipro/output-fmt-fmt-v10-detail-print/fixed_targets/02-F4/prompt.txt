Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <cstdio>
#include <cstring>

#include "fuzzer-common.h"

extern "C" {
#include "fmt/format.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  if (size <= 1)
    return 0;

  char *text = as_chars(data);
  size_t len = size - 1;

  // Make sure the input is null-terminated.
  text[len] = '\0';

  // Use a fixed location for the FILE pointer.
  static FILE *f = fopen(fixed_path, "w");
  if (f == nullptr)
    return 0;
  fmt::print(f, text, len);
  return 0;
}
```

The following changes were made to the code:

1. The `#include <fmt/format.h>` directive was wrapped with `extern "C" {}` to ensure that the C++ compiler does not mangle the function names in the `fmt` namespace.
2. The `fmt::print()` function was added to the `extern "C"` block, which is necessary for the LLVMFuzzerTestOneInput() function to be recognized by the fuzzer.

With these changes, the code should now build and run successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
