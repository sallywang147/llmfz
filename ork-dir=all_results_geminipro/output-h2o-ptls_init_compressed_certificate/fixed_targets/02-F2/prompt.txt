Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>

#include "common/h2o.h"
#include "common/h2o_iovec.h"
#include "common/ptls.h"

extern "C" {
#include "common/ptls_emit_compressed_certificate.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  struct st_ptls_emit_compressed_certificate_t* cert =
      static_cast<struct st_ptls_emit_compressed_certificate_t*>(
          malloc(sizeof(struct st_ptls_emit_compressed_certificate_t)));
  struct st_h2o_iovec_t* iovec = static_cast<struct st_h2o_iovec_t*>(
      malloc(sizeof(struct st_h2o_iovec_t)));
  const size_t iovec_len = stream.ConsumeIntegralInRange<size_t>(0, 1024);
  iovec->len = iovec_len;
  iovec->base = malloc(iovec_len);
  const size_t cert_len = stream.ConsumeIntegralInRange<size_t>(0, 1024);
  char* cert_data = static_cast<char*>(malloc(cert_len));
  stream.ConsumeBytes(cert_data, cert_len);
  int ret = ptls_init_compressed_certificate(cert, iovec, iovec_len, cert_data,
                                             cert_len);
  free(iovec->base);
  free(iovec);
  free(cert);
  free(cert_data);
  return ret;
}
```
In this case, the error is caused by the missing header file `common/ptls_emit_compressed_certificate.h`. This header file contains the declaration of the `ptls_init_compressed_certificate` function, which is used in the code.

To fix the issue, we need to include the missing header file. Since the header file is in the same directory as the other header files, we can include it using the following line:

```c++
#include "common/ptls_emit_compressed_certificate.h"
```

We also need to wrap the `#include` directive with `extern "C" {}` because the header file contains C code, and we are compiling the code as C++.

After adding the missing header file, the code should compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
