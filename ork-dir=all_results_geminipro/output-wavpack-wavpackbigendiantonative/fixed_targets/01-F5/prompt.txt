Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>
#include <wavpack/wavpack.h>

#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <string>

extern "C" {
#include <wavpack/wavpack.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const size_t data_size = stream.ConsumeIntegralInRange<size_t>(0, size);
  const std::string format = stream.ConsumeRemainingBytesAsString();
  std::vector<char> data_buffer(data_size);
  stream.ConsumeBytes(data_buffer.data(), data_size);

  WavpackBigEndianToNative(data_buffer.data(), const_cast<char*>(format.c_str()));
  return 0;
}
```

The issue with the original code is that the `WavpackBigEndianToNative` function is declared in the `wavpack.h` header, but it is not defined in the code. To fix this, the `wavpack.c` file, which contains the definition of the function, needs to be included.

The corrected code includes the `wavpack.c` file using the `extern "C"` directive, which is necessary to ensure that the function is exported with the correct name and calling convention.

The corrected code should compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
