Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "tcp_connection.h"

extern "C" {
#include "tcp_connection.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  struct tcp_connection con;
  int bytes_read;
  tcp_read_req(&con, &bytes_read);
  return 0;
}
```

The original code has the following issues:

1. The header file `tcp_connection.h` is not wrapped with `extern "C" {}`. This causes the linker to not be able to find the definition of the function `tcp_read_req`.
2. The function `tcp_read_req` is not declared in the header file `tcp_connection.h`. This means that the compiler will not know the type of the function and will not be able to generate the correct code.

The fixed code wraps the header file `tcp_connection.h` with `extern "C" {}` and declares the function `tcp_read_req` in the header file. This allows the linker to find the definition of the function and the compiler to generate the correct code.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
