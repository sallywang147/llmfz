Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <fuzzer/FuzzedDataProvider.h>

struct parse {
  int a;
  int b;
  int c;
};

extern "C" {
#include <fuzzer/FuzzedDataProvider.h>

void p_bre(struct parse* p, int x, int y) {
  p->a = x;
  p->b = y;
  p->c = x + y;
}
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  struct parse p;
  p.a = stream.ConsumeIntegral<int>();
  p.b = stream.ConsumeIntegral<int>();
  p_bre(&p, p.a, p.b);
  return 0;
}
```

The original code had the following issues:

1. The `#include <fuzzer/FuzzedDataProvider.h>` directive was included twice, once inside the `extern "C" {}` block and once outside of it. This is not necessary and can lead to errors.
2. The `p_bre` function was declared as `void p_bre(struct parse* p, int x, int y);` instead of `extern "C" void p_bre(struct parse* p, int x, int y);`. This is necessary because the function is being called from C code, and the C compiler needs to know that the function is defined in C.

The fixed code includes the `#include <fuzzer/FuzzedDataProvider.h>` directive only once, inside the `extern "C" {}` block, and declares the `p_bre` function as `extern "C" void p_bre(struct parse* p, int x, int y);`. This fixes the errors and allows the code to compile and run correctly.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
