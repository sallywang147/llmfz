Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstring>
#include <vector>

extern "C" {
  #include <webp/encode.h>
}

extern "C" size_t LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  const size_t width = stream.ConsumeIntegralInRange<size_t>(1, 1000);
  const size_t height = stream.ConsumeIntegralInRange<size_t>(1, 1000);
  const size_t bytes_per_sample = stream.ConsumeIntegralInRange<size_t>(1, 4);
  const size_t input_size = width * height * bytes_per_sample;
  std::vector<uint8_t> input_buffer(input_size);
  stream.ConsumeBytes<uint8_t>(input_buffer.data(), input_size);

  char* output_buffer = nullptr;
  const size_t output_size = WebPEncodeLosslessRGBA(
      reinterpret_cast<char*>(input_buffer.data()), width, height, bytes_per_sample,
      &output_buffer);
  free(output_buffer);
  return output_size;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
