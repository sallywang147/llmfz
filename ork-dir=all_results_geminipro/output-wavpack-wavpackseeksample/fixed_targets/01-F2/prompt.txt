Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <vector>

extern "C" {
#include "wavpack.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  WavpackContext* wpc = WavpackOpenFileInput(nullptr, nullptr, 0, 0, 0);
  if (wpc == nullptr) {
    return 0;
  }

  const int sample = stream.ConsumeIntegral<int>();
  WavpackSeekSample(wpc, sample);

  WavpackCloseFile(wpc);
  return 0;
}
```

The build issue is caused by the missing declaration of the `WavpackOpenFileInput`, `WavpackSeekSample`, and `WavpackCloseFile` functions. To fix this issue, we need to wrap the `#include` directive for the `wavpack.h` header with `extern "C" {}`. This will ensure that the function declarations are properly exported and can be linked to by the fuzzer.

Here is the corrected code:

```c++
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <vector>

extern "C" {
#include "wavpack.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  WavpackContext* wpc = WavpackOpenFileInput(nullptr, nullptr, 0, 0, 0);
  if (wpc == nullptr) {
    return 0;
  }

  const int sample = stream.ConsumeIntegral<int>();
  WavpackSeekSample(wpc, sample);

  WavpackCloseFile(wpc);
  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
