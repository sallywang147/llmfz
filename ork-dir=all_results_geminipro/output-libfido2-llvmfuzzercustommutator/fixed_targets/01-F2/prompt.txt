Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <string>

extern "C" size_t LLVMFuzzerCustomMutator(char* data, size_t size, size_t max_size,
                                          int seed) {
  FuzzedDataProvider stream(data, size);
  const size_t new_size =
      stream.ConsumeIntegralInRange<size_t>(0, std::min(max_size, size));
  const std::string new_data = stream.ConsumeRemainingBytesAsString();
  if (new_data.size() != new_size) {
    return 0;
  }
  memcpy(data, new_data.c_str(), new_size);
  return new_size;
}
```

The original code had no issues, so no changes were needed.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
