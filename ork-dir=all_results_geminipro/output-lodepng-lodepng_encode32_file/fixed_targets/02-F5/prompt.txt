Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>
#include <vector>

#include "lodepng.h"

extern "C" {
#include <png.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const std::string filename = stream.ConsumeRemainingBytesAsString();
  const std::vector<uint8_t> image = stream.ConsumeRemainingBytes();
  const int width = stream.ConsumeIntegral<int>();
  const int height = stream.ConsumeIntegral<int>();

  // Fix the typo in the function name
  lodepng_encode32_file(filename.c_str(), reinterpret_cast<unsigned char*>(image.data()),
                         width, height);
  return 0;
}
```

The issue in the original code was a typo in the function call `lodepng_encode32_file`. The correct function name is `lodepng_encode32_file`, not `lodepng_encode32_file`. This typo caused the linker to fail to find the function definition, resulting in the build error.

The corrected code above fixes the typo and should build and run successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
