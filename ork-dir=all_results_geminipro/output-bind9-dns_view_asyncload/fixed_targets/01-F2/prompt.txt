Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <string>

#include <fuzzer/FuzzedDataProvider.h>

#include "dns.h"
#include "dns_view.h"

extern "C" {
#include "dns_view_private.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);
  char* arg = provider.ConsumeBytesAsString().c_str();
  dns_view* view = dns_view_create();
  dns_view_asyncload(view, provider.ConsumeBool(), nullptr, arg);
  dns_view_delete(view);
  return 0;
}
```

The original code has the following issues:

1. The header file `dns_view_private.h` is not included. This header file is necessary for the definition of the `dns_view_asyncload` function.
2. The `dns_view_private.h` header file needs to be wrapped with `extern "C" {}` because it contains C++ code. This is necessary to ensure that the C++ code is not mangled by the C compiler.

The fixed code includes the necessary header file and wraps it with `extern "C" {}`. This allows the code to compile and link successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
