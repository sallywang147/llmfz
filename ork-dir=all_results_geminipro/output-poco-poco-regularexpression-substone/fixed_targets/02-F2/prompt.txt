Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

extern "C" {
#include "Poco/RegularExpression.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);
  std::string input = provider.ConsumeRemainingBytesAsString();
  std::string pattern = provider.ConsumeRemainingBytesAsString();
  std::string replacement = provider.ConsumeRemainingBytesAsString();
  Poco::RegularExpression regex(pattern);
  size_t offset = provider.ConsumeIntegralInRange<size_t>(0, input.size());
  regex.substOne(&input, offset, replacement, 0);
  return 0;
}
```

In this case, the error is caused by the use of the Poco library, which is a C++ library that is not compatible with the C interface required by the fuzzer. To fix this, we need to wrap the inclusion of the Poco header with `extern "C" {}` to tell the compiler that the functions and types declared in the header are C-compatible.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
