Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>

#include "b2nd.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const uint8_t slate_width = stream.ConsumeIntegral<uint8_t>();
  const uint8_t slate_height = stream.ConsumeIntegral<uint8_t>();
  struct b2nd_context_s* slate_image = b2nd_new_context(slate_width, slate_height);
  if (slate_image == nullptr) {
    return 0;
  }

  struct b2nd_array_t* slate_array = b2nd_new_array(slate_width, slate_height);
  if (slate_array == nullptr) {
    b2nd_delete_context(slate_image);
    return 0;
  }

  struct b2nd_array_t::b2nd_array_161** slate_array_161 =
      (struct b2nd_array_t::b2nd_array_161**)malloc(
          sizeof(struct b2nd_array_t::b2nd_array_161*));
  if (slate_array_161 == nullptr) {
    b2nd_delete_array(slate_array);
    b2nd_delete_context(slate_image);
    return 0;
  }

  int result = b2nd_copy(slate_image, slate_array, slate_array_161);
  b2nd_delete_array(slate_array);
  b2nd_delete_context(slate_image);
  free(slate_array_161);

  return result;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
