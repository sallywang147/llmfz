Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <vector>

extern "C" {
#include "roaring/roaring.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const size_t bitmap_size = stream.ConsumeIntegralInRange<size_t>(0, 10000);
  std::vector<uint32_t> bitmap_data(bitmap_size);
  stream.ConsumeData(bitmap_data.data(), bitmap_size * sizeof(uint32_t));

  roaring_bitmap_t* bitmap = roaring_bitmap_create();
  for (const uint32_t value : bitmap_data) {
    roaring_bitmap_add(bitmap, value);
  }

  const size_t bitmap2_size = stream.ConsumeIntegralInRange<size_t>(0, 10000);
  std::vector<uint32_t> bitmap2_data(bitmap2_size);
  stream.ConsumeData(bitmap2_data.data(), bitmap2_size * sizeof(uint32_t));

  roaring_bitmap_t* bitmap2 = roaring_bitmap_create();
  for (const uint32_t value : bitmap2_data) {
    roaring_bitmap_add(bitmap2, value);
  }

  roaring_bitmap_lazy_xor(bitmap, bitmap2);  // Fix: Use roaring_bitmap_lazy_xor instead of roaring_bitmap_lazy_xor_inplace

  roaring_bitmap_free(bitmap);
  roaring_bitmap_free(bitmap2);

  return 0;
}
```

The issue in the original code was that it used the function `roaring_bitmap_lazy_xor_inplace` which is not defined in the `roaring` library. To fix this, we replaced it with the correct function `roaring_bitmap_lazy_xor`.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
