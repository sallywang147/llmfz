```c++
#include <fuzzer/FuzzedDataProvider.h>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>
#include <hb-shape.h>
#include <hb.h>

extern "C" {
int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const size_t anon_size = stream.ConsumeIntegral<size_t>();
  uint8_t* anon_data = stream.ConsumeBytes<uint8_t>(anon_size);
  anon* f = reinterpret_cast<anon*>(anon_data);

  const double a = stream.ConsumeFloatingPoint<double>();
  const double b = stream.ConsumeFloatingPoint<double>();
  const double epsilon = stream.ConsumeFloatingPoint<double>();
  const double min_y = stream.ConsumeFloatingPoint<double>();
  const double max_y = stream.ConsumeFloatingPoint<double>();

  double ya, yb, y;
  double result = solve_itp<hb_shape_justify::$_3>(f, a, b, epsilon, min_y, max_y, &ya, &yb, &y);
  free(anon_data);
  return 0;
}
}
```