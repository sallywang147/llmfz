Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

extern "C" {
#include "pffft.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  static bool initialized = false;
  if (!initialized) {
    pffft_init();
    initialized = true;
  }

  FuzzedDataProvider provider(data, size);

  const size_t fft_size = provider.ConsumeIntegralInRange<size_t>(
      1, 1 << 20);
  const size_t number_of_bytes = fft_size * sizeof(float);

  std::vector<float> input_buffer(fft_size);
  std::vector<float> output_buffer(fft_size);

  provider.ConsumeFloatArray(input_buffer.data(), input_buffer.size());

  pffft_transform_ordered(input_buffer.data(), output_buffer.data(), nullptr,
                          PFFFT_FORWARD);
  pffft_transform_ordered(output_buffer.data(), input_buffer.data(), nullptr,
                          PFFFT_BACKWARD);

  validate_pffft_simd();

  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
