Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

extern "C" {
#include "zstd.h"
}

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <vector>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  ZSTD_CCtx* cctx = ZSTD_createCCtx();
  if (cctx == nullptr) {
    return 0;
  }
  const size_t num_sequences = stream.ConsumeIntegral<size_t>();
  std::vector<ZSTD_Sequence> sequences(num_sequences);
  const size_t buffer_size = stream.ConsumeIntegral<size_t>();
  std::vector<char> buffer(buffer_size);
  size_t generated = ZSTD_generateSequences(cctx, sequences.data(),
                                            sequences.size(), buffer.data(),
                                            buffer.size());
  ZSTD_freeCCtx(cctx);
  return 0;
}
```

The issue is that the `zstd.h` header is not wrapped with `extern "C" {}`. This is necessary because the header is written in C and the function `LLVMFuzzerTestOneInput` is written in C++. The `extern "C" {}` wrapper tells the compiler that the function declarations in the header are written in C and should be compiled as such.

To fix the issue, add the `extern "C" {}` wrapper around the `#include "zstd.h"` line:

```c++
#include <fuzzer/FuzzedDataProvider.h>

extern "C" {
#include "zstd.h"
}

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <vector>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  ZSTD_CCtx* cctx = ZSTD_createCCtx();
  if (cctx == nullptr) {
    return 0;
  }
  const size_t num_sequences = stream.ConsumeIntegral<size_t>();
  std::vector<ZSTD_Sequence> sequences(num_sequences);
  const size_t buffer_size = stream.ConsumeIntegral<size_t>();
  std::vector<char> buffer(buffer_size);
  size_t generated = ZSTD_generateSequences(cctx, sequences.data(),
                                            sequences.size(), buffer.data(),
                                            buffer.size());
  ZSTD_freeCCtx(cctx);
  return 0;
}
```

With this change, the code should compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
