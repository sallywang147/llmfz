Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <vector>

extern "C" {
#include "fribidi.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  const size_t num_elements = stream.ConsumeIntegralInRange<size_t>(0, 100);
  std::vector<int32_t> str(num_elements);
  std::vector<int32_t> pbase_dir(num_elements);
  std::vector<int32_t> visual_str(num_elements);
  std::vector<int32_t> positions_L_to_V(num_elements);
  std::vector<int32_t> positions_V_to_L(num_elements);
  std::vector<char> embedding_levels(num_elements);

  for (size_t i = 0; i < num_elements; i++) {
    str[i] = stream.ConsumeIntegral<int32_t>();
    pbase_dir[i] = stream.ConsumeIntegral<int32_t>();
    visual_str[i] = stream.ConsumeIntegral<int32_t>();
    positions_L_to_V[i] = stream.ConsumeIntegral<int32_t>();
    positions_V_to_L[i] = stream.ConsumeIntegral<int32_t>();
    embedding_levels[i] = stream.ConsumeIntegral<char>();
  }

  char result = fribidi_log2vis(str.data(), num_elements, pbase_dir.data(),
                                visual_str.data(), positions_L_to_V.data(),
                                positions_V_to_L.data(), embedding_levels.data());
  if (result != 0) {
    abort();
  }

  return 0;
}
```

The original code had the following issues:

1. The `fribidi.h` header file was included twice, once with and once without the `extern "C"` wrapper. This caused a linker error because the function `fribidi_log2vis` was defined twice.
2. The types of the variables `str`, `pbase_dir`, `visual_str`, `positions_L_to_V`, `positions_V_to_L`, and `embedding_levels` were not specified. This caused a compiler error because the `fribidi_log2vis` function expects these variables to be of a specific type.

The fixed code addresses these issues by:

1. Including the `fribidi.h` header file only once, with the `extern "C"` wrapper. This ensures that the `fribidi_log2vis` function is defined only once.
2. Specifying the types of the variables `str`, `pbase_dir`, `visual_str`, `positions_L_to_V`, `positions_V_to_L`, and `embedding_levels` as `std::vector<int32_t>` and `std::vector<char>`. This ensures that the `fribidi_log2vis` function is called with the correct types of arguments.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
