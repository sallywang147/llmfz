Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>

#include "yaml.h"

extern "C" {
#include "yaml.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  yaml_parser_t parser;
  const int input_size = stream.ConsumeIntegralInRange<int>(0, 1024);
  const std::string input_string = stream.ConsumeRemainingBytesAsString();
  FILE* input_file = fmemopen(const_cast<char*>(input_string.c_str()), input_size,
                             "r");
  if (input_file == nullptr) {
    return 0;
  }
  yaml_parser_initialize(&parser);
  yaml_parser_set_input_file(&parser, input_file);
  yaml_token_t token;
  while (yaml_parser_scan(&parser, &token) != YAML_SCAN_DONE) {
    yaml_token_delete(&token);
  }
  yaml_parser_delete(&parser);
  fclose(input_file);
  return 0;
}
```

The original code had a missing `#include <yaml.h>` directive, which was causing the build error. This has been added to the fixed code.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
