Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

extern "C" {
#include "wgnutls.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  const int fd = stream.ConsumeIntegral<int>();
  const int bufsize = stream.ConsumeIntegral<int>();
  char* buf = new char[bufsize];
  std::string arg = stream.ConsumeRemainingBytesAsString();  // Remove const from the string.
  const double timeout = stream.ConsumeFloatingPoint<double>();

  const int result = wgnutls_peek(fd, buf, bufsize, arg.c_str(), timeout);
  delete[] buf;
  return result;
}
```

The original code has the following issues:

1. The `wgnutls.h` header is not wrapped with `extern "C" {}`. This causes the linker to complain about undefined references to the functions declared in `wgnutls.h`.
2. The `std::string` class is not available in C code. This causes the compiler to complain about undefined references to the `std::string` methods.

To fix these issues, we need to:

1. Wrap the `wgnutls.h` header with `extern "C" {}`. This tells the compiler that the functions declared in `wgnutls.h` are C functions, not C++ functions.
2. Remove the `const` qualifier from the `std::string` variable `arg`. This makes the `std::string` variable compatible with C code.

After making these changes, the code should compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
