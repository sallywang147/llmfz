Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

extern "C" {
#include "gssntlm.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  static bool initialized = false;
  if (!initialized) {
    gssntlm_init();
    initialized = true;
  }

  int ret;
  struct gssntlm_ctx* ctx = gssntlm_ctx_alloc();
  if (ctx == nullptr) {
    return 0;
  }

  struct gssntlm_cred* cred = gssntlm_cred_alloc();
  if (cred == nullptr) {
    gssntlm_ctx_free(ctx);
    return 0;
  }

  struct ntlm_buffer target_info;
  target_info.length = 0;
  target_info.maximum_length = 0;
  target_info.buffer = nullptr;

  FuzzedDataProvider provider(data, size);
  ret = gssntlm_cli_auth(&provider.ConsumeIntegral<int>(), ctx, cred,
                         &target_info, provider.ConsumeIntegral<int>(),
                         nullptr);

  gssntlm_cred_free(cred);
  gssntlm_ctx_free(ctx);
  gssntlm_buffer_free(&target_info);

  return 0;
}
```

1. The build error message is:
```
error: undefined reference to `gssntlm_init'
error: undefined reference to `gssntlm_ctx_alloc'
error: undefined reference to `gssntlm_cred_alloc'
error: undefined reference to `gssntlm_cli_auth'
error: undefined reference to `gssntlm_cred_free'
error: undefined reference to `gssntlm_ctx_free'
error: undefined reference to `gssntlm_buffer_free'
```

2. This means that the linker cannot find the definitions for the functions `gssntlm_init`, `gssntlm_ctx_alloc`, `gssntlm_cred_alloc`, `gssntlm_cli_auth`, `gssntlm_cred_free`, `gssntlm_ctx_free`, and `gssntlm_buffer_free`.

3. To fix this, we need to make sure that the header file `gssntlm.h` is included in the source file, and that the library containing the definitions of these functions is linked with the program.

4. We can do this by adding the following line to the top of the source file:
```
#include "gssntlm.h"
```

5. We also need to make sure that the library containing the definitions of these functions is linked with the program. This can be done by adding the following line to the linker command:
```
-lgssntlm
```

6. After making these changes, the program should build and run successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
