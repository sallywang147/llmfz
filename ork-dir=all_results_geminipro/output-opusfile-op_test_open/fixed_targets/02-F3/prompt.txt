Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "opusfile/config.h"
#include "opusfile/include/opusfile.h"

extern "C" {
#include "opusfile/include/opus.h"
#include "opusfile/include/opus_header.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const std::string filename = stream.ConsumeRemainingBytesAsString();

  OggOpusFile* of = op_open_file(filename.c_str(), &stream);
  if (of == nullptr) {
    return 0;
  }

  op_test_open(of);
  op_free(of);
  return 0;
}
```

The following changes were made to the code:

- Included the `opus_header.h` header file. This header file is necessary for using the `op_test_open` function.
- Wrapped the `#include` directives for the `opus.h` and `opus_header.h` header files with `extern "C" {}`. This is necessary to ensure that the C++ compiler does not mangle the names of the functions and variables defined in these header files.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
