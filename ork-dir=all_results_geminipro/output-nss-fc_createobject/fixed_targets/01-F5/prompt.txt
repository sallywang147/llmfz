Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

extern "C" size_t FC_CreateObject(size_t, struct CK_ATTRIBUTE*, size_t, size_t*);

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);

  size_t object_class = provider.ConsumeIntegralInRange<size_t>(0, 1000);
  size_t attribute_count = provider.ConsumeIntegralInRange<size_t>(0, 100);
  std::vector<CK_ATTRIBUTE> attributes(attribute_count);
  for (auto& attribute : attributes) {
    attribute.type = provider.ConsumeIntegralInRange<CK_ATTRIBUTE_TYPE>(0, 100);
    attribute.pValue = provider.ConsumeBytes<uint8_t>(
        provider.ConsumeIntegralInRange<size_t>(0, 1000));
    attribute.ulValueLen = attribute.pValue.size();
  }
  size_t object_handle;
  FC_CreateObject(object_class, attributes.data(), attribute_count, &object_handle);
  return 0;
}
```

The missing declaration of `CK_ATTRIBUTE` and `CK_ATTRIBUTE_TYPE` caused the build error. To fix the issue, we need to include the necessary header file that defines these types. In this case, we need to include the `pkcs11/pkcs11.h` header file.

The corrected code with the necessary header file included is shown below:

```c++
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

#include <pkcs11/pkcs11.h>

extern "C" size_t FC_CreateObject(size_t, struct CK_ATTRIBUTE*, size_t, size_t*);

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);

  size_t object_class = provider.ConsumeIntegralInRange<size_t>(0, 1000);
  size_t attribute_count = provider.ConsumeIntegralInRange<size_t>(0, 100);
  std::vector<CK_ATTRIBUTE> attributes(attribute_count);
  for (auto& attribute : attributes) {
    attribute.type = provider.ConsumeIntegralInRange<CK_ATTRIBUTE_TYPE>(0, 100);
    attribute.pValue = provider.ConsumeBytes<uint8_t>(
        provider.ConsumeIntegralInRange<size_t>(0, 1000));
    attribute.ulValueLen = attribute.pValue.size();
  }
  size_t object_handle;
  FC_CreateObject(object_class, attributes.data(), attribute_count, &object_handle);
  return 0;
}
```

With this change, the code should build and run successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
