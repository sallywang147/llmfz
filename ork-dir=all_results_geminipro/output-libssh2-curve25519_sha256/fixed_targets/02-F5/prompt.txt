Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

#include <libssh2.h>
#include <libssh2_curve25519_sha256.h>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  static bool initialized = false;
  if (!initialized) {
    libssh2_init(0);
    initialized = true;
  }

  FuzzedDataProvider provider(data, size);
  LIBSSH2_SESSION* session = libssh2_session_init();
  if (session == nullptr) {
    return 0;
  }

  std::vector<uint8_t> data_buffer(provider.ConsumeIntegralInRange<size_t>(
      0, std::min(size, static_cast<size_t>(1 << 16))));
  std::copy(provider.ConsumeBytes<uint8_t>(data_buffer.size()).begin(),
            provider.ConsumeBytes<uint8_t>(data_buffer.size()).end(),
            data_buffer.begin());

  std::vector<uint8_t> public_key(provider.ConsumeIntegralInRange<size_t>(
      0, std::min(size, static_cast<size_t>(1 << 16))));
  std::copy(provider.ConsumeBytes<uint8_t>(public_key.size()).begin(),
            provider.ConsumeBytes<uint8_t>(public_key.size()).end(),
            public_key.begin());

  std::vector<uint8_t> private_key(provider.ConsumeIntegralInRange<size_t>(
      0, std::min(size, static_cast<size_t>(1 << 16))));
  std::copy(provider.ConsumeBytes<uint8_t>(private_key.size()).begin(),
            provider.ConsumeBytes<uint8_t>(private_key.size()).end(),
            private_key.begin());

  std::vector<uint8_t> exchange_state(provider.ConsumeIntegralInRange<size_t>(
      0, std::min(size, static_cast<size_t>(1 << 16))));
  std::copy(provider.ConsumeBytes<uint8_t>(exchange_state.size()).begin(),
            provider.ConsumeBytes<uint8_t>(exchange_state.size()).end(),
            exchange_state.begin());

  int rc = curve25519_sha256(session, reinterpret_cast<char*>(data_buffer.data()),
                    data_buffer.size(), reinterpret_cast<char*>(public_key.data()),
                    reinterpret_cast<char*>(private_key.data()),
                    reinterpret_cast<struct kmdhgGPshakex_state_t*>(
                        exchange_state.data()));

  if (rc != 0) {
    return 0;
  }

  libssh2_session_free(session);

  return 0;
}
```

The following changes were made to fix the code:

1. Included the `libssh2_curve25519_sha256.h` header, which contains the definition of the `curve25519_sha256` function.
2. Added `extern "C"` around the `#include <libssh2.h>` line to ensure that the symbols from this header are exported with C linkage. This is necessary because the `curve25519_sha256` function is defined in a C file and must be exported with C linkage in order to be called from a C++ program.

With these changes, the code should compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
