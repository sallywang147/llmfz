Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

// Declare the function prototype
extern "C" int encode_ise(int quant_level, int character_count, const char* input_data, char* output_data, int bit_offset);

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);

  // Select a quantization level
  int quant_level = provider.ConsumeIntegralInRange<int>(0, 15);

  // Select a character count
  int character_count = provider.ConsumeIntegralInRange<int>(0, 1024);

  // Generate input data
  std::vector<char> input_data(character_count);
  provider.ConsumeBytes(input_data.data(), input_data.size());

  // Generate output data
  std::vector<char> output_data(character_count);

  // Select a bit offset
  int bit_offset = provider.ConsumeIntegralInRange<int>(0, 7);

  // Call the function under test
  encode_ise(quant_level, character_count, input_data.data(), output_data.data(), bit_offset);

  return 0;
}
```

The main issue with the original code was that the `encode_ise` function was not declared before it was called. This caused the linker to complain about an undefined reference to the function. To fix this, we moved the declaration of the function to the top of the file, before the definition of the `LLVMFuzzerTestOneInput` function.

We also wrapped the `#include <fuzzer/FuzzedDataProvider.h>` directive with `extern "C" {}` because this header file contains C++ code that needs to be compiled as C code in order to be compatible with the rest of the C code in the program.

With these changes, the code should now compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
