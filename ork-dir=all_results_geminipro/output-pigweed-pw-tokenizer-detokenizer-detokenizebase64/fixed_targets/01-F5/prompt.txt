Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "pw_tokenizer.h"

extern "C" {
#include "pw_tokenizer_detokenizer.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  const std::string input_text = stream.ConsumeRemainingBytesAsString();
  pw::tokenizer::Detokenizer detokenizer;
  std::string output_text;
  detokenizer.DetokenizeBase64(&output_text, &detokenizer,
                               reinterpret_cast<char*>(const_cast<char*>(input_text.c_str())), input_text.size());
  return 0;
}
```
The original code has the following issues:

1. The `pw_tokenizer` header is not wrapped with `extern "C" {}`.
2. The `pw::tokenizer::Detokenizer` class is not declared as `extern "C"`.

To fix the code, we need to wrap the `pw_tokenizer` header with `extern "C" {}` and declare the `pw::tokenizer::Detokenizer` class as `extern "C"`.

The corrected code is shown above.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
