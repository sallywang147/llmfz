Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "pw/tokenizer/detokenizer.h"

extern "C" {
#include "pw_tokenizer_detokenizer_fuzzer_testonly.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const std::string input = stream.ConsumeRemainingBytesAsString();
  std::string output;
  pw::tokenizer::Detokenizer detokenizer;
  detokenizer.DetokenizeBase64(input.data(), input.size(), &output);
  return 0;
}
```

Changes made:

1. In the `DetokenizeBase64` function call, the order of arguments was incorrect. It should be `input.data(), input.size(), &output` instead of `&output, &detokenizer, input.data(), input.size()`.

2. The `pw::tokenizer::Detokenizer` class has a `DetokenizeBase64` method that takes three arguments: the input data, the input size, and a pointer to the output buffer. In the original code, the `&detokenizer` argument was incorrect. It should be `input.data()`, which is a pointer to the input data.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
