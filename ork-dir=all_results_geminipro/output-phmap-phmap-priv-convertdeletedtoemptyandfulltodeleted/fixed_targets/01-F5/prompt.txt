Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <bitset>
#include <cstddef>
#include <cstdint>
#include <cstring>
#include <fuzzer/FuzzedDataProvider.h>
#include <iostream>
#include <vector>

namespace phmap {
namespace priv {

extern "C" {
#include <bitset>
#include <cstring>
}

void ConvertDeletedToEmptyAndFullToDeleted(char* ctrl, size_t capacity) {
  if (capacity < 1) {
    return;
  }
  std::bitset<sizeof(char) * 8> ctrl_bits(ctrl, capacity);
  for (size_t i = 0; i < capacity; ++i) {
    if (ctrl_bits.test(i)) {
      ctrl_bits.set(i, false);
    } else {
      ctrl_bits.set(i, true);
    }
  }
}

}  // namespace priv
}  // namespace phmap

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider fuzzed_data(data, size);
  const size_t capacity = fuzzed_data.ConsumeIntegralInRange<size_t>(0, 10000);
  std::vector<char> ctrl(capacity);
  fuzzed_data.ConsumeBytes(&ctrl[0], capacity);
  phmap::priv::ConvertDeletedToEmptyAndFullToDeleted(&ctrl[0], capacity);
  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
