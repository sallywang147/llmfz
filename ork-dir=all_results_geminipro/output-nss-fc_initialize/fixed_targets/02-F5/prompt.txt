Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <cstring>
#include <fuzzer/FuzzedDataProvider.h>

extern "C" size_t FC_Initialize(char *path) {
  return 0;
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider provider(data, size);
  std::string path = provider.ConsumeRandomLengthString();
  FC_Initialize(strdup(path.c_str()));
  return 0;
}
```

Explanation of the fix:

1. The original code attempted to pass a `std::string` object to the `FC_Initialize` function, which expects a `char *`. This resulted in a compilation error because `std::string` is not implicitly convertible to `char *`.

2. To fix this, the `strdup()` function is used to create a duplicate of the `std::string` object's internal character buffer. This duplicate is then passed to the `FC_Initialize` function, which is now able to correctly process the path.

3. The `strdup()` function is declared in the `<cstring>` header, so this header is included in the modified code.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
