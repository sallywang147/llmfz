Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <vector>

extern "C" {
#include "isvce_enc_api.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const size_t pu1_src_size = stream.ConsumeIntegralInRange<size_t>(16, 1024);
  std::vector<char> pu1_src(pu1_src_size);
  stream.ConsumeBytes<char>(pu1_src.data(), pu1_src_size);
  const size_t pu1_ngbr_pels_size = stream.ConsumeIntegralInRange<size_t>(16, 1024);
  std::vector<char> pu1_ngbr_pels(pu1_ngbr_pels_size);
  stream.ConsumeBytes<char>(pu1_ngbr_pels.data(), pu1_ngbr_pels_size);
  const size_t pu1_dst_size = stream.ConsumeIntegralInRange<size_t>(16, 1024);
  std::vector<char> pu1_dst(pu1_dst_size);
  stream.ConsumeBytes<char>(pu1_dst.data(), pu1_dst_size);
  const int src_strd = stream.ConsumeIntegral<int>();
  const int dst_strd = stream.ConsumeIntegral<int>();
  const int u4_n_avblty = stream.ConsumeIntegral<int>();
  int u4_intra_mode = stream.ConsumeIntegral<int>();
  int pu4_sadmin = stream.ConsumeIntegral<int>();
  const int u4_valid_intra_modes = stream.ConsumeIntegral<int>();
  const int u4_lambda = stream.ConsumeIntegral<int>();
  const int u4_predictd_mode = stream.ConsumeIntegral<int>();

  isvce_evaluate_intra_4x4_modes(pu1_src.data(), pu1_ngbr_pels.data(), pu1_dst.data(), src_strd, dst_strd, u4_n_avblty, &u4_intra_mode, &pu4_sadmin, u4_valid_intra_modes, u4_lambda, u4_predictd_mode);
  return 0;
}
```

The original code has the following issues:
1. The `isvce_enc_api.h` header is not wrapped with `extern "C" {}`.
2. The `isvce_evaluate_intra_4x4_modes` function is not declared with `extern "C"`.

The fixed code addresses these issues by wrapping the `isvce_enc_api.h` header with `extern "C" {}` and declaring the `isvce_evaluate_intra_4x4_modes` function with `extern "C"`.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
