Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>

extern "C" {
#include <string.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const size_t object_size = stream.ConsumeIntegralInRange<size_t>(0, 1024);
  char *object = new char[object_size];
  stream.ConsumeBytes(object, object_size);
  char *result = Manage(object);
  delete[] object;
  delete[] result;
  return 0;
}
```

The build error message is:

```
error: undefined reference to 'Manage'
```

This error means that the linker cannot find the definition of the `Manage` function. To fix this, we need to make sure that the definition of `Manage` is available to the linker.

In this case, the definition of `Manage` is not in the same file as the `LLVMFuzzerTestOneInput` function. Therefore, we need to tell the linker to look for the definition of `Manage` in another file.

We can do this by using the `extern "C"` directive. The `extern "C"` directive tells the compiler that the following function is defined in a C file.

In this case, we need to wrap the `#include <string.h>` directive with the `extern "C"` directive. This will tell the linker to look for the definition of `Manage` in the C library.

After making this change, the code should build successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
