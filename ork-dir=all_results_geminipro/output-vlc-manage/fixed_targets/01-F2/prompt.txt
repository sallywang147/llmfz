Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <string>

#include <fuzzer/FuzzedDataProvider.h>

extern "C" char *Manage(char *p_object);

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const size_t object_size = stream.ConsumeIntegralInRange<size_t>(0, 1000);
  char *p_object = new char[object_size + 1];
  stream.ConsumeBytes(p_object, object_size);
  p_object[object_size] = '\0';
  char *result = Manage(p_object);
  free(p_object); // Change delete[] to free
  free(result);    // Change delete[] to free
  return 0;
}
```

The original code uses `delete[]` to free the memory allocated with `new[]`. However, `Manage` is a C function, and it expects the memory to be freed with `free`. To fix the issue, we need to change `delete[]` to `free`.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
