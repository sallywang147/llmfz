Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
The build error is likely caused by missing header files or incorrect linking. Here's the corrected code:

```c++
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "resip/resip.h"

extern "C" {
#include "resip/parse_buffer.h"
#include "resip/dialog_info_contents.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  resip::DialogInfoContents dialog_info_contents;
  resip::ParseBuffer parse_buffer(stream.ConsumeRemainingBytesAsString());
  dialog_info_contents.parse(&dialog_info_contents, &parse_buffer);
  return 0;
}
```

The following changes were made:

1. Added `extern "C" {}` around the `#include` directives for `resip/parse_buffer.h` and `resip/dialog_info_contents.h`. This is necessary because these headers contain C++ code, and the fuzzer driver is written in C.

2. Added the necessary header files for `ParseBuffer` and `DialogInfoContents`.

With these changes, the code should now compile and run successfully.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
