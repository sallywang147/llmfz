Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include "ixml.h"
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define kMinInputLength 10
#define kMaxInputLength 5120

int CheckXML(char *filename) {

  int rc;
  DOMString s;
  IXML_Document *doc = NULL;

  rc = ixmlLoadDocumentEx(filename, &doc);
  if (rc != IXML_SUCCESS) {
    return rc;
  }

  struct _IXML_Node *node = ixmlNode_cloneNodeTreeRecursive(ixmlDocument_root(doc), 1);

  s = ixmlPrintNode(node);
  if (s == NULL || s[0] == '\0') {
    ixmlDocument_free(doc);
    return 1;
  }

  ixmlFreeDOMString(s);
  ixmlNode_free(node);
  ixmlDocument_free(doc);

  return 0;
}

extern "C" {
int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {

  if (Size < kMinInputLength || Size > kMaxInputLength) {
    return 1;
  }

  int ret;
  char filename[256];

  sprintf(filename, "/tmp/libfuzzer.%d", getpid());
  FILE *fp = fopen(filename, "wb");
  if (!fp) {
    return 0;
  }

  fwrite(Data, Size, 1, fp);
  fclose(fp);

  ret = CheckXML(filename);
  unlink(filename);
  return ret;
}
}
```

The error message is:
```
error: undefined reference to 'ixmlLoadDocumentEx'
error: undefined reference to 'ixmlNode_cloneNodeTreeRecursive'
error: undefined reference to 'ixmlPrintNode'
error: undefined reference to 'ixmlFreeDOMString'
error: undefined reference to 'ixmlNode_free'
error: undefined reference to 'ixmlDocument_free'
```

This means that the linker cannot find the definitions of the functions `ixmlLoadDocumentEx`, `ixmlNode_cloneNodeTreeRecursive`, `ixmlPrintNode`, `ixmlFreeDOMString`, `ixmlNode_free`, and `ixmlDocument_free`.

To fix this, we need to make sure that the header file `ixml.h` is included with the `extern "C"` directive, which tells the compiler to use the C calling convention for the functions declared in that header file.

Here is the corrected code:

```c++
#include "ixml.h"
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define kMinInputLength 10
#define kMaxInputLength 5120

int CheckXML(char *filename) {

  int rc;
  DOMString s;
  IXML_Document *doc = NULL;

  rc = ixmlLoadDocumentEx(filename, &doc);
  if (rc != IXML_SUCCESS) {
    return rc;
  }

  struct _IXML_Node *node = ixmlNode_cloneNodeTreeRecursive(ixmlDocument_root(doc), 1);

  s = ixmlPrintNode(node);
  if (s == NULL || s[0] == '\0') {
    ixmlDocument_free(doc);
    return 1;
  }

  ixmlFreeDOMString(s);
  ixmlNode_free(node);
  ixmlDocument_free(doc);

  return 0;
}

extern "C" {
int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {

  if (Size < kMinInputLength || Size > kMaxInputLength) {
    return 1;
  }

  int ret;
  char filename[256];

  sprintf(filename, "/tmp/libfuzzer.%d", getpid());
  FILE *fp = fopen(filename, "wb");
  if (!fp) {
    return 0;
  }

  fwrite(Data, Size, 1, fp);
  fclose(fp);

  ret = CheckXML(filename);
  unlink(filename);
  return ret;
}
}
```

With this change, the code should compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
