Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>

extern "C" {
#include "wpa_supplicant/wpa_supplicant.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const std::string global_name = stream.ConsumeBytesAsString(
      stream.ConsumeIntegralInRange<size_t>(0, 16));
  struct wpa_global *global = wpa_supplicant_init(global_name.c_str());
  if (global == nullptr) {
    return 0;
  }

  const std::string interface_name = stream.ConsumeBytesAsString(
      stream.ConsumeIntegralInRange<size_t>(0, 16));
  struct wpa_interface *interface =
      wpa_supplicant_get_iface(global, interface_name.c_str());
  if (interface == nullptr) {
    wpa_supplicant_deinit(global);
    return 0;
  }

  const std::string parent_name = stream.ConsumeBytesAsString(
      stream.ConsumeIntegralInRange<size_t>(0, 16));
  struct wpa_supplicant *parent =
      wpa_supplicant_get_iface(global, parent_name.c_str());
  if (parent == nullptr) {
    wpa_supplicant_deinit(global);
    return 0;
  }

  struct wpa_supplicant *supplicant =
      wpa_supplicant_add_iface(global, interface, parent);
  if (supplicant != nullptr) {
    wpa_supplicant_remove_iface(global, supplicant, 0);
  }
  wpa_supplicant_deinit(global);
  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
