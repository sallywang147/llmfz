Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>

#include "hb.h"

extern "C" {
#include "harfbuzz/hb-ot.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  hb_face_t* face = hb_face_create("Roboto", nullptr);
  hb_segment_properties_t* props = hb_segment_properties_create();

  hb_buffer_t* buffer = hb_buffer_create();
  hb_buffer_add_utf8(buffer, (const char*)stream.ConsumeRemainingBytes(), stream.RemainingBytes(), 0, -1);

  hb_shape_plan_t* plan = hb_shape_plan_create(face, props, buffer, 0, nullptr);
  hb_face_destroy(face);
  hb_segment_properties_destroy(props);
  hb_buffer_destroy(buffer);

  hb_shape_plan_destroy(plan);
  return 0;
}
```

The fixed code includes the missing `#include` directive for `harfbuzz/hb-ot.h` and adds the `hb_buffer_t` argument to the `hb_shape_plan_create()` function. It also creates a buffer, adds the input text to the buffer, and destroys the buffer after use.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
