Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <zstd.h>

extern "C" {
#include <zstd.h>
}

extern "C" size_t LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  ZSTD_CCtx* cctx = ZSTD_createCCtx();
  if (!cctx) {
    return 0;
  }
  ZSTD_inBuffer input = {nullptr, 0, 0};
  ZSTD_outBuffer output = {nullptr, 0, 0};
  size_t compressed_size = 0;
  size_t remaining = size;
  size_t offset = 0;
  while (remaining > 0) {
    size_t chunk_size = stream.ConsumeIntegralInRange<size_t>(0, remaining);
    input.src = stream.ConsumeBytes<uint8_t>(chunk_size).data();
    input.size = chunk_size;
    input.pos = 0;
    output.dst = malloc(ZSTD_compressBound(chunk_size));
    if (!output.dst) {
      ZSTD_freeCCtx(cctx);
      return 0;
    }
    output.size = ZSTD_compressBound(chunk_size);
    output.pos = 0;
    compressed_size += ZSTD_compressStream(cctx, &output, &input);
    free(output.dst);  // Moved outside the loop to avoid freeing multiple times
    remaining -= chunk_size;
    offset += chunk_size;
  }
  ZSTD_freeCCtx(cctx);
  return compressed_size;
}
```

The fix is to wrap the `#include <zstd.h>` with `extern "C" {}` because the `zstd.h` header contains C declarations and definitions, which need to be declared as `extern "C"` when used in C++ code to avoid name mangling issues.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
