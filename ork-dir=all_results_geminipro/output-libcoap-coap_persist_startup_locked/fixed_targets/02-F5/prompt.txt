Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <coap3/coap.h>
#include <fuzzer/FuzzedDataProvider.h>

extern "C" {
#include <fuzzer/FuzzedDataProvider.h>
#include <coap3/coap.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  coap_context_t *ctx = coap_new_context(NULL);
  if (!ctx) {
    return 0;
  }

  FuzzedDataProvider stream(data, size);
  std::string path = stream.ConsumeRemainingBytesAsString();

  int ret = coap_persist_startup_locked(ctx, NULL, NULL, path.c_str(), 0);
  if (ret == 0) {
    coap_delete_context(ctx);
  }

  return 0;
}
```

The error message is:

```
error: undefined reference to 'coap_new_context'
```

This error means that the linker cannot find the definition of the function `coap_new_context`. This is because the function is declared in the header file `coap3/coap.h`, but it is not defined in any of the source files that are linked into the program.

To fix this error, you need to add the source file that defines the function `coap_new_context` to the list of files that are linked into the program. This can be done by adding the following line to the Makefile:

```
SOURCES += coap3/coap.c
```

Once you have added this line to the Makefile, you should be able to build the program without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
