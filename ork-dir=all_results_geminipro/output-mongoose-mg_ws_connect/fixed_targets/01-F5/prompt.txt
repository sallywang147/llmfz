Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "mongoose.h"

extern "C" {
#include <libmongoose/mongoose.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  struct mg_mgr mgr;
  mg_mgr_init(&mgr);

  const std::string url = stream.ConsumeRemainingBytesAsString();
  const std::string fn_data = stream.ConsumeRemainingBytesAsString();
  const std::string fmt = stream.ConsumeRemainingBytesAsString();

  struct mg_connection *conn = mg_ws_connect(&mgr, url.c_str(),
                                            nullptr, fn_data.c_str(),
                                            fmt.c_str());
  mg_mgr_free(&mgr);
  return 0;
}
```

The fixed code includes the necessary header files and wraps the `libmongoose` header with `extern "C" {}` to allow the C++ code to access the C functions in the header. It also links the `libmongoose` library to the program.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
