```c++
#include <fuzzer/FuzzedDataProvider.h>

#include <lwip/udp.h>
#include <lwip/pbuf.h>
#include <lwip/ip4_addr.h>

#include <cstdint>
#include <cstring>
#include <string>
#include <vector>

extern "C" {
#include <lwip/udp.h>
void udp_recv_proc(char *, struct udp_pcb *, struct pbuf *, struct ip4_addr *, short);
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
  FuzzedDataProvider provider(Data, Size);

  // Generate a random UDP PCB.
  struct udp_pcb pcb;
  memset(&pcb, 0, sizeof(pcb));
  pcb.local_port = provider.ConsumeIntegralInRange<uint16_t>(0, 65535);
  pcb.remote_port = provider.ConsumeIntegralInRange<uint16_t>(0, 65535);

  // Generate a random PBUF.
  struct pbuf *pbuf = pbuf_alloc(PBUF_TRANSPORT, provider.ConsumeIntegralInRange<uint16_t>(0, 1024), PBUF_RAM);
  if (pbuf == NULL) {
    return 0;
  }
  provider.ConsumeBytes(pbuf->payload, pbuf->len);

  // Generate a random IP4 address.
  struct ip4_addr ip4_addr;
  provider.ConsumeBytes(&ip4_addr, sizeof(ip4_addr));

  // Generate a random port number.
  short port = provider.ConsumeIntegralInRange<short>(0, 65535);

  // Call the UDP receive function.
  udp_recv_proc(NULL, &pcb, pbuf, &ip4_addr, port);

  // Free the PBUF.
  pbuf_free(pbuf);

  return 0;
}
```