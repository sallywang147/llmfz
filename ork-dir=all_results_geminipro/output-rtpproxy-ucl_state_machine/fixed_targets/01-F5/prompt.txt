Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>
#include <ucl/ucl.h>

extern "C" {
#include <stdlib.h>
#include <string.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider provider(data, size);
  ucl_parser *parser = ucl_parser_new(0);
  if (parser == NULL) {
    return 0;
  }
  size_t consumed = 0;
  while (consumed < size) {
    size_t next_size = provider.ConsumeIntegralInRange<size_t>(0, size - consumed);
    if (next_size == 0) {
      break;
    }
    auto next_input = provider.ConsumeBytes<char>(next_size);
    ucl_parser_add(parser, next_input.data(), next_input.size());
    consumed += next_size;
  }
  ucl_object *obj = ucl_parser_get_object(parser);
  if (obj) {
    ucl_object_unref(obj);
  }
  ucl_parser_free(parser);
  return 0;
}
```

The code has the following issues:
1. The function `ucl_state_machine` is not used and can be removed.
2. The function `ucl_parser_get_object` is not called to get the parsed object, which is a memory leak.

The fixed code calls `ucl_parser_get_object` to get the parsed object and then unrefs it to free the memory.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
