Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <vector>

extern "C" {
#include "webp/encode.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const int width = stream.ConsumeIntegral<int>();
  const int height = stream.ConsumeIntegral<int>();
  const int bits_per_sample = stream.ConsumeIntegral<int>();
  const std::vector<uint8_t> input = stream.ConsumeBytes<uint8_t>(
      width * height * bits_per_sample / 8);
  size_t output_size = 0;
  uint8_t* output = WebPEncodeLosslessBGR(
      reinterpret_cast<const uint8_t*>(input.data()), width, height, bits_per_sample,
      &output_size);
  free(output);
  return 0;
}
```

Changes made:

1. Changed the type of `output_size` from `char*` to `size_t`.
2. Changed the type of the first argument of `WebPEncodeLosslessBGR` from `char*` to `const uint8_t*`.
3. Passed `&output_size` as the fifth argument to `WebPEncodeLosslessBGR`.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
