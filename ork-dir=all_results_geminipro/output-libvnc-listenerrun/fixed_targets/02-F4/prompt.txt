Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include <listener.h>

extern "C" {
#include <listener.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const std::string data_string = stream.ConsumeRemainingBytesAsString();
  char *data_ptr = const_cast<char *>(data_string.c_str());
  char *result = listenerRun(data_ptr);
  free(result);
  return 0;
}
```

The original code has the following issues:

1. The header file `listener.h` is included twice, once with and once without the `extern "C"` wrapper. This is not necessary and can lead to undefined reference errors.
2. The function `listenerRun` is declared as `extern "C"` in the header file `listener.h`, but it is not defined as `extern "C"` in the source file. This can also lead to undefined reference errors.

To fix these issues, the following changes have been made:

1. The second inclusion of `listener.h` has been removed.
2. The function `listenerRun` has been declared as `extern "C"` in the source file.

With these changes, the code should compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
