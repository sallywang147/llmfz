#include <pjlib.h>
#include <pjsip.h>

#define MAX_SIZE 1024

extern int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {

  if (Size < 1 || Size > MAX_SIZE) {
    return 0;
  }

  pj_pool_t *pool;
  pj_pool_factory *factory;
  pj_status_t status;

  factory = pj_pool_factory_default();
  status = pj_pool_create(&pool, factory, 1024, 1024, NULL);
  if (status != PJ_SUCCESS) {
    return 0;
  }

  pjsip_endpt *endpt;
  pjsip_module *tsx_user;
  pjsip_rx_data *rdata;
  int st_code;
  pj_str_t *st_text;
  pjsip_hdr *hdr_list;
  pjsip_msg_body *body;
  pjsip_transaction **p_tsx;

  endpt = (pjsip_endpt *)malloc(sizeof(pjsip_endpt));
  tsx_user = (pjsip_module *)malloc(sizeof(pjsip_module));
  rdata = (pjsip_rx_data *)malloc(sizeof(pjsip_rx_data));
  st_code = (int)malloc(sizeof(int));
  st_text = (pj_str_t *)malloc(sizeof(pj_str_t));
  hdr_list = (pjsip_hdr *)malloc(sizeof(pjsip_hdr));
  body = (pjsip_msg_body *)malloc(sizeof(pjsip_msg_body));
  p_tsx = (pjsip_transaction **)malloc(sizeof(pjsip_transaction *));

  pjsip_endpt_respond(endpt, tsx_user, rdata, st_code, st_text, hdr_list, body, p_tsx);

  pj_pool_release(pool);

  return 0;
}
</solution>