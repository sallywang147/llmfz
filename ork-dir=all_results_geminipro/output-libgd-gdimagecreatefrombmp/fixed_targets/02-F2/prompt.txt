Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <string>

#include "gd.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  std::vector<uint8_t> bytes = stream.ConsumeRemainingBytes();
  FILE* file = fmemopen(bytes.data(), bytes.size(), "rb");
  if (file == nullptr) {
    return 0;
  }
  gdImagePtr image = gdImageCreateFromBmp(file);
  if (image == nullptr) {
    fclose(file);
    return 0;
  }
  gdImageDestroy(image);
  fclose(file);
  return 0;
}
```

The error message is:

```
error: undefined reference to 'gdImageCreateFromBmp'
```

This means that the linker cannot find the definition of the function `gdImageCreateFromBmp`. This is because the header file `gd.h` does not include the definition of this function. To fix this, we need to include the library that contains the definition of this function.

The library that contains the definition of `gdImageCreateFromBmp` is called `libgd`. We can include this library by adding the following line to the top of the file:

```
#include <libgd/gd.h>
```

After adding this line, the code should compile and run without errors.
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
