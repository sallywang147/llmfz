Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

#include "zlib.h"

extern "C" {
#include "zlib.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  gzFile file = gzdopen(0, "wb");
  if (file == nullptr) {
    return 0;
  }

  for (size_t i = 0; i < size; i++) {
    uint8_t value = stream.ConsumeIntegral<uint8_t>();
    size_t ret = gzfwrite(file, &value, 1, 1);
    if (ret == 0) {
      break;
    }
  }

  gzclose(file);
  return 0;
}
</code>

The code has the following build issues:
<error>
/src/zlib_uncompress_fuzzer.cc:24:18: error: no matching function for call to 'gzfwrite'
    size_t ret = gzfwrite(file, &value, 1, 1);
                 ^~~~~~~~
./zlib.h:1460:26: note: candidate function not viable: no known conversion from 'uint8_t *' (aka 'unsigned char *') to 'z_size_t' (aka 'unsigned long') for 2nd argument; remove &
ZEXTERN z_size_t ZEXPORT gzfwrite(voidpc buf, z_size_t size,
                         ^
1 error generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
