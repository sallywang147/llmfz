Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stdlib.h>
#include <string.h>
#include "hiredis.h"

extern "C" {
#include <hiredis/hiredis.h>
}

int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
    char **new_argv;
    size_t *new_argvlen;
    char *ret;
    int i;

    if (size < 3)
        return 0;

    new_argvlen = malloc(sizeof(size_t)*size);
    if (new_argvlen == NULL)
        return 0;

    new_argv = malloc(sizeof(char*)*size);
    if (new_argv == NULL) {
        free(new_argvlen);
        return 0;
    }

    for (i = 0; i < size; i++) {
        new_argvlen[i] = data[i];
        new_argv[i] = malloc(new_argvlen[i]+1);
        if (new_argv[i] == NULL) {
            for (int j = 0; j < i; j++)
                free(new_argv[j]);
            free(new_argv);
            free(new_argvlen);
            return 0;
        }
        memcpy(new_argv[i], data+i+1, new_argvlen[i]);
        new_argv[i][new_argvlen[i]] = '\0';
    }

    ret = redisCommandArgv(NULL, size, new_argv, new_argvlen);

    for (i = 0; i < size; i++)
        free(new_argv[i]);
    free(new_argv);
    free(new_argvlen);
    return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
