Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
 #include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <vector>

#include "zstd.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  ZSTD_CCtx* cctx = ZSTD_createCCtx();
  if (cctx == nullptr) {
    return 0;
  }

  FuzzedDataProvider stream(data, size);
  std::vector<uint8_t> input_buffer(stream.ConsumeIntegralInRange<size_t>(
      0, std::min(size, static_cast<size_t>(ZSTD_BLOCKSIZE_MAX))));
  stream.ConsumeBytes(input_buffer.data(), input_buffer.size());
  ZSTD_inBuffer in_buffer = {input_buffer.data(), input_buffer.size(), 0};
  size_t ret = ZSTD_endStream(cctx, &in_buffer);
  if (ZSTD_isError(ret)) {
    fprintf(stderr, "ZSTD_endStream returned error: %s\n", ZSTD_getErrorName(ret));
  }
  ZSTD_freeCCtx(cctx);
  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
