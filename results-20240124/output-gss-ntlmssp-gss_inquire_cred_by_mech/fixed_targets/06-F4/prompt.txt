Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <algorithm>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <string>

extern "C" {
#include <gssapi.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  gss_cred_id_struct* cred_handle = nullptr;
  gss_OID_desc_struct mech_type = {0, nullptr};
  gss_name_struct* name = nullptr;
  int initiator_lifetime = 0;
  OM_uint32 acceptor_lifetime = 0;
  int cred_usage = 0;
  OM_uint32 minor_status = 0;

  const size_t cred_size = stream.ConsumeIntegralInRange<size_t>(0, 1024);
  if (cred_size) {
    cred_handle = reinterpret_cast<gss_cred_id_struct*>(
        malloc(cred_size));
    memset(cred_handle, 0, cred_size);
  }

  const size_t mech_type_size = stream.ConsumeIntegralInRange<size_t>(0, 1024);
  if (mech_type_size) {
    mech_type.length = mech_type_size;
    mech_type.elements = reinterpret_cast<void*>(
        malloc(mech_type_size));
    stream.ConsumeBytes<uint8_t>(*reinterpret_cast<uint8_t**>(&mech_type.elements),
                     mech_type_size);
  }

  const size_t name_size = stream.ConsumeIntegralInRange<size_t>(0, 1024);
  if (name_size) {
    name = reinterpret_cast<gss_name_struct*>(malloc(name_size));
    memset(name, 0, name_size);
  }

  gss_inquire_cred_by_mech(&minor_status, cred_handle, &mech_type, &name,
                           &initiator_lifetime, &acceptor_lifetime,
                           &cred_usage);

  if (cred_handle) {
    free(cred_handle);
  }
  if (mech_type.elements) {
    free(mech_type.elements);
  }
  if (name) {
    free(name);
  }

  return 0;
}
</code>

The code has the following build issues:
<error>
fuzz-accept-sec-context.c:1:10: fatal error: 'algorithm' file not found
#include <algorithm>
         ^~~~~~~~~~~
1 error generated.

Fix failure
fuzz-accept-sec-context.cpp:36:12: error: no matching member function for call to 'ConsumeBytes'
    stream.ConsumeBytes<uint8_t>(*reinterpret_cast<uint8_t**>(&mech_type.elements),
    ~~~~~~~^~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/clang/15.0.0/include/fuzzer/FuzzedDataProvider.h:352:36: note: candidate function template not viable: no known conversion from 'uint8_t *' (aka 'unsigned char *') to 'size_t' (aka 'unsigned long') for 1st argument; dereference the argument with *
std::vector<T> FuzzedDataProvider::ConsumeBytes(size_t size, size_t num_bytes) {
                                   ^
/usr/local/lib/clang/15.0.0/include/fuzzer/FuzzedDataProvider.h:108:36: note: candidate function template not viable: requires single argument 'num_bytes', but 2 arguments were provided
std::vector<T> FuzzedDataProvider::ConsumeBytes(size_t num_bytes) {
                                   ^
fuzz-accept-sec-context.cpp:46:3: error: no matching function for call to 'gss_inquire_cred_by_mech'
  gss_inquire_cred_by_mech(&minor_status, cred_handle, &mech_type, &name,
  ^~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/gssapi/gssapi.h:649:1: note: candidate function not viable: no known conversion from 'int *' to 'OM_uint32 *' (aka 'unsigned int *') for 5th argument
gss_inquire_cred_by_mech(
^
2 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
