Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <algorithm>  // for std::sort
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <vector>

extern "C" {
#include "cmd_add.h"
#include "cmd_branch.h"
#include "cmd_commit.h"
#include "cmd_config.h"
#include "cmd_diff.h"
#include "cmd_diff_files.h"
#include "cmd_diff_index.h"
#include "cmd_diff_tree.h"
#include "cmd_init_db.h"
#include "cmd_ls_files.h"
#include "cmd_ls_tree.h"
#include "cmd_merge.h"
#include "cmd_mv.h"
#include "cmd_rerere.h"
#include "cmd_status.h"
#include "fuzzer/FuzzedDataProvider.h"
#include "help.h"
#include "load_builtin_commands.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const int argc = stream.ConsumeIntegral<int>();
  std::vector<char*> argv;
  for (int i = 0; i < argc; i++) {
    std::string arg = stream.ConsumeRemainingBytesAsString();
    argv.push_back(strdup(arg.c_str()));
  }
  std::string cmd = stream.ConsumeRemainingBytesAsString();
  std::sort(argv.begin(), argv.end());  // sort the arguments
  if (cmd == "add") {
    cmd_add(argc, argv.data());
  } else if (cmd == "branch") {
    cmd_branch(argc, argv.data());
  } else if (cmd == "commit") {
    cmd_commit(argc, argv.data());
  } else if (cmd == "config") {
    cmd_config(argc, argv.data());
  } else if (cmd == "diff") {
    cmd_diff(argc, argv.data());
  } else if (cmd == "diff-files") {
    cmd_diff_files(argc, argv.data());
  } else if (cmd == "diff-index") {
    cmd_diff_index(argc, argv.data());
  } else if (cmd == "diff-tree") {
    cmd_diff_tree(argc, argv.data());
  } else if (cmd == "init-db") {
    cmd_init_db(argc, argv.data());
  } else if (cmd == "ls-files") {
    cmd_ls_files(argc, argv.data());
  } else if (cmd == "ls-tree") {
    cmd_ls_tree(argc, argv.data());
  } else if (cmd == "merge") {
    cmd_merge(argc, argv.data());
  } else if (cmd == "mv") {
    cmd_mv(argc, argv.data());
  } else if (cmd == "rerere") {
    cmd_rerere(argc, argv.data());
  } else if (cmd == "status") {
    cmd_status(argc, argv.data());
  }
  for (int i = 0; i < argc; i++) {
    free(argv[i]);
  }
  return 0;
}
</code>

The code has the following build issues:
<error>
fuzz-command.c:(.text.LLVMFuzzerTestOneInput[LLVMFuzzerTestOneInput]+0x441): undefined reference to `cmd_branch'
/usr/bin/ld: fuzz-command.c:(.text.LLVMFuzzerTestOneInput[LLVMFuzzerTestOneInput]+0x640): undefined reference to `cmd_add'
/usr/bin/ld: fuzz-command.c:(.text.LLVMFuzzerTestOneInput[LLVMFuzzerTestOneInput]+0x6b7): undefined reference to `cmd_commit'
/usr/bin/ld: fuzz-command.c:(.text.LLVMFuzzerTestOneInput[LLVMFuzzerTestOneInput]+0x712): undefined reference to `cmd_diff_files'
/usr/bin/ld: fuzz-command.c:(.text.LLVMFuzzerTestOneInput[LLVMFuzzerTestOneInput]+0x7ef): undefined reference to `cmd_ls_files'
/usr/bin/ld: fuzz-command.c:(.text.LLVMFuzzerTestOneInput[LLVMFuzzerTestOneInput]+0x981): undefined reference to `cmd_config'
/usr/bin/ld: fuzz-command.c:(.text.LLVMFuzzerTestOneInput[LLVMFuzzerTestOneInput]+0x9c5): undefined reference to `cmd_rerere'
/usr/bin/ld: fuzz-command.c:(.text.LLVMFuzzerTestOneInput[LLVMFuzzerTestOneInput]+0xd4e): undefined reference to `cmd_diff_tree'
/usr/bin/ld: fuzz-command.c:(.text.LLVMFuzzerTestOneInput[LLVMFuzzerTestOneInput]+0xe73): undefined reference to `cmd_diff_index'
/usr/bin/ld: fuzz-command.c:(.text.LLVMFuzzerTestOneInput[LLVMFuzzerTestOneInput]+0xfcc): undefined reference to `cmd_ls_tree'
/usr/bin/ld: fuzz-command.c:(.text.LLVMFuzzerTestOneInput[LLVMFuzzerTestOneInput]+0x108c): undefined reference to `cmd_mv'
/usr/bin/ld: fuzz-command.c:(.text.LLVMFuzzerTestOneInput[LLVMFuzzerTestOneInput]+0x1190): undefined reference to `cmd_status'
/usr/bin/ld: fuzz-command.c:(.text.LLVMFuzzerTestOneInput[LLVMFuzzerTestOneInput]+0x13c6): undefined reference to `cmd_diff'
help.c:(.text.load_command_list[load_command_list]+0x53): undefined reference to `load_builtin_commands'
fuzz-cmd-base.c:(.text.reset_git_folder[reset_git_folder]+0x116): undefined reference to `cmd_init_db'
oss-fuzz/fuzz-date.c:1:10: fatal error: 'algorithm' file not found
#include <algorithm>  // for std::sort
         ^~~~~~~~~~~
1 error generated.

Fix failure
oss-fuzz/fuzz-date.cpp:10:10: fatal error: 'cmd_add.h' file not found
#include "cmd_add.h"
         ^~~~~~~~~~~
1 error generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
