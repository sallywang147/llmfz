Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
 #include <cstdint>
#include <cstdio>
#include <string>
#include <vector>

#include "fuzzer-common.h"
#include "fmt/core.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  if (size <= fixed_size + 1) return 0;

  const auto format_str = fmt::string_view(as_chars(data), size - fixed_size);
  data += fixed_size;
  size -= fixed_size;

  std::vector<fmt::detail::value> args;
  while (size > 0) {
    args.emplace_back(assign_from_buf<int64_t>(data));
    data += sizeof(int64_t);
    size -= sizeof(int64_t);
  }
  fmt::vprintln(stderr, format_str, args);
  return 0;
}
</code>

The code has the following build issues:
<error>
/src/fmt/test/fuzzing/chrono-timepoint.cc:16:28: error: use of class template 'fmt::detail::value' requires template arguments
  std::vector<fmt::detail::value> args;
                           ^
/src/fmt/include/fmt/base.h:1285:35: note: template is declared here
template <typename Context> class value {
~~~~~~~~~~~~~~~~~~~~~~~~~~~       ^
1 error generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
