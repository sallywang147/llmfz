Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <cstdint>
#include <cstdio>
#include <string>
#include <vector>

#include "fuzzer-common.h"
#include "fmt/core.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  if (size <= fixed_size + 1) return 0;

  const auto format_str = fmt::string_view(as_chars(data), size - fixed_size);
  data += fixed_size;
  size -= fixed_size;

  std::vector<fmt::detail::value<fmt::format_context>> args;
  while (size > 0) {
    args.emplace_back(fmt::detail::max_value<int64_t>(data));
    data += sizeof(int64_t);
    size -= sizeof(int64_t);
  }
  fmt::vprintln(stderr, format_str, args);
  return 0;
}
</code>

The code has the following build issues:
<error>
/src/fmt/test/fuzzing/chrono-timepoint.cc:18:23: error: no matching function for call to 'max_value'
    args.emplace_back(fmt::detail::max_value<int64_t>(data));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/src/fmt/include/fmt/format.h:432:38: note: candidate function template not viable: requires 0 arguments, but 1 was provided
template <typename T> constexpr auto max_value() -> T {
                                     ^
/src/fmt/test/fuzzing/chrono-timepoint.cc:22:37: error: no viable conversion from 'std::vector<fmt::detail::value<fmt::format_context>>' (aka 'vector<value<fmt::context>>') to 'fmt::format_args' (aka 'basic_format_args<fmt::context>')
  fmt::vprintln(stderr, format_str, args);
                                    ^~~~
/src/fmt/include/fmt/base.h:1787:35: note: candidate constructor (the implicit copy constructor) not viable: no known conversion from 'std::vector<fmt::detail::value<fmt::format_context>>' (aka 'vector<value<fmt::context>>') to 'const fmt::basic_format_args<fmt::context> &' for 1st argument
template <typename Context> class basic_format_args {
                                  ^
/src/fmt/include/fmt/base.h:1787:35: note: candidate constructor (the implicit move constructor) not viable: no known conversion from 'std::vector<fmt::detail::value<fmt::format_context>>' (aka 'vector<value<fmt::context>>') to 'fmt::basic_format_args<fmt::context> &&' for 1st argument
/src/fmt/include/fmt/base.h:1849:13: note: candidate constructor not viable: no known conversion from 'std::vector<fmt::detail::value<fmt::format_context>>' (aka 'vector<value<fmt::context>>') to 'const dynamic_format_arg_store<fmt::context> &' for 1st argument
  constexpr basic_format_args(const dynamic_format_arg_store<Context>& store)
            ^
/src/fmt/include/fmt/base.h:1831:31: note: candidate template ignored: could not match 'format_arg_store' against 'vector'
  constexpr FMT_ALWAYS_INLINE basic_format_args(
                              ^
/src/fmt/include/fmt/base.h:1838:13: note: candidate template ignored: could not match 'format_arg_store' against 'vector'
  constexpr basic_format_args(
            ^
/src/fmt/include/fmt/base.h:2966:61: note: passing argument to parameter 'args' here
FMT_API void vprintln(FILE* f, string_view fmt, format_args args);
                                                            ^
2 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
