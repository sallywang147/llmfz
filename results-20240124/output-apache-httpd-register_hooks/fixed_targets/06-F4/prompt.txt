Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include "apr.h"
#include "apr_file_io.h"
#include "apr_poll.h"
#include "apr_portable.h"
#include "apr_proc_mutex.h"
#include "apr_signal.h"
#include "apr_strings.h"
#include "apr_thread_mutex.h"
#include "apr_thread_proc.h"

#define APR_WANT_STRFUNC
#include "apr_file_io.h"
#include "apr_fnmatch.h"
#include "apr_want.h"

#include "apr_poll.h"
#include "apr_want.h"

#include "ap_config.h"
#include "ap_expr.h"
#include "ap_listen.h"
#include "ap_provider.h"
#include "ap_regex.h"

#include <string.h>
#include <unistd.h>

#include "ada_fuzz_header.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  // Initialize fuzzing garbage collector. We use this to easily
  // get data types seeded with random input from the fuzzer.
  af_gb_init();

  const uint8_t *data2 = data;
  size_t size2 = size;

  // Pool initialisation
  if (apr_pool_initialize() == APR_SUCCESS) {
    apr_pool_t *pool = NULL;
    apr_pool_create(&pool, NULL);

    // Targets that require a pool

    register_hooks(pool);

    // Cleanup
    apr_pool_terminate();
  }

  // Cleanup all of the memory allocated by the fuzz headers.
  af_gb_cleanup();
  return 0;
}

void register_hooks(apr_pool_t *pool) {
  // TODO: Implement this function.
}

// Fix the issue of "cannot initialize a variable of type 'char *' with an rvalue of type 'void *'"
// by using the correct type casting.

void *af_gb_get_string(size_t *len) {
  size_t to_get = rand() % STR_SIZE;
  char *new_s = (char *)malloc(to_get + 1);
  *len = to_get;
  return new_s;
}

void *af_gb_get_bytes(size_t *len) {
  size_t to_get = rand() % BYTES_SIZE;
  char *new_s = (char *)malloc(to_get);
  *len = to_get;
  return new_s;
}

void *af_gb_get_data(size_t *len) {
  size_t to_get = rand() % DATA_SIZE;
  char *ptr = (char *)calloc(1, to_get);
  *len = to_get;
  return ptr;
}

void *af_gb_get_random_string(size_t *len) {
  size_t to_get = rand() % STR_SIZE;
  char *ptr = (char *)malloc(2);
  *len = to_get;
  return ptr;
}

void *af_gb_get_filename(size_t *len) {
  size_t to_get = rand() % FILENAME_SIZE;
  char *filename = (char *)malloc(to_get + 1);
  *len = to_get;
  return filename;
}
</code>

The code has the following build issues:
<error>
/src/fuzz_utils.c:30:8: error: expected identifier or '('
extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
       ^
/src/fuzz_utils.c:71:28: error: use of undeclared identifier 'BYTES_SIZE'
  size_t to_get = rand() % BYTES_SIZE;
                           ^
/src/fuzz_utils.c:78:28: error: use of undeclared identifier 'DATA_SIZE'
  size_t to_get = rand() % DATA_SIZE;
                           ^
/src/fuzz_utils.c:92:28: error: use of undeclared identifier 'FILENAME_SIZE'
  size_t to_get = rand() % FILENAME_SIZE;
                           ^
4 errors generated.

Fix failure
In file included from /src/fuzz_utils.cpp:28:
/src/fuzz-headers/lang/c/ada_fuzz_header.h:37:9: error: cannot initialize a variable of type 'char *' with an rvalue of type 'void *'
  char *new_s = malloc(STR_SIZE + 1);
        ^       ~~~~~~~~~~~~~~~~~~~~
/src/fuzz-headers/lang/c/ada_fuzz_header.h:51:9: error: cannot initialize a variable of type 'char *' with an rvalue of type 'void *'
  char *new_s = malloc(to_get);
        ^       ~~~~~~~~~~~~~~
/src/fuzz-headers/lang/c/ada_fuzz_header.h:73:9: error: cannot initialize a variable of type 'char *' with an rvalue of type 'void *'
  char *ptr = calloc(1, len);
        ^     ~~~~~~~~~~~~~~
/src/fuzz-headers/lang/c/ada_fuzz_header.h:80:9: error: cannot initialize a variable of type 'char *' with an rvalue of type 'void *'
  char *ptr = malloc(2);
        ^     ~~~~~~~~~
/src/fuzz-headers/lang/c/ada_fuzz_header.h:134:9: error: cannot initialize a variable of type 'char *' with an rvalue of type 'void *'
  char *filename = malloc(10);
        ^          ~~~~~~~~~~
/src/fuzz_utils.cpp:45:5: error: use of undeclared identifier 'register_hooks'
    register_hooks(pool);
    ^
/src/fuzz_utils.cpp:71:28: error: use of undeclared identifier 'BYTES_SIZE'
  size_t to_get = rand() % BYTES_SIZE;
                           ^
/src/fuzz_utils.cpp:78:28: error: use of undeclared identifier 'DATA_SIZE'
  size_t to_get = rand() % DATA_SIZE;
                           ^
/src/fuzz_utils.cpp:92:28: error: use of undeclared identifier 'FILENAME_SIZE'
  size_t to_get = rand() % FILENAME_SIZE;
                           ^
9 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
