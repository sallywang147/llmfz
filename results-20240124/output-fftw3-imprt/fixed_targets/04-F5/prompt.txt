Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

extern "C" {
#include "planner.h"
#include "scanner.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  struct planner_s ego;
  struct scanner_s sc;

  ego.n_files = stream.ConsumeIntegral<uint32_t>();
  ego.max_files = stream.ConsumeIntegral<uint32_t>();
  ego.files = (struct file_s*)malloc(ego.max_files * sizeof(struct file_s));
  for (unsigned int i = 0; i < ego.n_files; i++) {
    ego.files[i].name = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange<size_t>(0, 100));
    ego.files[i].size = stream.ConsumeIntegral<uint32_t>();
  }

  sc.n_files = stream.ConsumeIntegral<uint32_t>();
  sc.max_files = stream.ConsumeIntegral<uint32_t>();
  sc.files = (struct file_s*)malloc(sc.max_files * sizeof(struct file_s));
  for (unsigned int i = 0; i < sc.n_files; i++) {
    sc.files[i].name = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange<size_t>(0, 100));
    sc.files[i].size = stream.ConsumeIntegral<uint32_t>();
  }

  imprt(&ego, &sc);

  free(ego.files);
  free(sc.files);

  return 0;
}
</code>

The code has the following build issues:
<error>
/src/fftw3_fuzzer.cc:9:10: fatal error: 'planner.h' file not found
#include "planner.h"
         ^~~~~~~~~~~
1 error generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
