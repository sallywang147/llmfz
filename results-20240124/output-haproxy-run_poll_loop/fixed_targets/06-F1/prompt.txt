Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
 #include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>

#include "event2/event.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  // Event base and event.
  struct event_base* base = event_base_new();
  struct event ev;
  event_assign(&ev, base, -1, EV_READ | EV_PERSIST, nullptr, nullptr);

  // Set up the timeout.
  const time_t timeout_seconds = stream.ConsumeIntegralInRange<time_t>(0, 10);
  const time_t timeout_microseconds =
      stream.ConsumeIntegralInRange<time_t>(0, 1000000);
  struct timeval timeout = {timeout_seconds, timeout_microseconds};

  // Set up the event base.
  event_base_set(base, &ev);
  event_base_loop(base, EVLOOP_ONCE | EVLOOP_NONBLOCK, timeout);

  // Clean up.
  event_base_free(base);

  return 0;
}
</code>

The code has the following build issues:
<error>
The target function `void run_poll_loop()` was not called by the fuzz target `LLVMFuzzerTestOneInput`.YOU MUST CALL FUNCTION `void run_poll_loop()` INSIDE FUNCTION `LLVMFuzzerTestOneInput`.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
