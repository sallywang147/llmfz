Using seed corpus: cjson_read_fuzzer_seed_corpus.zip
/workspace/out/libfuzzer-address-x86_64/cjson_read_fuzzer -rss_limit_mb=2560 -timeout=25 -print_final_stats=1 -max_total_time=30 -len_control=0 /workspace/corpus/cjson_read_fuzzer -dict=cjson_read_fuzzer.dict < /dev/null
Dictionary: 37 entries
INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 4078453566
INFO: Loaded 1 modules   (1234 inline 8-bit counters): 1234 [0x6015e0, 0x601ab2), 
INFO: Loaded 1 PC tables (1234 PCs): 1234 [0x5b7c10,0x5bc930), 
INFO:       14 files found in /workspace/corpus/cjson_read_fuzzer
INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
INFO: seed corpus: files: 14 min: 52b max: 3465b total: 9002b rss: 35Mb
=================================================================
==14==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6060000009b4 at pc 0x0000004c3ce9 bp 0x7ffd7509c4e0 sp 0x7ffd7509bca8
READ of size 53 at 0x6060000009b4 thread T0
SCARINESS: 26 (multi-byte-read-heap-buffer-overflow)
    #0 0x4c3ce8 in strlen /src/llvm-project/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:389:5
    #1 0x56f452 in cJSON_ParseWithOpts /src/cjson/cJSON.c:1094:21
    #2 0x56f452 in cJSON_Parse /src/cjson/cJSON.c:1182:12
    #3 0x56c407 in LLVMFuzzerTestOneInput /src/cjson/fuzzing/cjson_read_fuzzer.c:25:12
    #4 0x43ddd3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #5 0x43d5ba in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:514:3
    #6 0x43f424 in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::__Fuzzer::vector<fuzzer::SizedFile, std::__Fuzzer::allocator<fuzzer::SizedFile> >&) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:826:7
    #7 0x43f659 in fuzzer::Fuzzer::Loop(std::__Fuzzer::vector<fuzzer::SizedFile, std::__Fuzzer::allocator<fuzzer::SizedFile> >&) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:857:3
    #8 0x42ecbf in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:912:6
    #9 0x458312 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #10 0x7fae2e529082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: eebe5d5f4b608b8a53ec446b63981bba373ca0ca)
    #11 0x41f6fd in _start (out/libfuzzer-address-x86_64/cjson_read_fuzzer+0x41f6fd)

DEDUP_TOKEN: strlen--cJSON_ParseWithOpts--cJSON_Parse
0x6060000009b4 is located 0 bytes to the right of 52-byte region [0x606000000980,0x6060000009b4)
allocated by thread T0 here:
    #0 0x52ef66 in __interceptor_malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:69:3
    #1 0x56c3e9 in LLVMFuzzerTestOneInput /src/cjson/fuzzing/cjson_read_fuzzer.c:20:21
    #2 0x43ddd3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #3 0x43d5ba in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:514:3
    #4 0x43f424 in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::__Fuzzer::vector<fuzzer::SizedFile, std::__Fuzzer::allocator<fuzzer::SizedFile> >&) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:826:7
    #5 0x43f659 in fuzzer::Fuzzer::Loop(std::__Fuzzer::vector<fuzzer::SizedFile, std::__Fuzzer::allocator<fuzzer::SizedFile> >&) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:857:3
    #6 0x42ecbf in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:912:6
    #7 0x458312 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #8 0x7fae2e529082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: eebe5d5f4b608b8a53ec446b63981bba373ca0ca)

DEDUP_TOKEN: __interceptor_malloc--LLVMFuzzerTestOneInput--fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/llvm-project/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:389:5 in strlen
Shadow bytes around the buggy address:
  0x0c0c7fff80e0: fd fd fd fd fa fa fa fa fd fd fd fd fd fd fd fd
  0x0c0c7fff80f0: fa fa fa fa fd fd fd fd fd fd fd fd fa fa fa fa
  0x0c0c7fff8100: fd fd fd fd fd fd fd fd fa fa fa fa fd fd fd fd
  0x0c0c7fff8110: fd fd fd fd fa fa fa fa 00 00 00 00 00 00 04 fa
  0x0c0c7fff8120: fa fa fa fa 00 00 00 00 00 00 04 fa fa fa fa fa
=>0x0c0c7fff8130: 00 00 00 00 00 00[04]fa fa fa fa fa fa fa fa fa
  0x0c0c7fff8140: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c0c7fff8150: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c0c7fff8160: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c0c7fff8170: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c0c7fff8180: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==14==ABORTING
MS: 0 ; base unit: 0000000000000000000000000000000000000000
0x62,0x66,0x5b,0xa,0x20,0x20,0x20,0x20,0x5b,0x30,0x2c,0x20,0x2d,0x31,0x2c,0x20,0x30,0x5d,0x2c,0xa,0x20,0x20,0x20,0x20,0x5b,0x31,0x2c,0x20,0x30,0x2c,0x20,0x30,0x5d,0x2c,0xa,0x20,0x20,0x20,0x20,0x5b,0x30,0x2c,0x20,0x30,0x2c,0x20,0x31,0x5d,0xa,0x9,0x5d,0xa,
bf[\012    [0, -1, 0],\012    [1, 0, 0],\012    [0, 0, 1]\012\011]\012
artifact_prefix='./'; Test unit written to ./crash-6e7ededecf2536d4e43e05f42c71f027c0f9e2c1
Base64: YmZbCiAgICBbMCwgLTEsIDBdLAogICAgWzEsIDAsIDBdLAogICAgWzAsIDAsIDFdCgldCg==
stat::number_of_executed_units: 2
stat::average_exec_per_sec:     0
stat::new_units_added:          0
stat::slowest_unit_time_sec:    0
stat::peak_rss_mb:              36
