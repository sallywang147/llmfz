Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
 #include <hb-ot.h>
#include <hb-shape.h>
#include <hb-fuzzer.hh>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)
{
  alloc_state = _fuzzing_alloc_state(data, size);
  hb_blob_t *blob = hb_blob_create((const char *)data, size,
                                   HB_MEMORY_MODE_READONLY, nullptr, nullptr);
  hb_face_t *face = hb_face_create(blob, 0);
  hb_font_t *font = hb_font_create(face);
  hb_shape_plan_t *plan = hb_shape_plan_create(font, nullptr, nullptr, 0);
  hb_buffer_t *buffer = hb_buffer_create();
  hb_buffer_add_utf8(buffer, "Hello, world!", 13, 0, 13);
  hb_shape_plan_execute(plan, buffer, nullptr, 0);

  hb_glyph_info_t *info = hb_buffer_get_glyph_infos(buffer, nullptr);
  double x = 0;
  for (unsigned int i = 0; i < hb_buffer_get_length(buffer); i++)
  {
    x += hb_shape_justify::$_3{}.operator(&info[i], x);
  }

  hb_buffer_destroy(buffer);
  hb_shape_plan_destroy(plan);
  hb_font_destroy(font);
  hb_face_destroy(face);
  hb_blob_destroy(blob);
  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
