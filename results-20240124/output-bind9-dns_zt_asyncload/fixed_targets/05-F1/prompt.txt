Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
 #include <isc/buffer.h>
#include <isc/file.h>
#include <isc/mem.h>
#include <isc/mutex.h>
#include <isc/random.h>
#include <isc/result.h>
#include <isc/socket.h>
#include <isc/task.h>
#include <isc/thread.h>
#include <isc/util.h>

#include <dns/db.h>
#include <dns/dispatch.h>
#include <dns/dnssec.h>
#include <dns/journal.h>
#include <dns/keytable.h>
#include <dns/rdataset.h>
#include <dns/rdatasetiter.h>
#include <dns/rdatalist.h>
#include <dns/resolver.h>
#include <dns/zt.h>

#include <dst/dst.h>

static isc_mem_t *mctx;
static isc_taskmgr_t *taskmgr;
static isc_socketmgr_t *socketmgr;
static isc_timermgr_t *timermgr;
static isc_log_t *lctx;
static isc_entropy_t *entropy;
static isc_random_t *random;
static isc_bufferlist_t *blist;
static isc_mutex_t *lock;
static unsigned int nthreads;
static unsigned int nrunning;
static int nfiles;
static unsigned int nerrors;
static unsigned int nsuccesses;
static unsigned int nskipped;

static void
task_done(isc_task_t *task, isc_event_t *event) {
	isc_result_t result;
	struct dns_zt *zt = event->ev_arg;

	UNUSED(task);

	result = dns_zt_asyncload(zt, true, NULL, NULL);
	if (result != ISC_R_SUCCESS) {
		isc_log_write(lctx, ISC_LOG_ERROR, "dns_zt_asyncload() failed: %s",
			      isc_result_totext(result));
		nerrors++;
	} else {
		nsuccesses++;
	}

	isc_task_detach(&task);
	isc_event_free(&event);
	dns_zt_detach(&zt);

	isc_mutex_lock(lock);
	nrunning--;
	isc_mutex_unlock(lock);
}

static void
run_task(void *arg) {
	isc_task_t *task;
	isc_event_t *event;
	struct dns_zt *zt;

	UNUSED(arg);

	isc_mutex_lock(lock);
	while (nrunning >= nthreads)
		isc_cond_wait(&taskmgr->cond, lock);
	nrunning++;
	isc_mutex_unlock(lock);

	zt = dns_zt_create(mctx, nfiles);
	if (zt == NULL) {
		isc_log_write(lctx, ISC_LOG_ERROR, "dns_zt_create() failed");
		nerrors++;
		goto cleanup;
	}

	event = isc_event_allocate(mctx, taskmgr, task_done, zt);
	if (event == NULL) {
		isc_log_write(lctx, ISC_LOG_ERROR, "isc_event_allocate() failed");
		nerrors++;
		goto cleanup;
	}

	task = isc_task_create(taskmgr, 0, &run_task, NULL);
	if (task == NULL) {
		isc_log_write(lctx, ISC_LOG_ERROR, "isc_task_create() failed");
		nerrors++;
		goto cleanup;
	}

	isc_task_onshutdown(task, isc_event_free, event);

	isc_event_activate(event, task, ISC_TIME_NOW);
	isc_task_detach(&task);

	return;

 cleanup:
	isc_mutex_lock(lock);
	nrunning--;
	isc_mutex_unlock(lock);
}

int
LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
	isc_result_t result;
	isc_task_t *task;
	unsigned int i;

	if (mctx == NULL) {
		mctx = isc_mem_create(0, 0);
		if (mctx == NULL)
			return (0);

		taskmgr = isc_taskmgr_create(mctx, 100, 0);
		if (taskmgr == NULL)
			return (0);

		socketmgr = isc_socketmgr_create(mctx, 100);
		if (socketmgr == NULL)
			return (0);

		timermgr = isc_timermgr_create(mctx, 100);
		if (timermgr == NULL)
			return (0);

		lctx = isc_log_create(mctx, &isc_log_default_category,
				      &isc_log_default_methods);
		if (lctx == NULL)
			return (0);

		entropy = isc_entropy_create(mctx);
		if (entropy == NULL)
			return (0);

		random = isc_random_create(mctx, entropy);
		if (random == NULL)
			return (0);

		blist = isc_bufferlist_create(mctx);
		if (blist == NULL)
			return (0);

		lock = isc_mutex_create(mctx);
		if (lock == NULL)
			return (0);
	}

	nthreads = data[0];
	nfiles = data[1];
	if (nfiles > 10000)
		nfiles = 10000;

	for (i = 0; i < nthreads; i++) {
		task = isc_task_create(taskmgr, 0, &run_task, NULL);
		if (task == NULL) {
			isc_log_write(lctx, ISC_LOG_ERROR,
				      "isc_task_create() failed");
			nerrors++;
			continue;
		}

		isc_task_detach(&task);
	}

	isc_mutex_lock(lock);
	while (nrunning > 0)
		isc_cond_wait(&taskmgr->cond, lock);
	isc_mutex_unlock(lock);

	result = isc_mem_destroy(&mctx);
	if (result != ISC_R_SUCCESS)
		return (0);

	return (0);
}
</code>

The code has the following build issues:
<error>
isc_lex_gettoken.c:7:10: fatal error: 'isc/socket.h' file not found
#include <isc/socket.h>
         ^~~~~~~~~~~~~~
1 error generated.

Fix failure
In file included from isc_lex_gettoken.cpp:1:
In file included from ../lib/isc/include/isc/buffer.h:112:
../lib/isc/include/isc/mem.h:398:41: error: expected ')'
isc__mempool_create(isc_mem_t *restrict mctx, const size_t element_size,
                                        ^
../lib/isc/include/isc/mem.h:398:20: note: to match this '('
isc__mempool_create(isc_mem_t *restrict mctx, const size_t element_size,
                   ^
../lib/isc/include/isc/mem.h:419:47: error: expected ')'
isc__mempool_destroy(isc_mempool_t **restrict mpctxp _ISC_MEM_FLARG);
                                              ^
../lib/isc/include/isc/mem.h:419:21: note: to match this '('
isc__mempool_destroy(isc_mempool_t **restrict mpctxp _ISC_MEM_FLARG);
                    ^
../lib/isc/include/isc/mem.h:429:45: error: expected ')'
isc_mempool_setname(isc_mempool_t *restrict mpctx, const char *name);
                                            ^
../lib/isc/include/isc/mem.h:429:20: note: to match this '('
isc_mempool_setname(isc_mempool_t *restrict mpctx, const char *name);
                   ^
../lib/isc/include/isc/mem.h:452:48: error: expected ')'
isc_mempool_getfreemax(isc_mempool_t *restrict mpctx);
                                               ^
../lib/isc/include/isc/mem.h:452:23: note: to match this '('
isc_mempool_getfreemax(isc_mempool_t *restrict mpctx);
                      ^
../lib/isc/include/isc/mem.h:458:48: error: expected ')'
isc_mempool_setfreemax(isc_mempool_t *restrict mpctx, const unsigned int limit);
                                               ^
../lib/isc/include/isc/mem.h:458:23: note: to match this '('
isc_mempool_setfreemax(isc_mempool_t *restrict mpctx, const unsigned int limit);
                      ^
../lib/isc/include/isc/mem.h:464:50: error: expected ')'
isc_mempool_getfreecount(isc_mempool_t *restrict mpctx);
                                                 ^
../lib/isc/include/isc/mem.h:464:25: note: to match this '('
isc_mempool_getfreecount(isc_mempool_t *restrict mpctx);
                        ^
../lib/isc/include/isc/mem.h:470:50: error: expected ')'
isc_mempool_getallocated(isc_mempool_t *restrict mpctx);
                                                 ^
../lib/isc/include/isc/mem.h:470:25: note: to match this '('
isc_mempool_getallocated(isc_mempool_t *restrict mpctx);
                        ^
../lib/isc/include/isc/mem.h:476:50: error: expected ')'
isc_mempool_getfillcount(isc_mempool_t *restrict mpctx);
                                                 ^
../lib/isc/include/isc/mem.h:476:25: note: to match this '('
isc_mempool_getfillcount(isc_mempool_t *restrict mpctx);
                        ^
../lib/isc/include/isc/mem.h:483:50: error: expected ')'
isc_mempool_setfillcount(isc_mempool_t *restrict mpctx,
                                                 ^
../lib/isc/include/isc/mem.h:483:25: note: to match this '('
isc_mempool_setfillcount(isc_mempool_t *restrict mpctx,
                        ^
In file included from isc_lex_gettoken.cpp:1:
../lib/isc/include/isc/buffer.h:197:68: error: expected ')'
isc_buffer_allocate(isc_mem_t         *mctx, isc_buffer_t **restrict dynbuffer,
                                                                     ^
../lib/isc/include/isc/buffer.h:197:20: note: to match this '('
isc_buffer_allocate(isc_mem_t         *mctx, isc_buffer_t **restrict dynbuffer,
                   ^
../lib/isc/include/isc/buffer.h:213:43: error: expected ')'
isc_buffer_setmctx(isc_buffer_t *restrict b, isc_mem_t *mctx);
                                          ^
../lib/isc/include/isc/buffer.h:213:19: note: to match this '('
isc_buffer_setmctx(isc_buffer_t *restrict b, isc_mem_t *mctx);
                  ^
../lib/isc/include/isc/buffer.h:215:45: error: expected ')'
isc_buffer_clearmctx(isc_buffer_t *restrict b);
                                            ^
../lib/isc/include/isc/buffer.h:215:21: note: to match this '('
isc_buffer_clearmctx(isc_buffer_t *restrict b);
                    ^
../lib/isc/include/isc/buffer.h:222:43: error: expected ')'
isc_buffer_reserve(isc_buffer_t *restrict dynbuffer, const unsigned int size);
                                          ^
../lib/isc/include/isc/buffer.h:222:19: note: to match this '('
isc_buffer_reserve(isc_buffer_t *restrict dynbuffer, const unsigned int size);
                  ^
../lib/isc/include/isc/buffer.h:236:41: error: expected ')'
isc_buffer_free(isc_buffer_t **restrict dynbuffer);
                                        ^
../lib/isc/include/isc/buffer.h:236:16: note: to match this '('
isc_buffer_free(isc_buffer_t **restrict dynbuffer);
               ^
../lib/isc/include/isc/buffer.h:252:44: error: expected ')'
isc_buffer_initnull(isc_buffer_t *restrict b);
                                           ^
../lib/isc/include/isc/buffer.h:252:20: note: to match this '('
isc_buffer_initnull(isc_buffer_t *restrict b);
                   ^
../lib/isc/include/isc/buffer.h:255:42: error: expected ')'
isc_buffer_reinit(isc_buffer_t *restrict b, void *base,
                                         ^
../lib/isc/include/isc/buffer.h:255:18: note: to match this '('
isc_buffer_reinit(isc_buffer_t *restrict b, void *base,
                 ^
../lib/isc/include/isc/buffer.h:270:46: error: expected ')'
isc_buffer_trycompact(isc_buffer_t *restrict b);
                                             ^
../lib/isc/include/isc/buffer.h:270:22: note: to match this '('
isc_buffer_trycompact(isc_buffer_t *restrict b);
                     ^
../lib/isc/include/isc/buffer.h:272:43: error: expected ')'
isc_buffer_compact(isc_buffer_t *restrict b);
                                          ^
../lib/isc/include/isc/buffer.h:272:19: note: to match this '('
isc_buffer_compact(isc_buffer_t *restrict b);
                  ^
../lib/isc/include/isc/buffer.h:292:51: error: expected ')'
isc_buffer_peekuint8(const isc_buffer_t *restrict b, uint8_t *valp);
                                                  ^
../lib/isc/include/isc/buffer.h:292:21: note: to match this '('
isc_buffer_peekuint8(const isc_buffer_t *restrict b, uint8_t *valp);
                    ^
fatal error: too many errors emitted, stopping now [-ferror-limit=]
20 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
