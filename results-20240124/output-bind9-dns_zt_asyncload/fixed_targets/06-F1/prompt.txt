Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
 #include <isc/mem.h>
#include <isc/task.h>
#include <isc/thread.h>
#include <isc/util.h>

#include <dns/db.h>
#include <dns/dbiterator.h>
#include <dns/zt.h>

#include "fuzz.h"

static isc_mem_t *mctx = NULL;
static isc_taskmgr_t *taskmgr = NULL;
static isc_threadmgr_t *threadmgr = NULL;
static isc_task_t *task = NULL;

static dns_zt_t *zt = NULL;
static dns_db_t *db = NULL;
static dns_dbiterator_t *dbiterator = NULL;

static isc_result_t
db_load(dns_zt_t *zt, bool newonly, void *arg) {
	return (ISC_R_SUCCESS);
}

static void
db_load_done(void *arg, isc_result_t result) {
	return;
}

int
LLVMFuzzerInitialize(int *argc ISC_ATTR_UNUSED, char ***argv ISC_ATTR_UNUSED) {
	isc_result_t result;

	isc_mem_create(&mctx);
	isc_taskmgr_create(mctx, 1, 0, &taskmgr);
	isc_threadmgr_create(mctx, 1, &threadmgr);

	result = dns_zt_create(mctx, &zt);
	if (result != ISC_R_SUCCESS) {
		fprintf(stderr, "dns_zt_create failed: %s\n",
			isc_result_totext(result));
		return (1);
	}

	result = dns_db_create(mctx, "rbt", dns_rdataclass_in, &db);
	if (result != ISC_R_SUCCESS) {
		fprintf(stderr, "dns_db_create failed: %s\n",
			isc_result_totext(result));
		return (1);
	}

	result = dns_dbiterator_create(mctx, db, 0, &dbiterator);
	if (result != ISC_R_SUCCESS) {
		fprintf(stderr, "dns_dbiterator_create failed: %s\n",
			isc_result_totext(result));
		return (1);
	}

	return (0);
}

int
LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
	isc_result_t result;

	result = dns_zt_asyncload(zt, false, db_load, (char *)data);
	if (result != ISC_R_SUCCESS) {
		fprintf(stderr, "dns_zt_asyncload failed: %s\n",
			isc_result_totext(result));
		return (1);
	}

	db_load_done(NULL, result);

	return (0);
}
</code>

The code has the following build issues:
<error>
isc_lex_gettoken.c:2:10: fatal error: 'isc/task.h' file not found
#include <isc/task.h>
         ^~~~~~~~~~~~
1 error generated.

Fix failure
In file included from isc_lex_gettoken.cpp:1:
../lib/isc/include/isc/mem.h:398:41: error: expected ')'
isc__mempool_create(isc_mem_t *restrict mctx, const size_t element_size,
                                        ^
../lib/isc/include/isc/mem.h:398:20: note: to match this '('
isc__mempool_create(isc_mem_t *restrict mctx, const size_t element_size,
                   ^
../lib/isc/include/isc/mem.h:419:47: error: expected ')'
isc__mempool_destroy(isc_mempool_t **restrict mpctxp _ISC_MEM_FLARG);
                                              ^
../lib/isc/include/isc/mem.h:419:21: note: to match this '('
isc__mempool_destroy(isc_mempool_t **restrict mpctxp _ISC_MEM_FLARG);
                    ^
../lib/isc/include/isc/mem.h:429:45: error: expected ')'
isc_mempool_setname(isc_mempool_t *restrict mpctx, const char *name);
                                            ^
../lib/isc/include/isc/mem.h:429:20: note: to match this '('
isc_mempool_setname(isc_mempool_t *restrict mpctx, const char *name);
                   ^
../lib/isc/include/isc/mem.h:452:48: error: expected ')'
isc_mempool_getfreemax(isc_mempool_t *restrict mpctx);
                                               ^
../lib/isc/include/isc/mem.h:452:23: note: to match this '('
isc_mempool_getfreemax(isc_mempool_t *restrict mpctx);
                      ^
../lib/isc/include/isc/mem.h:458:48: error: expected ')'
isc_mempool_setfreemax(isc_mempool_t *restrict mpctx, const unsigned int limit);
                                               ^
../lib/isc/include/isc/mem.h:458:23: note: to match this '('
isc_mempool_setfreemax(isc_mempool_t *restrict mpctx, const unsigned int limit);
                      ^
../lib/isc/include/isc/mem.h:464:50: error: expected ')'
isc_mempool_getfreecount(isc_mempool_t *restrict mpctx);
                                                 ^
../lib/isc/include/isc/mem.h:464:25: note: to match this '('
isc_mempool_getfreecount(isc_mempool_t *restrict mpctx);
                        ^
../lib/isc/include/isc/mem.h:470:50: error: expected ')'
isc_mempool_getallocated(isc_mempool_t *restrict mpctx);
                                                 ^
../lib/isc/include/isc/mem.h:470:25: note: to match this '('
isc_mempool_getallocated(isc_mempool_t *restrict mpctx);
                        ^
../lib/isc/include/isc/mem.h:476:50: error: expected ')'
isc_mempool_getfillcount(isc_mempool_t *restrict mpctx);
                                                 ^
../lib/isc/include/isc/mem.h:476:25: note: to match this '('
isc_mempool_getfillcount(isc_mempool_t *restrict mpctx);
                        ^
../lib/isc/include/isc/mem.h:483:50: error: expected ')'
isc_mempool_setfillcount(isc_mempool_t *restrict mpctx,
                                                 ^
../lib/isc/include/isc/mem.h:483:25: note: to match this '('
isc_mempool_setfillcount(isc_mempool_t *restrict mpctx,
                        ^
isc_lex_gettoken.cpp:2:10: fatal error: 'isc/task.h' file not found
#include <isc/task.h>
         ^~~~~~~~~~~~
10 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
