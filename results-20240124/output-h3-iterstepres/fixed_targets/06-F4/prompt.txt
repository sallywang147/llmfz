Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <algorithm>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "fuzzer/FuzzedDataProvider.h"
#include "iter.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  struct IterCellsResolution itR;
  itR.x = stream.ConsumeIntegral<int64_t>();
  itR.y = stream.ConsumeIntegral<int64_t>();
  itR.z = stream.ConsumeIntegral<int64_t>();
  itR.res = stream.ConsumeIntegral<int32_t>();
  itR.res_cur = stream.ConsumeIntegral<int32_t>();
  itR.level = stream.ConsumeIntegral<int32_t>();
  itR.level_cur = stream.ConsumeIntegral<int32_t>();
  itR.next_level = stream.ConsumeIntegral<int32_t>();
  itR.next_level_cur = stream.ConsumeIntegral<int32_t>();
  itR.next_level_start = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_start_cur = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end_cur = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_start_inc = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_start_inc_cur = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end_inc = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end_inc_cur = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_start_dec = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_start_dec_cur = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end_dec = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end_dec_cur = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_start_inc_dec = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_start_inc_dec_cur = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end_inc_dec = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end_inc_dec_cur = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_start_dec_inc = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_start_dec_inc_cur = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end_dec_inc = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end_dec_inc_cur = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_start_dec_dec = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_start_dec_dec_cur = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end_dec_dec = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end_dec_dec_cur = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_start_inc_dec_dec = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_start_inc_dec_dec_cur = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end_inc_dec_dec = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end_inc_dec_dec_cur = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_start_dec_inc_dec = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_start_dec_inc_dec_cur = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end_dec_inc_dec = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end_dec_inc_dec_cur = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_start_dec_dec_inc = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_start_dec_dec_inc_cur = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end_dec_dec_inc = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end_dec_dec_inc_cur = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_start_dec_dec_dec = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_start_dec_dec_dec_cur = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end_dec_dec_dec = stream.ConsumeIntegral<uint64_t>();
  itR.next_level_end_dec_dec_dec_cur = stream.ConsumeIntegral<uint64_t>();
  iterStepRes(&itR);
  return 0;
}
</code>

The code has the following build issues:
<error>
/src/h3//src/apps/fuzzers/fuzzerResolutions.c:1:10: fatal error: 'algorithm' file not found
#include <algorithm>
         ^~~~~~~~~~~
1 error generated.

Fix failure
/src/h3//src/apps/fuzzers/fuzzerResolutions.cpp:8:10: fatal error: 'iter.h' file not found
#include "iter.h"
         ^~~~~~~~
1 error generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
