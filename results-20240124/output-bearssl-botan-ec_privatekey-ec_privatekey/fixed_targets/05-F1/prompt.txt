Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
 #include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <botan/botan.h>
#include <botan/internal/botan_rng.h>
#include <fuzzer/FuzzedDataProvider.h>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  std::vector<uint8_t> key_data = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange<size_t>(0, size));
  Botan::EC_PrivateKey* key = new Botan::EC_PrivateKey(key_data.data(), key_data.size());

  std::vector<uint8_t> alg_id_data = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange<size_t>(0, size));
  Botan::AlgorithmIdentifier alg_id(alg_id_data.data(), alg_id_data.size());

  std::vector<uint8_t> passwd = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange<size_t>(0, size));
  char* passwd_ptr = reinterpret_cast<char*>(passwd.data());

  std::vector<uint8_t> salt = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange<size_t>(0, size));
  char* salt_ptr = reinterpret_cast<char*>(salt.data());

  size_t iterations = stream.ConsumeIntegralInRange<size_t>(0, std::numeric_limits<size_t>::max());

  bool use_pbkdf2 = stream.ConsumeBool();

  key->EC_PrivateKey(key, &passwd_ptr, &alg_id, salt_ptr, iterations, use_pbkdf2);

  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
