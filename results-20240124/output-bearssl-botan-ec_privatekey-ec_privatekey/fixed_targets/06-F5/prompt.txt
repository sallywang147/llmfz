Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <botan/botan.h>
#include <botan/ecdsa.h>

#include <iostream>

extern "C" {
#include <botan/pkcs8.h>
}

int main() {
    Botan::LibraryInitializer init;

    // Generate a new ECDSA key pair
    Botan::AutoSeeded_RNG rng;
    Botan::EC_PrivateKey ec_private_key(rng, Botan::OID("secp256r1"));

    // Export the private key in PKCS#8 format
    std::vector<uint8_t> pkcs8_encoded_key = Botan::PKCS8::PEM_encode(ec_private_key);

    // Import the private key from PKCS#8 format
    Botan::DataSource_Memory pkcs8_source(pkcs8_encoded_key);
    Botan::PKCS8::BER_Decoder pkcs8_decoder(pkcs8_source);
    Botan::Private_Key* imported_private_key = pkcs8_decoder.decode<Botan::Private_Key>();

    // Check if the imported private key is valid
    if (imported_private_key) {
        std::cout << "Successfully imported private key" << std::endl;
    } else {
        std::cout << "Error importing private key" << std::endl;
    }

    return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
