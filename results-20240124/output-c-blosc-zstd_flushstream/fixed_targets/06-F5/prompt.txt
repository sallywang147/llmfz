Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <zstd.h>

extern "C" {
#include "zstd_errors.h"
}

extern "C" size_t LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  ZSTD_CCtx *cctx = ZSTD_createCCtx();
  if (!cctx) {
    return 0;
  }

  ZSTD_inBuffer input = {data, size, 0};
  ZSTD_outBuffer output = {NULL, 0, 0};

  size_t ret;
  do {
    ret = ZSTD_compressStream(cctx, &output, &input);
  } while (ret == ZSTD_OK);

  if (ret == ZSTD_error_dstSize_tooSmall) {
    output.dstCapacity = output.pos + ZSTD_compressBound(input.size);
    output.dst = (uint8_t *)malloc(output.dstCapacity);
    ret = ZSTD_compressStream(cctx, &output, &input);
  }

  ZSTD_freeCCtx(cctx);
  free(output.dst);

  if (ret != ZSTD_OK) {
    return 0;
  }

  return size;
}
</code>

The code has the following build issues:
<error>
The target function `size_t ZSTD_flushStream(struct ZSTD_CCtx_s * , struct ZSTD_inBuffer_s * )` was not called by the fuzz target `LLVMFuzzerTestOneInput`.YOU MUST CALL FUNCTION `size_t ZSTD_flushStream(struct ZSTD_CCtx_s * , struct ZSTD_inBuffer_s * )` INSIDE FUNCTION `LLVMFuzzerTestOneInput`.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
