Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stddef.h>
#include <stdint.h>
#include <string.h>
#include <zstd.h>
#include <fuzzer/FuzzedDataProvider.h>

extern "C" size_t LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider fdp(data, size);
  ZSTD_CCtx *cctx = ZSTD_createCCtx();
  ZSTD_inBuffer input;
  ZSTD_outBuffer output;

  while (fdp.remaining_bytes() > 0) {
    size_t len = fdp.ConsumeBytes<uint8_t>(fdp.remaining_bytes());
    input.src = fdp.ConsumeBytes<uint8_t>(len);
    input.size = len;
    input.pos = 0;
    output.dst = fdp.ConsumeBytes<uint8_t>(fdp.remaining_bytes());
    output.size = fdp.remaining_bytes();
    output.pos = 0;

    size_t compressed_size = ZSTD_compressStream(cctx, &output, &input);
    if (ZSTD_isError(compressed_size)) {
      break;
    }
  }

  ZSTD_freeCCtx(cctx);
  return 0;
}
</code>

The code has the following build issues:
<error>
The target function `size_t ZSTD_flushStream(struct ZSTD_CCtx_s * , struct ZSTD_inBuffer_s * )` was not called by the fuzz target `LLVMFuzzerTestOneInput`.YOU MUST CALL FUNCTION `size_t ZSTD_flushStream(struct ZSTD_CCtx_s * , struct ZSTD_inBuffer_s * )` INSIDE FUNCTION `LLVMFuzzerTestOneInput`.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
