Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include "roaring/roaring.h"
#include "fuzzer/FuzzedDataProvider.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  FuzzedDataProvider fdp(data, size);
  size_t num_bitmaps = fdp.ConsumeIntegralInRange<size_t>(0, 1000);
  std::vector<roaring_bitmap_t*> bitmaps;
  for (size_t i = 0; i < num_bitmaps; i++) {
    size_t bitmap_size = fdp.ConsumeIntegralInRange<size_t>(0, 1000);
    std::vector<uint32_t> bitmap_data = fdp.ConsumeIntegralVector<uint32_t>(bitmap_size, 0, 100000);
    roaring_bitmap_t* bitmap = roaring_bitmap_create();
    for (uint32_t value : bitmap_data) {
      roaring_bitmap_add(bitmap, value);
    }
    bitmaps.push_back(bitmap);
  }
  roaring_bitmap_t* result = roaring_bitmap_or_many(num_bitmaps, reinterpret_cast<const roaring_bitmap_t* const*>(bitmaps.data()));
  roaring_bitmap_free(result);
  for (roaring_bitmap_t* bitmap : bitmaps) {
    roaring_bitmap_free(bitmap);
  }
  return 0;
}
</code>

The code has the following build issues:
<error>
/src/croaring_fuzzer_cc.cc:10:45: error: no template named 'ConsumeIntegralVector' in 'FuzzedDataProvider'; did you mean 'ConsumeIntegral'?
    std::vector<uint32_t> bitmap_data = fdp.ConsumeIntegralVector<uint32_t>(bitmap_size, 0, 100000);
                                            ^~~~~~~~~~~~~~~~~~~~~
                                            ConsumeIntegral
/usr/local/lib/clang/15.0.0/include/fuzzer/FuzzedDataProvider.h:194:45: note: 'ConsumeIntegral' declared here
template <typename T> T FuzzedDataProvider::ConsumeIntegral() {
                                            ^
/src/croaring_fuzzer_cc.cc:10:45: error: no template named 'ConsumeIntegralVector' in 'FuzzedDataProvider'; did you mean 'ConsumeIntegral'?
    std::vector<uint32_t> bitmap_data = fdp.ConsumeIntegralVector<uint32_t>(bitmap_size, 0, 100000);
                                            ^~~~~~~~~~~~~~~~~~~~~
                                            ConsumeIntegral
/usr/local/lib/clang/15.0.0/include/fuzzer/FuzzedDataProvider.h:194:45: note: 'ConsumeIntegral' declared here
template <typename T> T FuzzedDataProvider::ConsumeIntegral() {
                                            ^
/src/croaring_fuzzer_cc.cc:10:67: error: unexpected type name 'uint32_t': expected expression
    std::vector<uint32_t> bitmap_data = fdp.ConsumeIntegralVector<uint32_t>(bitmap_size, 0, 100000);
                                                                  ^
/src/croaring_fuzzer_cc.cc:10:45: error: no member named 'ConsumeIntegralVector' in 'FuzzedDataProvider'
    std::vector<uint32_t> bitmap_data = fdp.ConsumeIntegralVector<uint32_t>(bitmap_size, 0, 100000);
                                        ~~~ ^
/src/croaring_fuzzer_cc.cc:17:30: error: no matching function for call to 'roaring_bitmap_or_many'
  roaring_bitmap_t* result = roaring_bitmap_or_many(num_bitmaps, reinterpret_cast<const roaring_bitmap_t* const*>(bitmaps.data()));
                             ^~~~~~~~~~~~~~~~~~~~~~
/src/croaring/include/roaring/roaring.h:211:19: note: candidate function not viable: 2nd argument ('const roaring::api::roaring_bitmap_t *const *' (aka 'const roaring::api::roaring_bitmap_s *const *')) would lose const qualifier
roaring_bitmap_t *roaring_bitmap_or_many(size_t number,
                  ^
5 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
