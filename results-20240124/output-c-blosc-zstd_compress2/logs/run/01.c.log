/workspace/out/libfuzzer-address-x86_64/compress_fuzzer -rss_limit_mb=2560 -timeout=25 -print_final_stats=1 -max_total_time=30 -len_control=0 /workspace/corpus/compress_fuzzer < /dev/null
INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 242563572
INFO: Loaded 1 modules   (19101 inline 8-bit counters): 19101 [0x8c91a8, 0x8cdc45), 
INFO: Loaded 1 PC tables (19101 PCs): 19101 [0x829528,0x873ef8), 
INFO:        0 files found in /workspace/corpus/compress_fuzzer
INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
INFO: A corpus is not provided, starting from an empty corpus
#2	INITED cov: 164 ft: 165 corp: 1/1b exec/s: 0 rss: 31Mb
=================================================================
==13==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7f9160c60038 at pc 0x000000535341 bp 0x7ffd37997790 sp 0x7ffd37996f60
READ of size 26 at 0x7f9160c60038 thread T0
SCARINESS: 41 (multi-byte-read-stack-buffer-overflow)
    #0 0x535340 in __asan_memcpy /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:22:3
    #1 0x573744 in LLVMFuzzerTestOneInput /src/c-blosc/tests/fuzz/fuzz_compress.cpp:18:3
    #2 0x444e23 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #3 0x44460a in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:514:3
    #4 0x445cd9 in fuzzer::Fuzzer::MutateAndTestOne() /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:757:19
    #5 0x4469a5 in fuzzer::Fuzzer::Loop(std::__Fuzzer::vector<fuzzer::SizedFile, std::__Fuzzer::allocator<fuzzer::SizedFile> >&) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:895:5
    #6 0x435d0f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:912:6
    #7 0x45f362 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #8 0x7f9161446082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: eebe5d5f4b608b8a53ec446b63981bba373ca0ca)
    #9 0x42674d in _start (out/libfuzzer-address-x86_64/compress_fuzzer+0x42674d)

DEDUP_TOKEN: __asan_memcpy--LLVMFuzzerTestOneInput--fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long)
Address 0x7f9160c60038 is located in stack of thread T0 at offset 56 in frame
    #0 0x5733ff in LLVMFuzzerTestOneInput /src/c-blosc/tests/fuzz/fuzz_compress.cpp:10

DEDUP_TOKEN: LLVMFuzzerTestOneInput
  This frame has 1 object(s):
    [32, 56) 'input' (line 15) <== Memory access at offset 56 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:22:3 in __asan_memcpy
Shadow bytes around the buggy address:
  0x0ff2ac183fb0: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0ff2ac183fc0: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0ff2ac183fd0: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0ff2ac183fe0: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0ff2ac183ff0: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
=>0x0ff2ac184000: f1 f1 f1 f1 00 00 00[f3]f3 f3 f3 f3 00 00 00 00
  0x0ff2ac184010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ff2ac184020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ff2ac184030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ff2ac184040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ff2ac184050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING
MS: 1 ChangeBit-; base unit: adc83b19e793491b1c6ea0fd8b46cd9f32e592fc
0x1a,
\032
artifact_prefix='./'; Test unit written to ./crash-ebdc2288a14298f5f7adf08e069b39fc42cbd909
Base64: Gg==
stat::number_of_executed_units: 3
stat::average_exec_per_sec:     3
stat::new_units_added:          0
stat::slowest_unit_time_sec:    0
stat::peak_rss_mb:              32
