Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <iostream>
#include <string>

#include "cctz/civil_time.h"
#include "cctz/time_zone.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
	FuzzedDataProvider fuzzed_data(data, size);

	cctz::time_zone tz = cctz::local_time_zone();
	std::string tz_name = tz.name();
	std::string tz_abbrev = tz.abbreviation();
	cctz::time_zone lax;
	std::string tz_name2 = fuzzed_data.ConsumeRandomLengthString();
	if (load_time_zone(tz_name2, &lax)) {
		std::chrono::system_clock::time_point tp;
		std::string date_format = fuzzed_data.ConsumeRandomLengthString();
		std::string parse_format = fuzzed_data.ConsumeRandomLengthString();
		cctz::parse(parse_format, date_format, lax, &tp);

		const auto t1 = cctz::convert(cctz::civil_second(
				fuzzed_data.ConsumeIntegral<uint32_t>(),
				fuzzed_data.ConsumeIntegral<uint32_t>(),
				fuzzed_data.ConsumeIntegral<uint32_t>(),
				fuzzed_data.ConsumeIntegral<uint32_t>(),
				fuzzed_data.ConsumeIntegral<uint32_t>(),
				fuzzed_data.ConsumeIntegral<uint32_t>()), lax);
		std::string format = fuzzed_data.ConsumeRandomLengthString();
		cctz::format(format, t1, lax);
	}

	return 0;
}
</code>

The code has the following build issues:
<error>
./fuzz_cctz.cc:14:29: error: no member named 'abbreviation' in 'cctz::time_zone'
        std::string tz_abbrev = tz.abbreviation();
                                ~~ ^
1 error generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
