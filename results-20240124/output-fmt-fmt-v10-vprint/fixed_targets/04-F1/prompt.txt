Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
 #include <cstdint>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <vector>

#include "fuzzer-common.h"
#include "fmt/core.h"

template <typename T>
void invoke(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);
  auto format_str = provider.ConsumeRemainingBytesAsString();
  auto num_args = provider.ConsumeIntegral<size_t>();
  std::vector<fmt::detail::value> args(num_args);
  for (auto& arg : args) {
    arg.type = provider.ConsumeIntegral<fmt::detail::type>();
    arg.int_value = provider.ConsumeIntegral<T>();
  }
  fmt::v10::vprint(stdout, as_chars(format_str), num_args, 0, args.data());
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  if (size <= 4) return 0;
  const auto representation = data[0];
  data += 1;
  size -= 1;
  switch (representation) {
  case 1:
    invoke<char>(data, size);
    break;
  case 2:
    invoke<signed char>(data, size);
    break;
  case 3:
    invoke<unsigned char>(data, size);
    break;
  case 4:
    invoke<short>(data, size);
    break;
  case 5:
    invoke<unsigned short>(data, size);
    break;
  case 6:
    invoke<int>(data, size);
    break;
  case 7:
    invoke<unsigned int>(data, size);
    break;
  case 8:
    invoke<long>(data, size);
    break;
  case 9:
    invoke<unsigned long>(data, size);
    break;
  case 10:
    invoke<float>(data, size);
    break;
  case 11:
    invoke<double>(data, size);
    break;
  case 12:
    invoke<long double>(data, size);
    break;
  }
  return 0;
}
</code>

The code has the following build issues:
<error>
/src/fmt/test/fuzzing/chrono-timepoint.cc:20:24: error: no matching function for call to 'as_chars'
  const char* format = as_chars(data, format_size);
                       ^~~~~~~~
/src/fmt/test/fuzzing/fuzzer-common.h:31:42: note: candidate function template not viable: requires single argument 'data', but 2 arguments were provided
template <typename T> inline const char* as_chars(const T* data) {
                                         ^
/src/fmt/test/fuzzing/chrono-timepoint.cc:35:34: error: use of class template 'value' requires template arguments
        values[i] = fmt::detail::value(assign_from_buf<int>(data));
                                 ^
/src/fmt/include/fmt/base.h:1285:35: note: template is declared here
template <typename Context> class value {
~~~~~~~~~~~~~~~~~~~~~~~~~~~       ^
/src/fmt/test/fuzzing/chrono-timepoint.cc:40:34: error: use of class template 'value' requires template arguments
        values[i] = fmt::detail::value(assign_from_buf<double>(data));
                                 ^
/src/fmt/include/fmt/base.h:1285:35: note: template is declared here
template <typename Context> class value {
~~~~~~~~~~~~~~~~~~~~~~~~~~~       ^
/src/fmt/test/fuzzing/chrono-timepoint.cc:45:34: error: use of class template 'value' requires template arguments
        values[i] = fmt::detail::value(assign_from_buf<std::string>(data));
                                 ^
/src/fmt/include/fmt/base.h:1285:35: note: template is declared here
template <typename Context> class value {
~~~~~~~~~~~~~~~~~~~~~~~~~~~       ^
/src/fmt/test/fuzzing/chrono-timepoint.cc:53:3: error: no matching function for call to 'vprint'
  fmt::v10::vprint(format, args_size, values);
  ^~~~~~~~~~~~~~~~
/src/fmt/include/fmt/base.h:2965:14: note: candidate function not viable: no known conversion from 'const char *' to 'FILE *' (aka '_IO_FILE *') for 1st argument
FMT_API void vprint(FILE* f, string_view fmt, format_args args);
             ^
/src/fmt/include/fmt/base.h:2964:14: note: candidate function not viable: requires 2 arguments, but 3 were provided
FMT_API void vprint(string_view fmt, format_args args);
             ^
5 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
