Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <algorithm>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <vector>

extern "C" {
#include "geoPolygon.h"
#include "geoBBox.h"
#include "cellBoundary.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  struct GeoPolygon geoPolygon;
  struct BBox bboxes;
  struct CellBoundary boundary;
  struct BBox boundaryBBox;
  memset(&geoPolygon, 0, sizeof(geoPolygon));
  memset(&bboxes, 0, sizeof(bboxes));
  memset(&boundary, 0, sizeof(boundary));
  memset(&boundaryBBox, 0, sizeof(boundaryBBox));

  geoPolygon.numPoints = stream.ConsumeIntegralInRange<uint32_t>(0, 100);
  geoPolygon.points =
      (struct GeoPoint*)malloc(sizeof(struct GeoPoint) * geoPolygon.numPoints);
  for (uint32_t i = 0; i < geoPolygon.numPoints; i++) {
    geoPolygon.points[i].x = stream.ConsumeIntegral<int32_t>();
    geoPolygon.points[i].y = stream.ConsumeIntegral<int32_t>();
  }

  bboxes.x1 = stream.ConsumeIntegral<int32_t>();
  bboxes.y1 = stream.ConsumeIntegral<int32_t>();
  bboxes.x2 = stream.ConsumeIntegral<int32_t>();
  bboxes.y2 = stream.ConsumeIntegral<int32_t>();

  boundary.x1 = stream.ConsumeIntegral<int32_t>();
  boundary.y1 = stream.ConsumeIntegral<int32_t>();
  boundary.x2 = stream.ConsumeIntegral<int32_t>();
  boundary.y2 = stream.ConsumeIntegral<int32_t>();

  boundaryBBox.x1 = stream.ConsumeIntegral<int32_t>();
  boundaryBBox.y1 = stream.ConsumeIntegral<int32_t>();
  boundaryBBox.x2 = stream.ConsumeIntegral<int32_t>();
  boundaryBBox.y2 = stream.ConsumeIntegral<int32_t>();

  cellBoundaryCrossesPolygon(&geoPolygon, &bboxes, &boundary, &boundaryBBox);

  free(geoPolygon.points);
  return 0;
}
</code>

The code has the following build issues:
<error>
/usr/local/lib/clang/15.0.0/include/fuzzer/FuzzedDataProvider.h:16:10: fatal error: 'algorithm' file not found
#include <algorithm>
         ^~~~~~~~~~~
1 error generated.

Fix failure
/src/h3//src/apps/fuzzers/fuzzerResolutions.cpp:11:10: fatal error: 'geoPolygon.h' file not found
#include "geoPolygon.h"
         ^~~~~~~~~~~~~~
1 error generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
