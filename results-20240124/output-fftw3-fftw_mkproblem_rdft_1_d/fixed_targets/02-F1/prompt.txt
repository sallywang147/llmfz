Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
 #include <fftw3.h>
#include <string>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  // For reference, fftw_compelx is defined:
  // typedef double fftw_complex[2]
  fftw_complex *signal = nullptr;
  fftw_complex *result = nullptr;
  fftw_plan plan = nullptr;
  struct problem_s *problem = nullptr;
  struct tensor *sz = nullptr;
  struct tensor *vecsz = nullptr;
  double *I = nullptr;
  double *O = nullptr;
  int kind = 0;
  if (size < 1) {
    return 0;
  }
  uint8_t ARRAY_SIZE = (*data) % 250 + 1;
  data++;
  size -= 1;
  if ((ARRAY_SIZE * sizeof(double) * 2) > size) {
    return 0;
  }
  signal = (fftw_complex *)malloc(ARRAY_SIZE * sizeof(double) * 2);
  result = (fftw_complex *)malloc(ARRAY_SIZE * sizeof(double) * 2);
  sz = (struct tensor *)malloc(sizeof(struct tensor));
  vecsz = (struct tensor *)malloc(sizeof(struct tensor));
  I = (double *)malloc(ARRAY_SIZE * sizeof(double) * 2);
  O = (double *)malloc(ARRAY_SIZE * sizeof(double) * 2);

  // Seed the signals with fuzz data
  memcpy(signal, data, (ARRAY_SIZE * sizeof(double) * 2));

  sz->dims = 1;
  sz->size = ARRAY_SIZE;
  vecsz->dims = 1;
  vecsz->size = ARRAY_SIZE;

  problem = fftw_mkproblem_rdft_1_d(sz, vecsz, I, O, kind);
  fftw_execute(problem);

  free(signal);
  free(result);
  free(sz);
  free(vecsz);
  free(I);
  free(O);

  return 0;
}
</code>

The code has the following build issues:
<error>
/src/fftw3_fuzzer.cc:27:32: error: invalid application of 'sizeof' to an incomplete type 'struct tensor'
  sz = (struct tensor *)malloc(sizeof(struct tensor));
                               ^     ~~~~~~~~~~~~~~~
/src/fftw3_fuzzer.cc:11:10: note: forward declaration of 'tensor'
  struct tensor *sz = nullptr;
         ^
/src/fftw3_fuzzer.cc:28:35: error: invalid application of 'sizeof' to an incomplete type 'struct tensor'
  vecsz = (struct tensor *)malloc(sizeof(struct tensor));
                                  ^     ~~~~~~~~~~~~~~~
/src/fftw3_fuzzer.cc:11:10: note: forward declaration of 'tensor'
  struct tensor *sz = nullptr;
         ^
/src/fftw3_fuzzer.cc:35:5: error: member access into incomplete type 'struct tensor'
  sz->dims = 1;
    ^
/src/fftw3_fuzzer.cc:11:10: note: forward declaration of 'tensor'
  struct tensor *sz = nullptr;
         ^
/src/fftw3_fuzzer.cc:36:5: error: member access into incomplete type 'struct tensor'
  sz->size = ARRAY_SIZE;
    ^
/src/fftw3_fuzzer.cc:11:10: note: forward declaration of 'tensor'
  struct tensor *sz = nullptr;
         ^
/src/fftw3_fuzzer.cc:37:8: error: member access into incomplete type 'struct tensor'
  vecsz->dims = 1;
       ^
/src/fftw3_fuzzer.cc:11:10: note: forward declaration of 'tensor'
  struct tensor *sz = nullptr;
         ^
/src/fftw3_fuzzer.cc:38:8: error: member access into incomplete type 'struct tensor'
  vecsz->size = ARRAY_SIZE;
       ^
/src/fftw3_fuzzer.cc:11:10: note: forward declaration of 'tensor'
  struct tensor *sz = nullptr;
         ^
/src/fftw3_fuzzer.cc:40:13: error: use of undeclared identifier 'fftw_mkproblem_rdft_1_d'
  problem = fftw_mkproblem_rdft_1_d(sz, vecsz, I, O, kind);
            ^
/src/fftw3_fuzzer.cc:41:3: error: no matching function for call to 'fftw_execute'
  fftw_execute(problem);
  ^~~~~~~~~~~~
/src/fftw3/api/fftw3.h:468:17: note: candidate function not viable: cannot convert argument of incomplete type 'struct problem_s *' to 'const fftw_plan' (aka 'fftw_plan_s *const') for 1st argument
FFTW_DEFINE_API(FFTW_MANGLE_DOUBLE, double, fftw_complex)
                ^
/src/fftw3/api/fftw3.h:142:12: note: expanded from macro 'FFTW_DEFINE_API'
FFTW_CDECL X(execute)(const X(plan) p);                                 \
           ^
/src/fftw3/api/fftw3.h:66:34: note: expanded from macro 'FFTW_MANGLE_DOUBLE'
#define FFTW_MANGLE_DOUBLE(name) FFTW_CONCAT(fftw_, name)
                                 ^
/src/fftw3/api/fftw3.h:65:35: note: expanded from macro 'FFTW_CONCAT'
#define FFTW_CONCAT(prefix, name) prefix ## name
                                  ^
<scratch space>:76:1: note: expanded from here
fftw_execute
^
8 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
