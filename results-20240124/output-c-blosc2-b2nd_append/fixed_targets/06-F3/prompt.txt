Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stdint.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>

extern "C" {
#include "b2nd.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  if (size < 2) {
    return 0;
  }
  // Create a B2ND array
  struct b2nd_array_t *array = b2nd_array_create(10);
  if (!array) {
    return 0;
  }

  // Append data to the array
  int ret = b2nd_append(array, (char *)data, size, data[0]);
  if (ret != 0) {
    b2nd_array_destroy(array);
    return 0;
  }

  // Destroy the array
  b2nd_array_destroy(array);
  return 0;
}
</code>

The code has the following build issues:
<error>
/src/c-blosc2/tests/fuzz/fuzz_decompress_frame.c:6:8: error: expected identifier or '('
extern "C" {
       ^
/src/c-blosc2/tests/fuzz/fuzz_decompress_frame.c:10:8: error: expected identifier or '('
extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
       ^
2 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
