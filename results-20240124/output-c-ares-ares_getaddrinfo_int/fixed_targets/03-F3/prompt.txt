Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stddef.h>

#include "ares.h"

extern "C" {
#include <ares.h>
}

// Entrypoint for Clang's libfuzzer
extern "C" int LLVMFuzzerTestOneInput(const unsigned char *data,
                                      unsigned long size) {
  struct ares_channel *channel;
  struct ares_addrinfo_hints hints;
  int status;

  status = ares_library_init(ARES_LIB_INIT_ALL);
  if (status != ARES_SUCCESS) {
    return 0;
  }

  status = ares_init(&channel);
  if (status != ARES_SUCCESS) {
    ares_library_cleanup();
    return 0;
  }

  hints.ai_flags = ARES_AI_CANONNAME;
  hints.ai_family = AF_UNSPEC;
  hints.ai_socktype = SOCK_STREAM;
  hints.ai_protocol = IPPROTO_TCP;

  ares_getaddrinfo_ext(channel, "example.com", "80", &hints, nullptr, nullptr);

  ares_destroy(channel);
  ares_library_cleanup();

  return 0;
}
</code>

The code has the following build issues:
<error>
The target function `void ares_getaddrinfo_int(struct ares_channeldata * , char * , char * , struct ares_addrinfo_hints * , func_type * , char * )` was not called by the fuzz target `LLVMFuzzerTestOneInput`.YOU MUST CALL FUNCTION `void ares_getaddrinfo_int(struct ares_channeldata * , char * , char * , struct ares_addrinfo_hints * , func_type * , char * )` INSIDE FUNCTION `LLVMFuzzerTestOneInput`.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
