Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <algorithm>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>
#include <vector>

#include "llvm/MC/MCInst.h"
#include "llvm/MC/MCStreamer.h"
#include "llvm/MC/MCSubtargetInfo.h"
#include "llvm/Support/raw_ostream.h"

extern "C" {
  void Alpha_LLVM_printInstruction(struct MCInst * MI, struct SStream * O, char * Info);
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  std::vector<uint8_t> bytes = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange(0, 100));
  llvm::MCInst inst;
  inst.setOpcode(stream.ConsumeIntegral<uint16_t>());
  inst.addOperand(llvm::MCOperand::createImm(stream.ConsumeIntegral<uint64_t>()));
  inst.addOperand(llvm::MCOperand::createImm(stream.ConsumeIntegral<uint64_t>()));
  inst.addOperand(llvm::MCOperand::createImm(stream.ConsumeIntegral<uint64_t>()));
  llvm::MCSubtargetInfo STI(nullptr);
  llvm::raw_string_ostream OS(nullptr);
  llvm::raw_ostream& S = OS;
  Alpha_LLVM_printInstruction(&inst, (struct SStream *)&S, nullptr);
  return 0;
}
</code>

The code has the following build issues:
<error>
/src/capstonev5/suite/fuzz/fuzz_disasm.c:1:10: fatal error: 'algorithm' file not found
#include <algorithm>
         ^~~~~~~~~~~
1 error generated.

Fix failure
/src/capstonev5/suite/fuzz/fuzz_disasm.cpp:18:3: error: unknown type name 'FuzzedDataProvider'
  FuzzedDataProvider stream(data, size);
  ^
/src/capstonev5/suite/fuzz/fuzz_disasm.cpp:26:25: error: no matching constructor for initialization of 'llvm::MCSubtargetInfo'
  llvm::MCSubtargetInfo STI(nullptr);
                        ^   ~~~~~~~
/usr/local/include/llvm/MC/MCSubtargetInfo.h:96:3: note: candidate constructor not viable: no known conversion from 'std::nullptr_t' to 'const llvm::MCSubtargetInfo' for 1st argument
  MCSubtargetInfo(const MCSubtargetInfo &) = default;
  ^
/usr/local/include/llvm/MC/MCSubtargetInfo.h:103:3: note: candidate constructor not viable: requires 0 arguments, but 1 was provided
  MCSubtargetInfo() = delete;
  ^
/usr/local/include/llvm/MC/MCSubtargetInfo.h:97:3: note: candidate constructor not viable: requires 12 arguments, but 1 was provided
  MCSubtargetInfo(const Triple &TT, StringRef CPU, StringRef TuneCPU,
  ^
/src/capstonev5/suite/fuzz/fuzz_disasm.cpp:27:28: error: no matching constructor for initialization of 'llvm::raw_string_ostream'
  llvm::raw_string_ostream OS(nullptr);
                           ^  ~~~~~~~
/usr/local/include/llvm/Support/raw_ostream.h:632:7: note: candidate constructor (the implicit copy constructor) not viable: no known conversion from 'std::nullptr_t' to 'const llvm::raw_string_ostream' for 1st argument
class raw_string_ostream : public raw_ostream {
      ^
/usr/local/include/llvm/Support/raw_ostream.h:643:12: note: candidate constructor not viable: no known conversion from 'std::nullptr_t' to 'std::string &' (aka 'basic_string<char, char_traits<char>, allocator<char>> &') for 1st argument
  explicit raw_string_ostream(std::string &O) : OS(O) {
           ^
/src/capstonev5/suite/fuzz/fuzz_disasm.cpp:29:3: error: no matching function for call to 'Alpha_LLVM_printInstruction'
  Alpha_LLVM_printInstruction(&inst, (struct SStream *)&S, nullptr);
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/src/capstonev5/suite/fuzz/fuzz_disasm.cpp:14:8: note: candidate function not viable: no known conversion from 'llvm::MCInst *' to 'struct MCInst *' for 1st argument
  void Alpha_LLVM_printInstruction(struct MCInst * MI, struct SStream * O, char * Info);
       ^
4 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
