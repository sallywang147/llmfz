Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <algorithm>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <string>

#include "llvm/MC/MCInst.h"
#include "llvm/MC/MCStreamer.h"
#include "llvm/MC/MCSubtargetInfo.h"
#include "llvm/Support/raw_ostream.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  const size_t mc_inst_size = stream.ConsumeIntegralInRange<size_t>(0, 100);
  uint8_t* mc_inst_data = static_cast<uint8_t*>(malloc(mc_inst_size));
  stream.ConsumeBytes(mc_inst_data, mc_inst_size);
  llvm::MCInst mc_inst;
  mc_inst.setOpcode(stream.ConsumeIntegral<uint16_t>());
  mc_inst.setDesc(llvm::MCInstDesc(stream.ConsumeIntegral<uint16_t>(),
                   stream.ConsumeIntegral<uint16_t>(),
                   stream.ConsumeIntegral<uint16_t>(),
                   stream.ConsumeIntegral<uint16_t>()));
  mc_inst.addOperand(llvm::MCOperand::createReg(stream.ConsumeIntegral<uint16_t>()));
  mc_inst.addOperand(llvm::MCOperand::createImm(stream.ConsumeIntegral<uint64_t>()));
  mc_inst.addOperand(llvm::MCOperand::createReg(stream.ConsumeIntegral<uint16_t>()));
  mc_inst.addOperand(llvm::MCOperand::createImm(stream.ConsumeIntegral<uint64_t>()));

  llvm::raw_ostream streamer(nullptr);
  char info[100];
  memset(info, 0, sizeof(info));
  Alpha_LLVM_printInstruction(&mc_inst, &streamer, info);
  free(mc_inst_data);
  return 0;
}
</code>

The code has the following build issues:
<error>
/src/capstonev5/suite/fuzz/fuzz_disasm.c:1:10: fatal error: 'algorithm' file not found
#include <algorithm>
         ^~~~~~~~~~~
1 error generated.

Fix failure
/src/capstonev5/suite/fuzz/fuzz_disasm.cpp:14:3: error: unknown type name 'FuzzedDataProvider'
  FuzzedDataProvider stream(data, size);
  ^
/src/capstonev5/suite/fuzz/fuzz_disasm.cpp:21:11: error: no member named 'setDesc' in 'llvm::MCInst'
  mc_inst.setDesc(llvm::MCInstDesc(stream.ConsumeIntegral<uint16_t>(),
  ~~~~~~~ ^
/src/capstonev5/suite/fuzz/fuzz_disasm.cpp:21:25: error: no member named 'MCInstDesc' in namespace 'llvm'
  mc_inst.setDesc(llvm::MCInstDesc(stream.ConsumeIntegral<uint16_t>(),
                  ~~~~~~^
/src/capstonev5/suite/fuzz/fuzz_disasm.cpp:30:21: error: variable type 'llvm::raw_ostream' is an abstract class
  llvm::raw_ostream streamer(nullptr);
                    ^
/usr/local/include/llvm/Support/raw_ostream.h:358:16: note: unimplemented pure virtual method 'write_impl' in 'raw_ostream'
  virtual void write_impl(const char *Ptr, size_t Size) = 0;
               ^
/usr/local/include/llvm/Support/raw_ostream.h:362:20: note: unimplemented pure virtual method 'current_pos' in 'raw_ostream'
  virtual uint64_t current_pos() const = 0;
                   ^
4 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
