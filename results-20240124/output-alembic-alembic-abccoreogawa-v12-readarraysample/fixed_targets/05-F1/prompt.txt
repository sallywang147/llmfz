Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
 #include <stddef.h>
#include <stdint.h>
#include <stdlib.h>

#include "alembic/lib/Alembic/AbcCoreOgawa/All.h"
#include "alembic/lib/Alembic/AbcCoreAbstract/All.h"

using Alembic::AbcCoreAbstract::v12::DataType;
using Alembic::AbcCoreOgawa::v12::ReadArraySample;

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  std::shared_ptr<std::vector<index_t>> iDims;
  std::shared_ptr<std::vector<uint8_t>> iData;
  std::shared_ptr<DataType> iDataType;
  std::shared_ptr<std::vector<std::string>> iNames;

  ReadArraySample(&iDims, &iData, size, &iDataType, &iNames);

  return 0;
}
</code>

The code has the following build issues:
<error>
/src/alembic_dump_info_fuzzer.cc:9:7: error: no member named 'ReadArraySample' in namespace 'Alembic::AbcCoreOgawa::v12'; did you mean 'Alembic::AbcCoreAbstract::v12::ReadArraySampleID'?
using Alembic::AbcCoreOgawa::v12::ReadArraySample;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Alembic::AbcCoreAbstract::v12::ReadArraySampleID
/src/alembic/lib/Alembic/AbcCoreAbstract/ReadArraySampleCache.h:51:7: note: 'Alembic::AbcCoreAbstract::v12::ReadArraySampleID' declared here
class ReadArraySampleID
      ^
/src/alembic_dump_info_fuzzer.cc:12:31: error: use of undeclared identifier 'index_t'; did you mean 'index'?
  std::shared_ptr<std::vector<index_t>> iDims;
                              ^~~~~~~
                              index
/usr/include/strings.h:68:14: note: 'index' declared here
extern char *index (const char *__s, int __c)
             ^
/src/alembic_dump_info_fuzzer.cc:12:31: error: template argument for template type parameter must be a type
  std::shared_ptr<std::vector<index_t>> iDims;
                              ^~~~~~~
/usr/local/bin/../include/c++/v1/vector:314:17: note: template parameter is declared here
template <class _Tp, class _Allocator /* = allocator<_Tp> */>
                ^
3 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
