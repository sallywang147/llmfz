Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <hb.h>
#include <stddef.h>
#include <cstdint>
#include <vector>
#include <fuzzer/FuzzedDataProvider.h>

extern "C" {
#include <hb-ot.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const size_t num_glyphs = stream.ConsumeIntegralInRange<size_t>(1, 100);
  std::vector<hb_codepoint_t> glyphs;
  for (size_t i = 0; i < num_glyphs; ++i) {
    glyphs.push_back(stream.ConsumeIntegral<hb_codepoint_t>());
  }
  const hb_face_t* face = hb_face_create(data, size);
  hb_face_t* subset_face = hb_subset_preprocess(face, glyphs.data(), glyphs.size());
  if (subset_face) {
    hb_face_destroy(subset_face);
  }
  hb_face_destroy(face);
  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
