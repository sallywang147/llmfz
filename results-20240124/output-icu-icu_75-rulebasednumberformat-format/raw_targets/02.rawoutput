 // Â© 2023 and later: Unicode, Inc. and others.
// License & terms of use: http://www.unicode.org/copyright.html

// Fuzzer for ICU RuleBasedNumberFormat.

#include <cstring>

#include "fuzzer_utils.h"

#include "unicode/numfmt.h"
#include "unicode/rulebasednumberformat.h"
#include "unicode/unistr.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  uint16_t rnd;
  // Set the limit for the test data to 1000 bytes to avoid timeout for a
  // very long list of operations.
  if (size > 1000) {
    size = 1000;
  }
  if (size < 2 * sizeof(rnd))
    return 0;
  icu::StringPiece fuzzData(reinterpret_cast<const char *>(data), size);
  // Byte 0 and 1 randomly select a locale
  std::memcpy(&rnd, fuzzData.data(), sizeof(rnd));
  fuzzData.remove_prefix(sizeof(rnd));
  icu::Locale locale = GetRandomLocale(rnd);

  // Byte 2 and 3 randomly select a number
  std::memcpy(&rnd, fuzzData.data(), sizeof(rnd));
  fuzzData.remove_prefix(sizeof(rnd));
  icu::UnicodeString number = icu::UnicodeString::fromInt(rnd);

  // Byte 4 and 5 randomly select a rule set
  std::memcpy(&rnd, fuzzData.data(), sizeof(rnd));
  fuzzData.remove_prefix(sizeof(rnd));
  icu::UnicodeString ruleSet = GetRandomRuleSet(rnd);

  // Byte 6 and 7 randomly select a format style
  std::memcpy(&rnd, fuzzData.data(), sizeof(rnd));
  fuzzData.remove_prefix(sizeof(rnd));
  icu::UnicodeString formatStyle = GetRandomFormatStyle(rnd);

  // Byte 8 and 9 randomly select a locale for the number format
  std::memcpy(&rnd, fuzzData.data(), sizeof(rnd));
  fuzzData.remove_prefix(sizeof(rnd));
  icu::Locale locale2 = GetRandomLocale(rnd);

  // Byte 10 and 11 randomly select a locale for the rule set
  std::memcpy(&rnd, fuzzData.data(), sizeof(rnd));
  fuzzData.remove_prefix(sizeof(rnd));
  icu::Locale locale3 = GetRandomLocale(rnd);

  // Byte 12 and 13 randomly select a locale for the format style
  std::memcpy(&rnd, fuzzData.data(), sizeof(rnd));
  fuzzData.remove_prefix(sizeof(rnd));
  icu::Locale locale4 = GetRandomLocale(rnd);

  UErrorCode status = U_ZERO_ERROR;
  std::unique_ptr<icu::RuleBasedNumberFormat> fmt(icu::RuleBasedNumberFormat::createInstance(
      ruleSet, locale2, status));
  if (U_FAILURE(status))
    return 0;
  fmt->setLocale(locale3);
  fmt->setNumberFormatStyle(formatStyle, locale4, status);
  icu::UnicodeString result;
  fmt->format(number, result, status);
  if (U_FAILURE(status))
    return 0;
  return EXIT_SUCCESS;
}

</solution>