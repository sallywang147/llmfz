<system>
You are a security testing engineer who wants to write a C++ program to execute all lines in a given function by defining and initializing its parameters in a suitable way before fuzzing the function through <code>LLVMFuzzerTestOneInput</code>.

Carefully study the function signature and its parameters, then follow the example problems and solutions to answer the final problem. YOU MUST call the function to fuzz in the solution.

Try as many variations of these inputs as possible. Do not use a random number generator such as <code>rand()</code>.

Use <code>FuzzedDataProvider</code> to generate these inputs. You MUST declare it in <code>LLVMFuzzerTestOneInput</code>, like this:
<code>
FuzzedDataProvider stream(data, size);
</code>

Include <code>#include <fuzzer/FuzzedDataProvider.h></code> in the solution.

This code shows example of using it:
<code>
// Extract integral values
int int_arg = stream.ConsumeIntegral<int>();
int int_arg_in_range = stream.ConsumeIntegralInRange(-100, 100);
bool bool_arg = stream.ConsumeBool();

// Extract floating point values
float probability = stream.ConsumeProbability();
double double_arg = stream.ConsumeFloatingPoint<double>();
double double_arg_in_range = stream.ConsumeFloatingPointInRange(-1.0, 1.0);

// Extract value from predefined set, such as enum or array
EnumType enum = stream.ConsumeEnum<EnumType>();
int valid_values = stream.PickValueInArray({FLAG_1, FLAG_2, FLAG_3});

// Extract an array of bytes as a vector. You MUST call <code>.data()</code> to use result as pointer.
std::vector<uint8_t> bytes = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange(0, max_size));
void *data_ptr = bytes.data();
std::vector<uint8_t> bytes2 = stream.ConsumeBytes<uint8_t>(requested_size);
void *data2_ptr = bytes2.data();

// Extract a string. You MUST use <code>.c_str()</code> to use result as pointer
std::string str = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange(0, max_size));
char *ptr = str.c_str();
std::string str2 = stream.ConsumeBytesAsString(requested_size);
char *ptr2 = str2.c_str();
std::string str3 = stream.ConsumeRandomLengthString();
char *ptr3 = str3.c_str();

// Extract to user defined object
struct_type_t obj;
size_t consumed = stream.ConsumeData(&obj, sizeof(obj));
</code>

There MUST be AT MOST ONE call to <code>ConsumeRemainingBytes</code> to consume remaining input!
<code>
FuzzedDataProvider stream(data, size);

std::vector<uint8_t> bytes3 = stream.ConsumeRemainingBytes();
void *data3_ptr = bytes3.data();
</code>

All variables used MUST be declared and initialized. Carefully make sure that the variable and argument types in your code match and compiles successfully. Add type casts to make types match.

Do not create new variables with the same names as existing variables.
WRONG:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  void* data = Foo();
}
</code>

EXTREMELY IMPORTANT: If you write code using <code>goto</code>, you MUST MUST also declare all variables BEFORE the <code>goto</code>. Never introduce new variables after the <code>goto</code>.
WRONG:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  int a = bar();
  if (!some_function()) goto EXIT;
  Foo b = target_function(data, size);
  int c = another_func();
EXIT:
  return 0;
}
</code>

CORRECT:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  int a = bar();
  Foo b;
  int c;

  if (!some_function()) goto EXIT;
  b = target_function(data, size);
  c = another_func()
EXIT:
  return 0;
}
</code>

If an example provided for the same library includes a unique header file, then it must be included in the solution as well.
</system>

<task>
Your goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:
<function header>
BGD_DECLARE(void) gdImageString (gdImagePtr im, gdFontPtr f, int x, int y, unsigned char *s, int color)
</function header>
</task>

<solution>

#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "gd.h"
#include "gdfontg.h"
#include "gdfontl.h"
#include "gdfontmb.h"
#include "gdfonts.h"
#include "gdfontt.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const uint8_t slate_width = stream.ConsumeIntegral<uint8_t>();
  const uint8_t slate_height = stream.ConsumeIntegral<uint8_t>();
  gdImagePtr slate_image = gdImageCreateTrueColor(slate_width, slate_height);
  if (slate_image == nullptr) {
    return 0;
  }

  const int x_position = stream.ConsumeIntegral<int>();
  const int y_position = stream.ConsumeIntegral<int>();
  const int text_color = stream.ConsumeIntegral<int>();
  const gdFontPtr font_ptr = stream.PickValueInArray(
      {gdFontGetGiant(), gdFontGetLarge(), gdFontGetMediumBold(),
       gdFontGetSmall(), gdFontGetTiny()});
  const std::string text = stream.ConsumeRemainingBytesAsString();

  gdImageString(slate_image, font_ptr, x_position, y_position,
                reinterpret_cast<uint8_t*>(const_cast<char*>(text.c_str())),
                text_color);
  gdImageDestroy(slate_image);
  return 0;
}
</solution>


<task>
Your goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:
<function header>
MPG123_EXPORT int mpg123_decode(mpg123_handle *mh, const unsigned char *inmemory, size_t inmemsize, unsigned char *outmemory, size_t outmemsize, size_t *done )
</function header>
</task>

<solution>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

#include "mpg123.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  static bool initialized = false;
  if (!initialized) {
    mpg123_init();
    initialized = true;
  }
  int ret;
  mpg123_handle* handle = mpg123_new(nullptr, &ret);
  if (handle == nullptr) {
    return 0;
  }

  ret = mpg123_param(handle, MPG123_ADD_FLAGS, MPG123_QUIET, 0.);
  if(ret == MPG123_OK)
    ret = mpg123_open_feed(handle);
  if (ret != MPG123_OK) {
    mpg123_delete(handle);
    return 0;
  }

  std::vector<uint8_t> output_buffer(mpg123_outblock(handle));

  size_t output_written = 0;
  // Initially, start by feeding the decoder more data.
  int decode_ret = MPG123_NEED_MORE;
  FuzzedDataProvider provider(data, size);
  while ((decode_ret != MPG123_ERR)) {
    if (decode_ret == MPG123_NEED_MORE) {
      if (provider.remaining_bytes() == 0
          || mpg123_tellframe(handle) > 10000
          || mpg123_tell_stream(handle) > 1<<20) {
        break;
      }
      const size_t next_size = provider.ConsumeIntegralInRange<size_t>(
          0,
          provider.remaining_bytes());
      auto next_input = provider.ConsumeBytes<unsigned char>(next_size);
      decode_ret = mpg123_decode(handle, next_input.data(), next_input.size(),
                                 output_buffer.data(), output_buffer.size(),
                                 &output_written);
    } else if (decode_ret != MPG123_ERR && decode_ret != MPG123_NEED_MORE) {
      decode_ret = mpg123_decode(handle, nullptr, 0, output_buffer.data(),
                                 output_buffer.size(), &output_written);
    } else {
      // Unhandled mpg123_decode return value.
      abort();
    }
  }

  mpg123_delete(handle);

  return 0;
}
</solution>


<task>
Your goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:
<function header>
int variable_set(char * name, int type, char * val)
</function header>
</task>

<solution>
/* This file is part of GDBM, the GNU data base manager.
   Copyright (C) 2021-2023 Free Software Foundation, Inc.
   GDBM is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.
   GDBM is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   You should have received a copy of the GNU General Public License
   along with GDBM. If not, see <http:
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <unistd.h>
#include <stdint.h>
#include <time.h>
#include <gdbmtool.h>

static char dbname[] = "a.db";
static char fuzz_rc_name[] = "gdbm_fuzzer.rc";


struct instream_string
{
  struct instream base;
  char *string;
  size_t length;
  size_t pos;
};

static ssize_t
instream_string_read (instream_t istr, char *buf, size_t size)
{
  struct instream_string *str = (struct instream_string *)istr;
  size_t n = str->length - str->pos;
  if (size > n)
    size = n;
  memcpy (buf, str->string + str->pos, n);
  str->pos += n;
  return n;
}

static void
instream_string_close (instream_t istr)
{
  struct instream_string *str = (struct instream_string *)istr;
  str->pos = 0;
}

static int
instream_string_eq (instream_t a, instream_t b)
{
  return 0;
}

static instream_t
instream_string_create (char const *input, char const *name)
{
  struct instream_string *istr;
  size_t len;
  int nl;
  
  istr = emalloc (sizeof (*istr));
  istr->base.in_name = estrdup (name);
  istr->base.in_inter = 0;
  istr->base.in_read = instream_string_read;
  istr->base.in_close = instream_string_close;
  istr->base.in_eq = instream_string_eq;
  istr->base.in_history_size = NULL;
  istr->base.in_history_get = NULL;
  len = strlen (input);
  while (len > 0 && (input[len-1] == ' ' || input[len-1] == '\t'))
    --len;

  nl = len > 0 && input[len-1] != '\n';
  istr->string = emalloc (len + nl + 1);
  memcpy (istr->string, input, len);
  if (nl)
    istr->string[len++] = '\n';
  istr->string[len] = 0;
  istr->length = len;
  istr->pos = 0;

  return (instream_t) istr;
}

static instream_t input;

static void
fuzzer_exit (void)
{
  struct instream_string *istr = (struct instream_string *)input;
  free (istr->string);
  free (input->in_name);
  free (input);
}

int
LLVMFuzzerInitialize (int *argc, char ***argv)
{
  char *argv0 = (*argv)[0];
  char *p, *file_name;
  size_t len;
  struct stat st;
  char *input_buffer;
  FILE *fp;

  /* Initialize gdbmshell globals */
  set_progname ("gdbmfuzz");

  /* Build full rc file name */
  p = strrchr (argv0, '/');
  len = p - argv0;
  file_name = emalloc (len + 1 + strlen (fuzz_rc_name) + 1);
  memcpy (file_name, argv0, len);
  file_name[len++] = '/';
  strcpy (file_name + len, fuzz_rc_name);

  /* Read the file */
  if (stat (file_name, &st))
    {
      terror ("can't stat %s: %s", file_name, strerror (errno));
      exit (1);
    }

  input_buffer = emalloc (st.st_size + 1);
  fp = fopen (file_name, "r");
  if (!fp)
    {
      terror ("can't open %s: %s", file_name, strerror (errno));
      exit (1);
    }
  if (fread (input_buffer, st.st_size, 1, fp) != 1)
    {
      terror ("error reading from %s: %s", file_name, strerror (errno));
      exit (1);
    }
  input_buffer[st.st_size] = 0;
  fclose (fp);

  /* Set up the input stream */
  input = instream_string_create (input_buffer, file_name);
  free (file_name);
  free (input_buffer);
  if (!input)
    exit (1);

  atexit (fuzzer_exit);

  /* Disable usual gdbmshell output. */
  stdout = fopen ("/dev/null","w");
  if (!stdout)
    {
      terror ("can't open %s: %s", "/dev/null", strerror (errno));
      exit (1);
    }
  
  return 0;
}


int
LLVMFuzzerTestOneInput (const uint8_t *data, size_t size)
{
  int fd;
  GDBM_FILE db;
  
  fd = syscall (SYS_memfd_create, dbname, 0);
  if (fd == -1)
    {
      perror ("memfd_create");
      exit (1);
    }

  if (write (fd, data, size) < size)
    {
      close (fd);
      perror ("write");
      exit (1);
    }

  if (lseek (fd, 0, SEEK_SET) != 0)
    {
      close (fd);
      perror ("write");
      exit (1);
    }

  variable_set ("filename", VART_STRING, dbname);
  variable_set ("fd", VART_INT, &fd);

  return gdbmshell (input);
}

</solution>


<task>
Your goal is to write a fuzzing harness for the provided function header using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function specified by the function header:
<function header>
int recover_handler(struct command_param * param, struct command_environ * cenv)
</function header>
</task>
You MUST call <code>
int recover_handler(struct command_param * param, struct command_environ * cenv)
</code> in your solution!

<solution>
