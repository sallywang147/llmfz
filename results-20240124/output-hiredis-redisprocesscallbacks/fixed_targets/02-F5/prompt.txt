Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <iostream>
#include <hiredis/hiredis.h>

extern "C" {
#include <hiredis/async.h>
}

using namespace std;

void connectCallback(const redisAsyncContext *c, int status) {
    if (status != REDIS_OK) {
        cout << "Error connecting to Redis: " << c->errstr << endl;
        return;
    }

    cout << "Connected to Redis" << endl;
}

void disconnectCallback(const redisAsyncContext *c, int status) {
    if (status != REDIS_OK) {
        cout << "Error disconnecting from Redis: " << c->errstr << endl;
        return;
    }

    cout << "Disconnected from Redis" << endl;
}

void commandCallback(redisAsyncContext *c, void *r, void *privdata) {
    redisReply *reply = (redisReply *)r;
    if (reply == NULL) return;

    cout << "Received reply from Redis: " << reply->str << endl;
}

int main() {
    redisAsyncContext *c = redisAsyncConnect("127.0.0.1", 6379);
    if (c == NULL) {
        cout << "Error connecting to Redis" << endl;
        return 1;
    }

    redisAsyncSetConnectCallback(c, connectCallback);
    redisAsyncSetDisconnectCallback(c, disconnectCallback);
    redisAsyncCommand(c, commandCallback, NULL, "PING");

    redisAsyncFree(c);

    return 0;
}
</code>

The code has the following build issues:
<error>
The target function `void redisProcessCallbacks(struct redisAsyncContext * ac)` was not called by the fuzz target `LLVMFuzzerTestOneInput`.YOU MUST CALL FUNCTION `void redisProcessCallbacks(struct redisAsyncContext * ac)` INSIDE FUNCTION `LLVMFuzzerTestOneInput`.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
