Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
 #include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>

#include <openssl/pem.h>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  std::vector<uint8_t> bytes = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange(0, size));
  void *data_ptr = bytes.data();

  FILE* f = fmemopen(data_ptr, size, "r");
  RSA* rsa = nullptr;
  PEM_read_RSAPrivateKey(f, &rsa, nullptr, nullptr);
  RSA_free(rsa);
  fclose(f);

  return 0;
}
</code>

The code has the following build issues:
<error>
/src/boringssl/fuzz/ssl_ctx_api.cc:15:68: error: no matching member function for call to 'ConsumeIntegralInRange'
  std::vector<uint8_t> bytes = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange(0, size));
                                                            ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/clang/15.0.0/include/fuzzer/FuzzedDataProvider.h:204:23: note: candidate template ignored: deduced conflicting types for parameter 'T' ('int' vs. 'size_t' (aka 'unsigned long'))
T FuzzedDataProvider::ConsumeIntegralInRange(T min, T max) {
                      ^
1 error generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
