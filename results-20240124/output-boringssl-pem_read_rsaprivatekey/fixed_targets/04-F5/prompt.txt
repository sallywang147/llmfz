Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <string>

#include "openssl/bio.h"
#include "openssl/evp.h"
#include "openssl/pem.h"
#include "openssl/rsa.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  BIO* bio = BIO_new_mem_buf(data, size);
  if (bio == nullptr) {
    return 0;
  }

  RSA* rsa = nullptr;
  PEM_read_bio_RSAPrivateKey(bio, &rsa, nullptr, nullptr);
  BIO_free(bio);

  // Call the function that was not called by the fuzz target
  RSA* rsa2 = nullptr;
  PEM_read_bio_RSAPrivateKey(bio, &rsa2, nullptr, nullptr);

  // Fix the error by wrapping the PEM_read_RSAPrivateKey function with extern "C" {}
  extern "C" {
    PEM_read_RSAPrivateKey(bio, &rsa2, nullptr, nullptr);
  }

  return 0;
}
</code>

The code has the following build issues:
<error>
/src/boringssl/fuzz/ssl_ctx_api.cc:31:10: error: expected unqualified-id
  extern "C" {
         ^
1 error generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
