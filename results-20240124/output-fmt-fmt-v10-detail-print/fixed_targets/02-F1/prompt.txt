Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
 #include <fmt/core.h>

#include <cstdint>

#include "fuzzer-common.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  if (size <= 1) return 0;

  const auto format_str = fmt::string_view(as_chars(data), size - 1);
  const auto c = data[size - 1];
  auto f = stderr;
  fmt::detail::print(f, const_cast<char*>(format_str.data()), format_str.size());
  fputc(c, f);
  return 0;
}
</code>

The code has the following build issues:
<error>
/src/fmt/test/fuzzing/chrono-timepoint.cc:13:3: error: too many arguments to function call, expected 2, have 3; did you mean 'fmt::print'?
  fmt::detail::print(f, const_cast<char*>(format_str.data()), format_str.size());
  ^~~
  fmt::print
/src/fmt/include/fmt/base.h:2979:17: note: 'fmt::print' declared here
FMT_INLINE void print(format_string<T...> fmt, T&&... args) {
                ^
1 error generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
