Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstdint>
#include <cstdio>
#include <cstring>

#include "fmt/core.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  const size_t max_size = 1024;
  char text[max_size];
  const size_t text_size = stream.ConsumeIntegralInRange<size_t>(0, max_size);
  stream.ConsumeBytes(text, text_size);

  fmt::print(stdout, text);

  return 0;
}
</code>

The code has the following build issues:
<error>
/src/fmt/test/fuzzing/chrono-timepoint.cc:15:10: error: no matching member function for call to 'ConsumeBytes'
  stream.ConsumeBytes(text, text_size);
  ~~~~~~~^~~~~~~~~~~~
/usr/local/lib/clang/15.0.0/include/fuzzer/FuzzedDataProvider.h:352:36: note: candidate template ignored: couldn't infer template argument 'T'
std::vector<T> FuzzedDataProvider::ConsumeBytes(size_t size, size_t num_bytes) {
                                   ^
/usr/local/lib/clang/15.0.0/include/fuzzer/FuzzedDataProvider.h:108:36: note: candidate function template not viable: requires single argument 'num_bytes', but 2 arguments were provided
std::vector<T> FuzzedDataProvider::ConsumeBytes(size_t num_bytes) {
                                   ^
1 error generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
