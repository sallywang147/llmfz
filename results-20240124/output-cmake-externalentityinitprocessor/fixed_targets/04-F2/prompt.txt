Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>

#include "expat.h"

extern "C" {
#include "expat.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)
{
  char* public_id = (char*)malloc(size);
  memcpy(public_id, data, size);

  char* system_id = (char*)malloc(size);
  memcpy(system_id, data, size);

  char* base = (char*)malloc(size);
  memcpy(base, data, size);

  XML_Parser parser = XML_ParserCreate(NULL);
  if (!parser)
    return 0;

  if (XML_SetParamEntityParsing(parser, XML_PARAM_ENTITY_PARSING_ALWAYS)) {
    if (XML_SetExternalEntityRefHandler(parser, externalEntityInitProcessor)) {
      XML_Parse(parser, NULL, 0, XML_FALSE);
    }
  }

  XML_ParserFree(parser);
  free(public_id);
  free(system_id);
  free(base);

  return 0;
}
</code>

The code has the following build issues:
<error>
xml_parser_fuzzer.cc:5:10: fatal error: 'expat.h' file not found
#include "expat.h"
         ^~~~~~~~~
1 error generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
