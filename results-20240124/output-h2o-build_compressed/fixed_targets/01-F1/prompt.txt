Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
 #include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "h2o.h"
#include "h2o/http2.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  const size_t compressed_cert_len = stream.ConsumeIntegralInRange<size_t>(0, 100);
  struct st_ptls_compressed_certificate_entry_t* compressed_cert =
      static_cast<struct st_ptls_compressed_certificate_entry_t*>(
          malloc(sizeof(struct st_ptls_compressed_certificate_entry_t) +
                 compressed_cert_len));
  compressed_cert->len = compressed_cert_len;
  stream.ConsumeBytes<uint8_t>(compressed_cert->data, compressed_cert_len);

  const size_t ocsp_status_len = stream.ConsumeIntegralInRange<size_t>(0, 100);
  char* ocsp_status = static_cast<char*>(malloc(ocsp_status_len));
  stream.ConsumeBytes<char>(ocsp_status, ocsp_status_len);

  struct st_h2o_iovec_t iovec = {nullptr, 0};
  int ret = build_compressed(compressed_cert, &iovec, 0, ocsp_status, ocsp_status_len);
  free(iovec.base);
  free(compressed_cert);
  free(ocsp_status);

  return ret;
}
</code>

The code has the following build issues:
<error>
/src/h2o/fuzz/driver_h3.cc:17:18: error: invalid application of 'sizeof' to an incomplete type 'struct st_ptls_compressed_certificate_entry_t'
          malloc(sizeof(struct st_ptls_compressed_certificate_entry_t) +
                 ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/src/h2o/fuzz/driver_h3.cc:15:10: note: forward declaration of 'st_ptls_compressed_certificate_entry_t'
  struct st_ptls_compressed_certificate_entry_t* compressed_cert =
         ^
/src/h2o/fuzz/driver_h3.cc:19:18: error: member access into incomplete type 'struct st_ptls_compressed_certificate_entry_t'
  compressed_cert->len = compressed_cert_len;
                 ^
/src/h2o/fuzz/driver_h3.cc:15:10: note: forward declaration of 'st_ptls_compressed_certificate_entry_t'
  struct st_ptls_compressed_certificate_entry_t* compressed_cert =
         ^
/src/h2o/fuzz/driver_h3.cc:20:47: error: member access into incomplete type 'struct st_ptls_compressed_certificate_entry_t'
  stream.ConsumeBytes<uint8_t>(compressed_cert->data, compressed_cert_len);
                                              ^
/src/h2o/fuzz/driver_h3.cc:15:10: note: forward declaration of 'st_ptls_compressed_certificate_entry_t'
  struct st_ptls_compressed_certificate_entry_t* compressed_cert =
         ^
/src/h2o/fuzz/driver_h3.cc:24:10: error: no matching member function for call to 'ConsumeBytes'
  stream.ConsumeBytes<char>(ocsp_status, ocsp_status_len);
  ~~~~~~~^~~~~~~~~~~~~~~~~~
/usr/local/lib/clang/15.0.0/include/fuzzer/FuzzedDataProvider.h:352:36: note: candidate function template not viable: no known conversion from 'char *' to 'size_t' (aka 'unsigned long') for 1st argument; dereference the argument with *
std::vector<T> FuzzedDataProvider::ConsumeBytes(size_t size, size_t num_bytes) {
                                   ^
/usr/local/lib/clang/15.0.0/include/fuzzer/FuzzedDataProvider.h:108:36: note: candidate function template not viable: requires single argument 'num_bytes', but 2 arguments were provided
std::vector<T> FuzzedDataProvider::ConsumeBytes(size_t num_bytes) {
                                   ^
/src/h2o/fuzz/driver_h3.cc:27:13: error: use of undeclared identifier 'build_compressed'
  int ret = build_compressed(compressed_cert, &iovec, 0, ocsp_status, ocsp_status_len);
            ^
5 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
