Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <vector>

#include "h2o.h"
#include "h2o/http2.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  static bool initialized = false;
  if (!initialized) {
    h2o_globalconf_t config;
    h2o_config_init(&config);
    h2o_context_t ctx;
    h2o_context_init(&ctx, h2o_evloop_create(), &config);
    initialized = true;
  }
  FuzzedDataProvider stream(data, size);
  const size_t max_cert_size = stream.ConsumeIntegralInRange<size_t>(1, 1024);
  std::vector<uint8_t> certificate(max_cert_size);
  stream.ConsumeBytes(certificate.data(), certificate.size());
  const size_t max_ocsp_size = stream.ConsumeIntegralInRange<size_t>(0, 1024);
  std::vector<uint8_t> ocsp_status(max_ocsp_size);
  stream.ConsumeBytes(ocsp_status.data(), ocsp_status.size());
  struct st_ptls_compressed_certificate_entry entry;
  struct st_h2o_iovec_t iov;
  iov.base = certificate.data();
  iov.len = certificate.size();
  build_compressed(&entry, &iov, 1, reinterpret_cast<char*>(ocsp_status.data()),
                   ocsp_status.size());
  return 0;
}
</code>

The code has the following build issues:
<error>
/src/h2o/fuzz/driver_h3.cc:25:10: error: no matching member function for call to 'ConsumeBytes'
  stream.ConsumeBytes(certificate.data(), certificate.size());
  ~~~~~~~^~~~~~~~~~~~
/usr/local/lib/clang/15.0.0/include/fuzzer/FuzzedDataProvider.h:352:36: note: candidate template ignored: couldn't infer template argument 'T'
std::vector<T> FuzzedDataProvider::ConsumeBytes(size_t size, size_t num_bytes) {
                                   ^
/usr/local/lib/clang/15.0.0/include/fuzzer/FuzzedDataProvider.h:108:36: note: candidate function template not viable: requires single argument 'num_bytes', but 2 arguments were provided
std::vector<T> FuzzedDataProvider::ConsumeBytes(size_t num_bytes) {
                                   ^
/src/h2o/fuzz/driver_h3.cc:28:10: error: no matching member function for call to 'ConsumeBytes'
  stream.ConsumeBytes(ocsp_status.data(), ocsp_status.size());
  ~~~~~~~^~~~~~~~~~~~
/usr/local/lib/clang/15.0.0/include/fuzzer/FuzzedDataProvider.h:352:36: note: candidate template ignored: couldn't infer template argument 'T'
std::vector<T> FuzzedDataProvider::ConsumeBytes(size_t size, size_t num_bytes) {
                                   ^
/usr/local/lib/clang/15.0.0/include/fuzzer/FuzzedDataProvider.h:108:36: note: candidate function template not viable: requires single argument 'num_bytes', but 2 arguments were provided
std::vector<T> FuzzedDataProvider::ConsumeBytes(size_t num_bytes) {
                                   ^
/src/h2o/fuzz/driver_h3.cc:29:47: error: variable has incomplete type 'struct st_ptls_compressed_certificate_entry'
  struct st_ptls_compressed_certificate_entry entry;
                                              ^
/src/h2o/fuzz/driver_h3.cc:29:10: note: forward declaration of 'st_ptls_compressed_certificate_entry'
  struct st_ptls_compressed_certificate_entry entry;
         ^
/src/h2o/fuzz/driver_h3.cc:31:26: error: assigning to 'char *' from 'std::vector<unsigned char>::value_type *' (aka 'unsigned char *') converts between pointers to integer types where one is of the unique plain 'char' type and the other is not
  iov.base = certificate.data();
             ~~~~~~~~~~~~^~~~~~
4 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
