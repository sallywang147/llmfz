Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <algorithm>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "geoPolygon.h"
#include "bbox.h"
#include "cellBoundary.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  struct GeoPolygon geoPolygon;
  geoPolygon.numPoints = stream.ConsumeIntegral<uint8_t>();
  geoPolygon.points = new double[geoPolygon.numPoints * 2];
  for (uint8_t i = 0; i < geoPolygon.numPoints * 2; i++) {
    geoPolygon.points[i] = stream.ConsumeFloatingPoint<double>();
  }

  struct BBox bboxes[geoPolygon.numPoints];
  for (uint8_t i = 0; i < geoPolygon.numPoints; i++) {
    bboxes[i].xmin = stream.ConsumeFloatingPoint<double>();
    bboxes[i].ymin = stream.ConsumeFloatingPoint<double>();
    bboxes[i].xmax = stream.ConsumeFloatingPoint<double>();
    bboxes[i].ymax = stream.ConsumeFloatingPoint<double>();
  }

  struct CellBoundary boundary;
  boundary.numPoints = stream.ConsumeIntegral<uint8_t>();
  boundary.points = new double[boundary.numPoints * 2];
  for (uint8_t i = 0; i < boundary.numPoints * 2; i++) {
    boundary.points[i] = stream.ConsumeFloatingPoint<double>();
  }

  struct BBox boundaryBBox;
  boundaryBBox.xmin = stream.ConsumeFloatingPoint<double>();
  boundaryBBox.ymin = stream.ConsumeFloatingPoint<double>();
  boundaryBBox.xmax = stream.ConsumeFloatingPoint<double>();
  boundaryBBox.ymax = stream.ConsumeFloatingPoint<double>();

  cellBoundaryInsidePolygon(&geoPolygon, bboxes, &boundary, &boundaryBBox);

  delete[] geoPolygon.points;
  delete[] boundary.points;

  return 0;
}
</code>

The code has the following build issues:
<error>
/usr/local/lib/clang/15.0.0/include/fuzzer/FuzzedDataProvider.h:16:10: fatal error: 'algorithm' file not found
#include <algorithm>
         ^~~~~~~~~~~
1 error generated.

Fix failure
/src/h3//src/apps/fuzzers/fuzzerResolutions.cpp:9:10: fatal error: 'geoPolygon.h' file not found
#include "geoPolygon.h"
         ^~~~~~~~~~~~~~
1 error generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
