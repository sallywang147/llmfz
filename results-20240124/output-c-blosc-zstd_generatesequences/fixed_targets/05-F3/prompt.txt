Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <algorithm>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <string>

#include "zstd.h"

extern "C" {
#include "lz4hc.h"
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);

  struct ZSTD_CCtx_s* cctx = ZSTD_createCCtx();
  if (cctx == nullptr) {
    return 0;
  }
  struct LZ4HC_optimal_t* opt = LZ4HC_createOptimal();
  if (opt == nullptr) {
    ZSTD_freeCCtx(cctx);
    return 0;
  }

  const size_t in_size = stream.ConsumeIntegral<size_t>();
  std::string in_str = stream.ConsumeRemainingBytesAsString();
  if (in_str.size() != in_size) {
    LZ4HC_freeOptimal(opt);
    ZSTD_freeCCtx(cctx);
    return 0;
  }
  const char* in_data = in_str.c_str();

  const size_t out_size = stream.ConsumeIntegral<size_t>();
  std::string out_str(out_size, '\0');
  char* out_data = const_cast<char*>(out_str.c_str());

  ZSTD_generateSequences(cctx, opt, in_size, out_data, out_size);

  LZ4HC_freeOptimal(opt);
  ZSTD_freeCCtx(cctx);

  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
