Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
 #include <stdint.h>
#include <stdlib.h>
#include <stdio.h>

#include <b2nd.h>

#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

#ifdef __cplusplus
extern "C" {
#endif

int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  struct b2nd_array_t *array = b2nd_array_new(100, 100, 100, 100);
  if (array == NULL) {
    return 0;
  }

  int ret = b2nd_save(array, (char *)data);
  if (ret != 0) {
    printf("b2nd_save failed with error code %d\n", ret);
  }

  b2nd_array_free(array);

  return 0;
}

#ifdef __cplusplus
}
#endif
</code>

The code has the following build issues:
<error>
fuzz_decompress_frame.c:(.text.LLVMFuzzerTestOneInput[LLVMFuzzerTestOneInput]+0x25): undefined reference to `b2nd_array_new'
/usr/bin/ld: fuzz_decompress_frame.c:(.text.LLVMFuzzerTestOneInput[LLVMFuzzerTestOneInput]+0x9a): undefined reference to `b2nd_array_free'
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
