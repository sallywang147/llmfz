Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
#include <inttypes.h>
#include <string.h>

#include "b2nd.h"

#ifdef __cplusplus
extern "C" {
#endif

int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  struct b2nd_array_t *array = b2nd_array_new(1024, 1024);
  if (array == NULL) {
    return 0;
  }

  int ret = b2nd_save(array, (char *)data);
  b2nd_array_free(array);
  return ret;
}

#ifdef __cplusplus
}
#endif

// b2nd.h
#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
#include <inttypes.h>
#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

struct b2nd_array_t {
  uint32_t width;
  uint32_t height;
  uint8_t *data;
};

struct b2nd_array_t *b2nd_array_new(uint32_t width, uint32_t height) {
  struct b2nd_array_t *array = malloc(sizeof(struct b2nd_array_t));
  if (array == NULL) {
    return NULL;
  }

  array->width = width;
  array->height = height;
  array->data = malloc(width * height);
  if (array->data == NULL) {
    free(array);
    return NULL;
  }

  return array;
}

void b2nd_array_free(struct b2nd_array_t *array) {
  if (array == NULL) {
    return;
  }

  free(array->data);
  free(array);
}

int b2nd_save(struct b2nd_array_t *array, char *data) {
  if (array == NULL || data == NULL) {
    return -1;
  }

  memcpy(array->data, data, array->width * array->height);
  return 0;
}

#ifdef __cplusplus
}
#endif
</code>

The code has the following build issues:
<error>
/src/c-blosc2/tests/fuzz/fuzz_decompress_frame.c:45:22: error: conflicting types for 'b2nd_array_new'
struct b2nd_array_t *b2nd_array_new(uint32_t width, uint32_t height) {
                     ^
/src/c-blosc2/tests/fuzz/fuzz_decompress_frame.c:14:32: note: previous implicit declaration is here
  struct b2nd_array_t *array = b2nd_array_new(1024, 1024);
                               ^
/src/c-blosc2/tests/fuzz/fuzz_decompress_frame.c:62:6: error: conflicting types for 'b2nd_array_free'
void b2nd_array_free(struct b2nd_array_t *array) {
     ^
/src/c-blosc2/tests/fuzz/fuzz_decompress_frame.c:20:3: note: previous implicit declaration is here
  b2nd_array_free(array);
  ^
/src/c-blosc2/tests/fuzz/fuzz_decompress_frame.c:71:5: error: conflicting types for 'b2nd_save'
int b2nd_save(struct b2nd_array_t *array, char *data) {
    ^
/src/c-blosc2/include/b2nd.h:283:18: note: previous declaration is here
BLOSC_EXPORT int b2nd_save(const b2nd_array_t *array, char *urlpath);
                 ^
3 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
