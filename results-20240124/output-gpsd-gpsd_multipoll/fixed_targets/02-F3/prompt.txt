Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include "gpsd_config.h"  /* must be before all includes */

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

#include "gpsd.h"

#define kMinInputLength 10
#define kMaxInputLength 9216

extern "C" {
typedef void (*func_type)(struct gps_device_t *device);
int gpsd_multipoll(bool, struct gps_device_t *, func_type *, double);
ssize_t packet_get(int, struct lexer_t *);
}

extern int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
    if (Size < kMinInputLength || Size > kMaxInputLength) {
        return 0;
    }

    {
        struct gps_device_t device;
        func_type func;
        int nullfd = open("/dev/null", O_RDONLY);
        ssize_t st;

        device.gpsdata.dev.baudrate = 4800;

        gpsd_multipoll(false, &device, &func, 0.0);

        do {
            st = packet_get(nullfd, &device.lexer);
        } while (st > 0);

        close(nullfd);
    }

    return 0;
}
</code>

The code has the following build issues:
<error>
FuzzJson.c:13:8: error: expected identifier or '('
extern "C" {
       ^
FuzzJson.c:26:9: error: use of undeclared identifier 'func_type'
        func_type func;
        ^
FuzzJson.c:32:41: error: use of undeclared identifier 'func'
        gpsd_multipoll(false, &device, &func, 0.0);
                                        ^
3 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
