Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <string>

#include <openssl/ec.h>
#include <openssl/pem.h>

extern "C" {
#include <openssl/bio.h>
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const std::string pem_data = stream.ConsumeRemainingBytesAsString();
  struct ec_key_st *key = nullptr;
  BIO *bio = BIO_new_mem_buf(const_cast<char*>(pem_data.c_str()), -1);
  if (bio == nullptr) {
    return 0;
  }
  PEM_read_bio_ECPrivateKey(bio, &key, nullptr, nullptr);
  BIO_free(bio);
  EC_KEY_free(key);
  return 0;
}
</code>

The code has the following build issues:
<error>
The target function `struct ec_key_st * PEM_read_ECPrivateKey(struct _IO_FILE * , struct ec_key_st.4884 ** , func_type * , char * )` was not called by the fuzz target `LLVMFuzzerTestOneInput`.YOU MUST CALL FUNCTION `struct ec_key_st * PEM_read_ECPrivateKey(struct _IO_FILE * , struct ec_key_st.4884 ** , func_type * , char * )` INSIDE FUNCTION `LLVMFuzzerTestOneInput`.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
