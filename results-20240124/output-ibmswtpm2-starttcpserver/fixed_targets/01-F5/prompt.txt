Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <boost/asio.hpp>

using namespace std;
using namespace boost::asio;

// Wrap the header with extern "C" {} to fix the linking issue.
extern "C" {
#include "StartTcpServer.h"
}

int main() {
  // Create a mutex and a condition variable to synchronize the main thread and the worker thread.
  mutex mtx;
  condition_variable cv;

  // Create a boolean flag to indicate whether the server has started.
  bool server_started = false;

  // Create a worker thread to start the TCP server.
  thread worker([&]() {
    // Start the TCP server.
    StartTcpServer();

    // Signal the main thread that the server has started.
    lock_guard<mutex> lock(mtx);
    server_started = true;
    cv.notify_one();
  });

  // Wait until the server has started.
  {
    unique_lock<mutex> lock(mtx);
    cv.wait(lock, [&]() { return server_started; });
  }

  // Keep the main thread alive until the user presses Enter.
  cout << "Press Enter to stop the server..." << endl;
  cin.get();

  // Stop the TCP server.
  StopTcpServer();

  // Join the worker thread.
  worker.join();

  return 0;
}
</code>

The code has the following build issues:
<error>

</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
