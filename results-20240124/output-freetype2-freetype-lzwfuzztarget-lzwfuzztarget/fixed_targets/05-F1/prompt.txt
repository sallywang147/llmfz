Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
 #include <ft2build.h>
#include FT_FREETYPE_H
#include FT_LZW_H
#include FT_OUTLINE_H
#include FT_IMAGE_H
#include FT_TRUETYPE_IDS_H
#include FT_TRUETYPE_TAGS_H

#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <string>
#include <vector>

#include "fuzzer/FuzzedDataProvider.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  static FT_Library library;
  static int library_init_result = FT_Init_FreeType(&library);
  if (library_init_result) {
    return 0;
  }

  FuzzedDataProvider stream(data, size);
  const std::string font_path = stream.ConsumeRandomLengthString();
  FT_Face face;
  if (FT_New_Face(library, font_path.c_str(), 0, &face)) {
    return 0;
  }

  FT_GlyphSlot slot = face->glyph;

  // Select a random character.
  const int glyph_index = stream.ConsumeIntegralInRange<int>(0, face->num_glyphs);
  if (FT_Load_Glyph(face, glyph_index, FT_LOAD_NO_BITMAP)) {
    FT_Done_Face(face);
    return 0;
  }

  // Convert the outline to a bitmap.
  if (FT_Render_Glyph(slot, FT_RENDER_MODE_NORMAL)) {
    FT_Done_Face(face);
    return 0;
  }

  // Compress the bitmap using LZW.
  FT_LzwContext lzw_context;
  if (FT_Lzw_New_Context(&lzw_context, FT_LZW_MIN_CODE_BITS)) {
    FT_Done_Face(face);
    return 0;
  }

  FT_Lzw_Encode(lzw_context, slot->bitmap.buffer, slot->bitmap.width * slot->bitmap.rows);

  FT_Lzw_Done_Context(lzw_context);
  FT_Done_Face(face);

  return 0;
}
</code>

The code has the following build issues:
<error>
The target function `void freetype::LzwFuzzTarget::LzwFuzzTarget(freetype::LzwFuzzTarget * this)` was not called by the fuzz target `LLVMFuzzerTestOneInput`.YOU MUST CALL FUNCTION `void freetype::LzwFuzzTarget::LzwFuzzTarget(freetype::LzwFuzzTarget * this)` INSIDE FUNCTION `LLVMFuzzerTestOneInput`.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
