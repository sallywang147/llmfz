Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <cstddef>
#include <cstdint>
#include <cstdlib>

#include "double-conversion.h"

extern "C" {
#include "double-conversion/double-conversion/utils.h"
}

using double_conversion::StringToDoubleConverter;

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  StringToDoubleConverter converter(
      StringToDoubleConverter::ALLOW_HEX |
          StringToDoubleConverter::ALLOW_OCTALS |
          StringToDoubleConverter::ALLOW_TRAILING_JUNK |
          StringToDoubleConverter::ALLOW_LEADING_SPACES |
          StringToDoubleConverter::ALLOW_TRAILING_SPACES |
          StringToDoubleConverter::ALLOW_SPACES_AFTER_SIGN |
          StringToDoubleConverter::ALLOW_CASE_INSENSIBILITY |
          StringToDoubleConverter::ALLOW_HEX_FLOATS,
      /*empty_string_value=*/0.0,
      /*junk_string_value=*/0.0, "inf", "nan");
  int processed_characters_count = 0;
  double_conversion::Vector<char> buffer(size);
  for (size_t i = 0; i < size; i++) {
    buffer[i] = data[i];
  }
  converter.StringToFloat(buffer.start(), size, &processed_characters_count);
  return 0;
}
</code>

The code has the following build issues:
<error>
/src/string_to_double_fuzzer.cc:26:35: error: no matching constructor for initialization of 'double_conversion::Vector<char>'
  double_conversion::Vector<char> buffer(size);
                                  ^      ~~~~
/src/double-conversion/double-conversion/utils.h:249:7: note: candidate constructor (the implicit copy constructor) not viable: no known conversion from 'size_t' (aka 'unsigned long') to 'const double_conversion::Vector<char>' for 1st argument
class Vector {
      ^
/src/double-conversion/double-conversion/utils.h:249:7: note: candidate constructor (the implicit move constructor) not viable: no known conversion from 'size_t' (aka 'unsigned long') to 'double_conversion::Vector<char>' for 1st argument
/src/double-conversion/double-conversion/utils.h:251:3: note: candidate constructor not viable: requires 0 arguments, but 1 was provided
  Vector() : start_(DOUBLE_CONVERSION_NULLPTR), length_(0) {}
  ^
/src/double-conversion/double-conversion/utils.h:252:3: note: candidate constructor not viable: requires 2 arguments, but 1 was provided
  Vector(T* data, int len) : start_(data), length_(len) {
  ^
1 error generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
