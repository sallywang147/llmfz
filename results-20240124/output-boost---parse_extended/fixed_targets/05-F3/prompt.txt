Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <boost/regex.hpp>
#include <fuzzer/FuzzedDataProvider.h>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
  FuzzedDataProvider fuzzed_data(Data, Size);
  // First value is length of the regex string
  size_t regex_length = fuzzed_data.ConsumeIntegral<uint8_t>();
  // Second value is regexp string whose length is `regex_length`
  std::string regex_string = fuzzed_data.ConsumeBytesAsString(regex_length);
  boost::re_detail_500::regex_data<char, boost::c_regex_traits<char> > regex_data(regex_string.c_str());
  try {
    boost::re_detail_500::basic_regex_parser<char, boost::c_regex_traits<char> > parser(regex_data);
    bool match = parser.parse_extended();
  }
  catch (const std::runtime_error &) {
  }
  return 0;
}
</code>

The code has the following build issues:
<error>
../boost_ptree_jsonread_fuzzer.cc:10:72: error: no matching constructor for initialization of 'boost::re_detail_500::regex_data<char, boost::c_regex_traits<char>>'
  boost::re_detail_500::regex_data<char, boost::c_regex_traits<char> > regex_data(regex_string.c_str());
                                                                       ^          ~~~~~~~~~~~~~~~~~~~~
./boost/regex/v5/basic_regex.hpp:160:8: note: candidate constructor (the implicit copy constructor) not viable: no known conversion from 'const std::basic_string<char>::value_type *' (aka 'const char *') to 'const boost::re_detail_500::regex_data<char, boost::c_regex_traits<char>>' for 1st argument
struct regex_data : public named_subexpressions
       ^
./boost/regex/v5/basic_regex.hpp:160:8: note: candidate constructor (the implicit move constructor) not viable: no known conversion from 'const std::basic_string<char>::value_type *' (aka 'const char *') to 'boost::re_detail_500::regex_data<char, boost::c_regex_traits<char>>' for 1st argument
./boost/regex/v5/basic_regex.hpp:165:4: note: candidate constructor not viable: no known conversion from 'const std::basic_string<char>::value_type *' (aka 'const char *') to 'const ::std::shared_ptr< ::boost::regex_traits_wrapper<c_regex_traits<char>>>' for 1st argument
   regex_data(const ::std::shared_ptr<
   ^
./boost/regex/v5/basic_regex.hpp:171:4: note: candidate constructor not viable: requires 0 arguments, but 1 was provided
   regex_data() 
   ^
../boost_ptree_jsonread_fuzzer.cc:12:82: error: no matching constructor for initialization of 'boost::re_detail_500::basic_regex_parser<char, boost::c_regex_traits<char>>'
    boost::re_detail_500::basic_regex_parser<char, boost::c_regex_traits<char> > parser(regex_data);
                                                                                 ^      ~~~~~~~~~~
./boost/regex/v5/basic_regex_parser.hpp:52:4: note: candidate constructor not viable: no known conversion from 'boost::re_detail_500::regex_data<char, boost::c_regex_traits<char>>' to 'regex_data<char, boost::c_regex_traits<char>> *' for 1st argument; take the address of the argument with &
   basic_regex_parser(regex_data<charT, traits>* data);
   ^
./boost/regex/v5/basic_regex_parser.hpp:112:4: note: candidate constructor not viable: no known conversion from 'boost::re_detail_500::regex_data<char, boost::c_regex_traits<char>>' to 'const boost::re_detail_500::basic_regex_parser<char, boost::c_regex_traits<char>>' for 1st argument
   basic_regex_parser(const basic_regex_parser&);
   ^
2 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
