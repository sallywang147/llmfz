Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>
#include <boost/regex.hpp>
#include <boost/regex/regex_traits.hpp>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
  FuzzedDataProvider fuzzed_data(Data, Size);
  // First value is length of the regex string
  size_t regex_length = fuzzed_data.ConsumeIntegral<uint8_t>();
  // Second value is regexp string whose length is `regex_length`
  std::string regex_string = fuzzed_data.ConsumeBytesAsString(regex_length);
  try {
    boost::regex_traits<char> traits;
    boost::regex parser(regex_string, traits);
    parser.parse_extended();
  }
  catch (const std::runtime_error &) {
  }
  return 0;
}
</code>

The code has the following build issues:
<error>
../boost_ptree_jsonread_fuzzer.cc:13:18: error: no matching constructor for initialization of 'boost::regex' (aka 'basic_regex<char, regex_traits<char>>')
    boost::regex parser(regex_string, traits);
                 ^      ~~~~~~~~~~~~~~~~~~~~
./boost/regex/v5/basic_regex.hpp:397:13: note: candidate constructor template not viable: no known conversion from 'boost::regex_traits<char>' to 'boost::basic_regex::flag_type' (aka 'unsigned int') for 2nd argument
   explicit basic_regex(const std::basic_string<charT, ST, SA>& p, flag_type f = regex_constants::normal)
            ^
./boost/regex/v5/basic_regex.hpp:339:13: note: candidate constructor not viable: no known conversion from 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') to 'const char *' for 1st argument
   explicit basic_regex(const charT* p, flag_type f = regex_constants::normal)
            ^
./boost/regex/v5/basic_regex.hpp:343:4: note: candidate constructor not viable: no known conversion from 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') to 'const char *' for 1st argument
   basic_regex(const charT* p1, const charT* p2, flag_type f = regex_constants::normal)
   ^
./boost/regex/v5/basic_regex.hpp:403:4: note: candidate template ignored: deduced conflicting types for parameter 'InputIterator' ('std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') vs. 'boost::regex_traits<char>')
   basic_regex(InputIterator arg_first, InputIterator arg_last, flag_type f = regex_constants::normal)
   ^
./boost/regex/v5/basic_regex.hpp:351:4: note: candidate constructor not viable: requires single argument 'that', but 2 arguments were provided
   basic_regex(const basic_regex& that)
   ^
./boost/regex/v5/basic_regex.hpp:347:4: note: candidate constructor not viable: requires 3 arguments, but 2 were provided
   basic_regex(const charT* p, size_type len, flag_type f)
   ^
./boost/regex/v5/basic_regex.hpp:338:13: note: candidate constructor not viable: requires 0 arguments, but 2 were provided
   explicit basic_regex(){}
            ^
../boost_ptree_jsonread_fuzzer.cc:14:12: error: no member named 'parse_extended' in 'boost::basic_regex<char>'
    parser.parse_extended();
    ~~~~~~ ^
2 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
