Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <boost/regex.hpp>
#include <fuzzer/FuzzedDataProvider.h>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
  FuzzedDataProvider fuzzed_data(Data, Size);
  // First value is length of the regex string
  size_t regex_length = fuzzed_data.ConsumeIntegral<uint8_t>();
  // Second value is regexp string whose length is `regex_length`
  std::string regex_string = fuzzed_data.ConsumeBytesAsString(regex_length);
  boost::regex_data<char, boost::c_regex_traits<char> > regex_data(regex_string.c_str(), regex_string.length());
  try {
    boost::basic_regex_parser<char, boost::c_regex_traits<char> > parser(&regex_data);
    bool match = parser.parse_extended();
  }
  catch (const std::runtime_error &) {
  }
  return 0;
}
</code>

The code has the following build issues:
<error>
../boost_ptree_jsonread_fuzzer.cc:10:3: error: no template named 'regex_data' in namespace 'boost'; did you mean 'boost::re_detail_500::regex_data'?
  boost::regex_data<char, boost::c_regex_traits<char> > regex_data(regex_string.c_str(), regex_string.length());
  ^~~~~~~~~~~~~~~~~
  boost::re_detail_500::regex_data
./boost/regex/v5/basic_regex.hpp:160:8: note: 'boost::re_detail_500::regex_data' declared here
struct regex_data : public named_subexpressions
       ^
../boost_ptree_jsonread_fuzzer.cc:10:57: error: no matching constructor for initialization of 'boost::regex_data<char, boost::c_regex_traits<char>>'
  boost::regex_data<char, boost::c_regex_traits<char> > regex_data(regex_string.c_str(), regex_string.length());
                                                        ^          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./boost/regex/v5/basic_regex.hpp:165:4: note: candidate constructor not viable: requires single argument 't', but 2 arguments were provided
   regex_data(const ::std::shared_ptr<
   ^
./boost/regex/v5/basic_regex.hpp:160:8: note: candidate constructor (the implicit copy constructor) not viable: requires 1 argument, but 2 were provided
struct regex_data : public named_subexpressions
       ^
./boost/regex/v5/basic_regex.hpp:160:8: note: candidate constructor (the implicit move constructor) not viable: requires 1 argument, but 2 were provided
./boost/regex/v5/basic_regex.hpp:171:4: note: candidate constructor not viable: requires 0 arguments, but 2 were provided
   regex_data() 
   ^
../boost_ptree_jsonread_fuzzer.cc:12:5: error: no template named 'basic_regex_parser' in namespace 'boost'; did you mean 'boost::re_detail_500::basic_regex_parser'?
    boost::basic_regex_parser<char, boost::c_regex_traits<char> > parser(&regex_data);
    ^~~~~~~~~~~~~~~~~~~~~~~~~
    boost::re_detail_500::basic_regex_parser
./boost/regex/v5/basic_regex_parser.hpp:49:7: note: 'boost::re_detail_500::basic_regex_parser' declared here
class basic_regex_parser : public basic_regex_creator<charT, traits>
      ^
3 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
