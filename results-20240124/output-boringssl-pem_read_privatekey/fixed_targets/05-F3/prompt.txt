Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <vector>

#include "openssl/bio.h"
#include "openssl/evp.h"
#include "openssl/pem.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const std::string filename = stream.ConsumeRemainingBytesAsString();
  FILE* file = fopen(filename.c_str(), "rb");
  if (file == nullptr) {
    return 0;
  }

  BIO* bio = BIO_new(BIO_s_file());
  if (bio == nullptr) {
    fclose(file);
    return 0;
  }

  BIO_set_fp(bio, file, BIO_NOCLOSE);

  EVP_PKEY* key = PEM_read_bio_PrivateKey(bio, nullptr, nullptr, nullptr);

  EVP_PKEY_free(key);
  BIO_free(bio);
  fclose(file);

  return 0;
}
</code>

The code has the following build issues:
<error>
The target function `struct evp_pkey_st * PEM_read_PrivateKey(struct _IO_FILE * , struct evp_pkey_st ** , func_type * , char * )` was not called by the fuzz target `LLVMFuzzerTestOneInput`.YOU MUST CALL FUNCTION `struct evp_pkey_st * PEM_read_PrivateKey(struct _IO_FILE * , struct evp_pkey_st ** , func_type * , char * )` INSIDE FUNCTION `LLVMFuzzerTestOneInput`.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
