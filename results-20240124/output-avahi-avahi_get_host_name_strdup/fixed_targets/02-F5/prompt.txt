Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <algorithm>
#include <fuzzer/FuzzedDataProvider.h>

#include <stdbool.h>
#include <stdint.h>
#include <string.h>

#include "avahi-common/defs.h"
#include "avahi-common/domain.h"
#include "avahi-common/malloc.h"
#include "avahi-core/dns.h"
#include "avahi-core/domain-util.h"
#include "avahi-core/log.h"

extern "C" {
void log_function(AvahiLogLevel level, const char *txt) {}
AvahiDnsPacket *avahi_dns_packet_new(unsigned mtu);
uint16_t avahi_dns_packet_get_field(AvahiDnsPacket *p, unsigned idx);
AvahiRecord *avahi_dns_packet_consume_record(AvahiDnsPacket *p, int *ret_cache_flush);
uint8_t *avahi_dns_packet_append_record(AvahiDnsPacket *p, AvahiRecord *r, int cache_flush, unsigned max_ttl);
void avahi_dns_packet_inc_field(AvahiDnsPacket *p, unsigned idx);
AvahiKey *avahi_dns_packet_consume_key(AvahiDnsPacket *p, int *ret_unicast_response);
uint8_t *avahi_dns_packet_append_key(AvahiDnsPacket *p, AvahiKey *k, int unicast_response);
void avahi_dns_packet_free(AvahiDnsPacket *p);
}

void domain_ends_with_mdns_suffix(const char *domain) {
  avahi_domain_ends_with(domain, AVAHI_MDNS_SUFFIX_LOCAL);
  avahi_domain_ends_with(domain, AVAHI_MDNS_SUFFIX_ADDR_IPV4);
  avahi_domain_ends_with(domain, AVAHI_MDNS_SUFFIX_ADDR_IPV6);
}

bool copy_rrs(AvahiDnsPacket *from, AvahiDnsPacket *to, unsigned idx) {
  for (uint16_t n = avahi_dns_packet_get_field(from, idx); n > 0; n--) {
    AvahiRecord *record;
    int cache_flush = 0;
    uint8_t *res;

    if (!(record = avahi_dns_packet_consume_record(from, &cache_flush)))
      return false;

    avahi_free(avahi_record_to_string(record));

    domain_ends_with_mdns_suffix(record->key->name);

    // This resembles the RR callbacks responsible for browsing services
    if (record->key->type == AVAHI_DNS_TYPE_PTR) {
      char service[AVAHI_LABEL_MAX], type[AVAHI_DOMAIN_NAME_MAX], domain[AVAHI_DOMAIN_NAME_MAX];
      char name[AVAHI_DOMAIN_NAME_MAX];
      int res;

      if (avahi_service_name_split(record->data.ptr.name, service, sizeof(service), type, sizeof(type), domain, sizeof(domain)) >= 0) {
        res = avahi_service_name_join(name, sizeof(name), service, type, domain);
        assert(res >= 0);
      }

      if (avahi_service_name_split(record->data.ptr.name, NULL, 0, type, sizeof(type), domain, sizeof(domain)) >= 0) {
        res = avahi_service_name_join(name, sizeof(name), NULL, type, domain);
        assert(res >= 0);
      }
    }

    res = avahi_dns_packet_append_record(to, record, cache_flush, 0);
    avahi_record_unref(record);
    if (!res)
      return false;
    avahi_dns_packet_inc_field(to, idx);
  }
  return true;
}

int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  AvahiDnsPacket *p1 = NULL, *p2 = NULL;
  char *host_name;

  if (size > AVAHI_DNS_PACKET_SIZE_MAX)
    return 0;

  avahi_set_log_function(log_function);

  if (!(p1 = avahi_dns_packet_new(size + AVAHI_DNS_PACKET_EXTRA_SIZE)))
    goto finish;

  memcpy(AVAHI_DNS_PACKET_DATA(p1), data, size);
  p1->size = size;

  if (avahi_dns_packet_check_valid(p1) < 0)
    goto finish;

  if (!(p2 = avahi_dns_packet_new(size + AVAHI_DNS_PACKET_EXTRA_SIZE)))
    goto finish;

  avahi_dns_packet_set_field(p2, AVAHI_DNS_FIELD_ID, avahi_dns_packet_get_field(p1, AVAHI_DNS_FIELD_ID));

  for (uint16_t n = avahi_dns_packet_get_field(p1, AVAHI_DNS_FIELD_QDCOUNT); n > 0; n--) {
    AvahiKey *key;
    int unicast_response = 0;
    uint8_t *res;

    if (!(key = avahi_dns_packet_consume_key(p1, &unicast_response)))
      goto finish;

    avahi_free(avahi_key_to_string(key));

    domain_ends_with_mdns_suffix(key->name);

    res = avahi_dns_packet_append_key(p2, key, unicast_response);
    avahi_key_unref(key);
    if (!res)
      goto finish;
    avahi_dns_packet_inc_field(p2, AVAHI_DNS_FIELD_QDCOUNT);
  }

  if (!copy_rrs(p1, p2, AVAHI_DNS_FIELD_ANCOUNT))
    goto finish;

  if (!copy_rrs(p1, p2, AVAHI_DNS_FIELD_NSCOUNT))
    goto finish;

  if (!copy_rrs(p1, p2, AVAHI_DNS_FIELD_ARCOUNT))
    goto finish;

  host_name = avahi_get_host_name_strdup();

finish:
  if (p2)
    avahi_dns_packet_free(p2);
  if (p1)
    avahi_dns_packet_free(p1);
  if (host_name)
    free(host_name);

  return 0;
}
</code>

The code has the following build issues:
<error>
fuzz/fuzz-consume-record.c:1:10: fatal error: 'algorithm' file not found
#include <algorithm>
         ^~~~~~~~~~~
1 error generated.

Fix failure
fuzz/fuzz-consume-record.cpp:17:17: error: declaration of 'avahi_dns_packet_new' has a different language linkage
AvahiDnsPacket *avahi_dns_packet_new(unsigned mtu);
                ^
./avahi-core/dns.h:40:17: note: previous declaration is here
AvahiDnsPacket* avahi_dns_packet_new(unsigned mtu);
                ^
fuzz/fuzz-consume-record.cpp:18:10: error: declaration of 'avahi_dns_packet_get_field' has a different language linkage
uint16_t avahi_dns_packet_get_field(AvahiDnsPacket *p, unsigned idx);
         ^
./avahi-core/dns.h:48:10: note: previous declaration is here
uint16_t avahi_dns_packet_get_field(AvahiDnsPacket *p, unsigned idx);
         ^
fuzz/fuzz-consume-record.cpp:19:14: error: declaration of 'avahi_dns_packet_consume_record' has a different language linkage
AvahiRecord *avahi_dns_packet_consume_record(AvahiDnsPacket *p, int *ret_cache_flush);
             ^
./avahi-core/dns.h:72:14: note: previous declaration is here
AvahiRecord* avahi_dns_packet_consume_record(AvahiDnsPacket *p, int *ret_cache_flush);
             ^
fuzz/fuzz-consume-record.cpp:20:10: error: declaration of 'avahi_dns_packet_append_record' has a different language linkage
uint8_t *avahi_dns_packet_append_record(AvahiDnsPacket *p, AvahiRecord *r, int cache_flush, unsigned max_ttl);
         ^
./avahi-core/dns.h:60:10: note: previous declaration is here
uint8_t* avahi_dns_packet_append_record(AvahiDnsPacket *p, AvahiRecord *r, int cache_flush, unsigned max_ttl);
         ^
fuzz/fuzz-consume-record.cpp:21:6: error: declaration of 'avahi_dns_packet_inc_field' has a different language linkage
void avahi_dns_packet_inc_field(AvahiDnsPacket *p, unsigned idx);
     ^
./avahi-core/dns.h:49:6: note: previous declaration is here
void avahi_dns_packet_inc_field(AvahiDnsPacket *p, unsigned idx);
     ^
fuzz/fuzz-consume-record.cpp:22:11: error: declaration of 'avahi_dns_packet_consume_key' has a different language linkage
AvahiKey *avahi_dns_packet_consume_key(AvahiDnsPacket *p, int *ret_unicast_response);
          ^
./avahi-core/dns.h:71:11: note: previous declaration is here
AvahiKey* avahi_dns_packet_consume_key(AvahiDnsPacket *p, int *ret_unicast_response);
          ^
fuzz/fuzz-consume-record.cpp:23:10: error: declaration of 'avahi_dns_packet_append_key' has a different language linkage
uint8_t *avahi_dns_packet_append_key(AvahiDnsPacket *p, AvahiKey *k, int unicast_response);
         ^
./avahi-core/dns.h:59:10: note: previous declaration is here
uint8_t* avahi_dns_packet_append_key(AvahiDnsPacket *p, AvahiKey *k, int unicast_response);
         ^
fuzz/fuzz-consume-record.cpp:24:6: error: declaration of 'avahi_dns_packet_free' has a different language linkage
void avahi_dns_packet_free(AvahiDnsPacket *p);
     ^
./avahi-core/dns.h:46:6: note: previous declaration is here
void avahi_dns_packet_free(AvahiDnsPacket *p);
     ^
fuzz/fuzz-consume-record.cpp:34:21: error: call to 'avahi_dns_packet_get_field' is ambiguous
  for (uint16_t n = avahi_dns_packet_get_field(from, idx); n > 0; n--) {
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~
./avahi-core/dns.h:48:10: note: candidate function
uint16_t avahi_dns_packet_get_field(AvahiDnsPacket *p, unsigned idx);
         ^
fuzz/fuzz-consume-record.cpp:18:10: note: candidate function
uint16_t avahi_dns_packet_get_field(AvahiDnsPacket *p, unsigned idx);
         ^
fuzz/fuzz-consume-record.cpp:39:20: error: call to 'avahi_dns_packet_consume_record' is ambiguous
    if (!(record = avahi_dns_packet_consume_record(from, &cache_flush)))
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./avahi-core/dns.h:72:14: note: candidate function
AvahiRecord* avahi_dns_packet_consume_record(AvahiDnsPacket *p, int *ret_cache_flush);
             ^
fuzz/fuzz-consume-record.cpp:19:14: note: candidate function
AvahiRecord *avahi_dns_packet_consume_record(AvahiDnsPacket *p, int *ret_cache_flush);
             ^
fuzz/fuzz-consume-record.cpp:63:11: error: call to 'avahi_dns_packet_append_record' is ambiguous
    res = avahi_dns_packet_append_record(to, record, cache_flush, 0);
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./avahi-core/dns.h:60:10: note: candidate function
uint8_t* avahi_dns_packet_append_record(AvahiDnsPacket *p, AvahiRecord *r, int cache_flush, unsigned max_ttl);
         ^
fuzz/fuzz-consume-record.cpp:20:10: note: candidate function
uint8_t *avahi_dns_packet_append_record(AvahiDnsPacket *p, AvahiRecord *r, int cache_flush, unsigned max_ttl);
         ^
fuzz/fuzz-consume-record.cpp:67:5: error: call to 'avahi_dns_packet_inc_field' is ambiguous
    avahi_dns_packet_inc_field(to, idx);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
./avahi-core/dns.h:49:6: note: candidate function
void avahi_dns_packet_inc_field(AvahiDnsPacket *p, unsigned idx);
     ^
fuzz/fuzz-consume-record.cpp:21:6: note: candidate function
void avahi_dns_packet_inc_field(AvahiDnsPacket *p, unsigned idx);
     ^
fuzz/fuzz-consume-record.cpp:93:54: error: call to 'avahi_dns_packet_get_field' is ambiguous
  avahi_dns_packet_set_field(p2, AVAHI_DNS_FIELD_ID, avahi_dns_packet_get_field(p1, AVAHI_DNS_FIELD_ID));
                                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~
./avahi-core/dns.h:48:10: note: candidate function
uint16_t avahi_dns_packet_get_field(AvahiDnsPacket *p, unsigned idx);
         ^
fuzz/fuzz-consume-record.cpp:18:10: note: candidate function
uint16_t avahi_dns_packet_get_field(AvahiDnsPacket *p, unsigned idx);
         ^
fuzz/fuzz-consume-record.cpp:95:21: error: call to 'avahi_dns_packet_get_field' is ambiguous
  for (uint16_t n = avahi_dns_packet_get_field(p1, AVAHI_DNS_FIELD_QDCOUNT); n > 0; n--) {
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~
./avahi-core/dns.h:48:10: note: candidate function
uint16_t avahi_dns_packet_get_field(AvahiDnsPacket *p, unsigned idx);
         ^
fuzz/fuzz-consume-record.cpp:18:10: note: candidate function
uint16_t avahi_dns_packet_get_field(AvahiDnsPacket *p, unsigned idx);
         ^
fuzz/fuzz-consume-record.cpp:100:17: error: call to 'avahi_dns_packet_consume_key' is ambiguous
    if (!(key = avahi_dns_packet_consume_key(p1, &unicast_response)))
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./avahi-core/dns.h:71:11: note: candidate function
AvahiKey* avahi_dns_packet_consume_key(AvahiDnsPacket *p, int *ret_unicast_response);
          ^
fuzz/fuzz-consume-record.cpp:22:11: note: candidate function
AvahiKey *avahi_dns_packet_consume_key(AvahiDnsPacket *p, int *ret_unicast_response);
          ^
fuzz/fuzz-consume-record.cpp:107:11: error: call to 'avahi_dns_packet_append_key' is ambiguous
    res = avahi_dns_packet_append_key(p2, key, unicast_response);
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./avahi-core/dns.h:59:10: note: candidate function
uint8_t* avahi_dns_packet_append_key(AvahiDnsPacket *p, AvahiKey *k, int unicast_response);
         ^
fuzz/fuzz-consume-record.cpp:23:10: note: candidate function
uint8_t *avahi_dns_packet_append_key(AvahiDnsPacket *p, AvahiKey *k, int unicast_response);
         ^
fuzz/fuzz-consume-record.cpp:111:5: error: call to 'avahi_dns_packet_inc_field' is ambiguous
    avahi_dns_packet_inc_field(p2, AVAHI_DNS_FIELD_QDCOUNT);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
./avahi-core/dns.h:49:6: note: candidate function
void avahi_dns_packet_inc_field(AvahiDnsPacket *p, unsigned idx);
     ^
fuzz/fuzz-consume-record.cpp:21:6: note: candidate function
void avahi_dns_packet_inc_field(AvahiDnsPacket *p, unsigned idx);
     ^
fuzz/fuzz-consume-record.cpp:127:5: error: call to 'avahi_dns_packet_free' is ambiguous
    avahi_dns_packet_free(p2);
    ^~~~~~~~~~~~~~~~~~~~~
./avahi-core/dns.h:46:6: note: candidate function
void avahi_dns_packet_free(AvahiDnsPacket *p);
     ^
fuzz/fuzz-consume-record.cpp:24:6: note: candidate function
void avahi_dns_packet_free(AvahiDnsPacket *p);
     ^
fuzz/fuzz-consume-record.cpp:129:5: error: call to 'avahi_dns_packet_free' is ambiguous
    avahi_dns_packet_free(p1);
    ^~~~~~~~~~~~~~~~~~~~~
./avahi-core/dns.h:46:6: note: candidate function
void avahi_dns_packet_free(AvahiDnsPacket *p);
     ^
fuzz/fuzz-consume-record.cpp:24:6: note: candidate function
void avahi_dns_packet_free(AvahiDnsPacket *p);
     ^
19 errors generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
