Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <cstddef>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <vector>

#include "libxml/parser.h"

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider provider(data, size);
  const size_t namespace_size = provider.ConsumeIntegralInRange<size_t>(
      0,
      provider.remaining_bytes());
  auto namespace_data = provider.ConsumeBytes<char>(namespace_size);
  const size_t encoding_size = provider.ConsumeIntegralInRange<size_t>(
      0,
      provider.remaining_bytes());
  auto encoding_data = provider.ConsumeBytes<char>(encoding_size);
  struct XML_ParserStruct* parser =
      XML_ParserCreateNS(namespace_data.data(), encoding_data.data()[0]);
  if (parser == nullptr) {
    return 0;
  }
  XML_ParserFree(parser);
  return 0;
}
</code>

The code has the following build issues:
<error>
xml_parser_fuzzer.cc:9:10: fatal error: 'libxml/parser.h' file not found
#include "libxml/parser.h"
         ^~~~~~~~~~~~~~~~~
1 error generated.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
