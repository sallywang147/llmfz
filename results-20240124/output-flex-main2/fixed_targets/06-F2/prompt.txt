Given the following C++ program and its build error message, fix the code to achieve the original functionality.

If a function is missing, fix it by including the related libraries.

If the error contains "undefined reference to", this means one or more of the header <code>#include</code> directives need to be wrapped with <code>extern "C" {}</code> for the object linking to succeed. You must fix this by rewriting the relevant <code>#include</code> and wrapping it with <code>extern "C" {}</code>.

Below is the code needs to be built:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#include <algorithm>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <string>

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  FuzzedDataProvider stream(data, size);
  const int argc = stream.ConsumeIntegralInRange<int>(1, 100);
  std::vector<std::string> argv_vector;
  for (int i = 0; i < argc; i++) {
    argv_vector.push_back(stream.ConsumeRandomLengthString());
  }
  std::vector<char*> argv_ptrs;
  for (const auto& arg : argv_vector) {
    char* arg_ptr = const_cast<char*>(arg.c_str());
    argv_ptrs.push_back(arg_ptr);
  }
  argv_ptrs.push_back(nullptr);
  main(argc, argv_ptrs.data());
  return 0;
}
</code>

The code has the following build issues:
<error>
The target function `int main2(int argc, char ** argv)` was not called by the fuzz target `LLVMFuzzerTestOneInput`.YOU MUST CALL FUNCTION `int main2(int argc, char ** argv)` INSIDE FUNCTION `LLVMFuzzerTestOneInput`.
</error>

Fix code:
1. Consider the possible solution for the issues listed above.
2. Apply the solutions to the original code.
It's important to show the complete code, not only the fixed line.
<solution>
